Search.setIndex({"alltitles": {"API Reference": [[0, null]], "Accuracy": [[56, null]], "B2B": [[25, null]], "Clamp": [[65, null]], "Classifier": [[26, null]], "Computation times": [[12, null], [78, null]], "Covariance": [[27, null]], "Examples": [[11, null]], "Hierarchical": [[61, null]], "KFold": [[14, null]], "KernelRidgeCV": [[28, null]], "LabelBinariser": [[66, null]], "Metric": [[57, null]], "Module contents": [[80, "module-mvpy"], [81, "module-mvpy.crossvalidation"], [82, "module-mvpy.dataset"], [83, "module-mvpy.estimators"], [84, "module-mvpy.math"], [85, "module-mvpy.metrics"], [86, "module-mvpy.model_selection"], [87, "module-mvpy.preprocessing"], [88, "module-mvpy.signal"], [89, "module-mvpy.utilities"]], "Progressbar": [[72, null]], "R2": [[58, null]], "RSA": [[29, null]], "ReceptiveField": [[30, null]], "RepeatedKFold": [[15, null]], "RepeatedStratifiedKFold": [[16, null]], "RidgeCV": [[31, null]], "RidgeClassifier": [[32, null]], "RidgeDecoder": [[33, null]], "RidgeEncoder": [[34, null]], "RobustScaler": [[67, null]], "Roc_auc": [[59, null]], "SVC": [[35, null]], "Scaler": [[68, null]], "Shapley": [[62, null]], "Sliding": [[36, null]], "StratifiedKFold": [[17, null]], "Submodules": [[81, "submodules"], [82, "submodules"], [83, "submodules"], [84, "submodules"], [85, "submodules"], [86, "submodules"], [87, "submodules"], [88, "submodules"], [89, "submodules"]], "Subpackages": [[80, "subpackages"]], "TimeDelayed": [[37, null]], "Validator": [[18, null]], "accuracy": [[38, null]], "compare": [[77, null]], "cosine": [[39, null]], "cosine_d": [[40, null]], "cross_val_score": [[19, null]], "cv_euclidean": [[41, null]], "cv_mahalanobis": [[42, null]], "euclidean": [[43, null]], "get_var": [[75, null]], "hamming_window": [[69, null]], "hann_window": [[70, null]], "hierarchical_score": [[63, null]], "is_enabled": [[76, null]], "kernel_linear": [[44, null]], "kernel_poly": [[45, null]], "kernel_rbf": [[46, null]], "kernel_sigmoid": [[47, null]], "mahalanobis": [[48, null]], "make_meeg_categorical": [[20, null]], "make_meeg_colours": [[21, null]], "make_meeg_continuous": [[22, null]], "make_meeg_discrete": [[23, null]], "make_meeg_layout": [[24, null]], "mvpy": [[1, null], [79, null]], "mvpy package": [[80, null]], "mvpy.crossvalidation": [[2, null]], "mvpy.crossvalidation package": [[81, null]], "mvpy.crossvalidation.cross_val_score module": [[81, "module-mvpy.crossvalidation.cross_val_score"]], "mvpy.crossvalidation.kfold module": [[81, "module-mvpy.crossvalidation.kfold"]], "mvpy.crossvalidation.repeatedkfold module": [[81, "module-mvpy.crossvalidation.repeatedkfold"]], "mvpy.crossvalidation.repeatedstratifiedkfold module": [[81, "module-mvpy.crossvalidation.repeatedstratifiedkfold"]], "mvpy.crossvalidation.stratifiedkfold module": [[81, "module-mvpy.crossvalidation.stratifiedkfold"]], "mvpy.crossvalidation.validator module": [[81, "module-mvpy.crossvalidation.validator"]], "mvpy.dataset": [[3, null]], "mvpy.dataset package": [[82, null]], "mvpy.dataset.make_meeg_categorical module": [[82, "module-mvpy.dataset.make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours module": [[82, "module-mvpy.dataset.make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous module": [[82, "module-mvpy.dataset.make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete module": [[82, "module-mvpy.dataset.make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout module": [[82, "module-mvpy.dataset.make_meeg_layout"]], "mvpy.estimators": [[4, null]], "mvpy.estimators package": [[83, null]], "mvpy.estimators.b2b module": [[83, "module-mvpy.estimators.b2b"]], "mvpy.estimators.classifier module": [[83, "module-mvpy.estimators.classifier"]], "mvpy.estimators.covariance module": [[83, "module-mvpy.estimators.covariance"]], "mvpy.estimators.csp copy module": [[83, "mvpy-estimators-csp-copy-module"]], "mvpy.estimators.csp module": [[83, "module-mvpy.estimators.csp"]], "mvpy.estimators.kernelridgecv module": [[83, "module-mvpy.estimators.kernelridgecv"]], "mvpy.estimators.receptivefield module": [[83, "module-mvpy.estimators.receptivefield"]], "mvpy.estimators.ridgeclassifier module": [[83, "module-mvpy.estimators.ridgeclassifier"]], "mvpy.estimators.ridgecv module": [[83, "module-mvpy.estimators.ridgecv"]], "mvpy.estimators.ridgedecoder module": [[83, "module-mvpy.estimators.ridgedecoder"]], "mvpy.estimators.ridgeencoder module": [[83, "module-mvpy.estimators.ridgeencoder"]], "mvpy.estimators.rsa module": [[83, "module-mvpy.estimators.rsa"]], "mvpy.estimators.sliding module": [[83, "module-mvpy.estimators.sliding"]], "mvpy.estimators.svc module": [[83, "module-mvpy.estimators.svc"]], "mvpy.estimators.timedelayed module": [[83, "module-mvpy.estimators.timedelayed"]], "mvpy.math": [[5, null]], "mvpy.math package": [[84, null]], "mvpy.math.accuracy module": [[84, "module-mvpy.math.accuracy"]], "mvpy.math.cosine module": [[84, "module-mvpy.math.cosine"]], "mvpy.math.crossvalidated module": [[84, "module-mvpy.math.crossvalidated"]], "mvpy.math.euclidean module": [[84, "module-mvpy.math.euclidean"]], "mvpy.math.kernel_linear module": [[84, "module-mvpy.math.kernel_linear"]], "mvpy.math.kernel_poly module": [[84, "module-mvpy.math.kernel_poly"]], "mvpy.math.kernel_rbf module": [[84, "module-mvpy.math.kernel_rbf"]], "mvpy.math.kernel_sigmoid module": [[84, "module-mvpy.math.kernel_sigmoid"]], "mvpy.math.mahalanobis module": [[84, "module-mvpy.math.mahalanobis"]], "mvpy.math.pearsonr module": [[84, "module-mvpy.math.pearsonr"]], "mvpy.math.r2 module": [[84, "module-mvpy.math.r2"]], "mvpy.math.rank module": [[84, "module-mvpy.math.rank"]], "mvpy.math.roc_auc module": [[84, "module-mvpy.math.roc_auc"]], "mvpy.math.spearmanr module": [[84, "module-mvpy.math.spearmanr"]], "mvpy.metrics": [[6, null]], "mvpy.metrics package": [[85, null]], "mvpy.metrics.accuracy module": [[85, "module-mvpy.metrics.accuracy"]], "mvpy.metrics.metric module": [[85, "module-mvpy.metrics.metric"]], "mvpy.metrics.pearsonr module": [[85, "module-mvpy.metrics.pearsonr"]], "mvpy.metrics.r2 module": [[85, "module-mvpy.metrics.r2"]], "mvpy.metrics.roc_auc module": [[85, "module-mvpy.metrics.roc_auc"]], "mvpy.metrics.score module": [[85, "module-mvpy.metrics.score"]], "mvpy.metrics.spearmanr module": [[85, "module-mvpy.metrics.spearmanr"]], "mvpy.model_selection": [[7, null]], "mvpy.model_selection package": [[86, null]], "mvpy.model_selection.hierarchical module": [[86, "module-mvpy.model_selection.hierarchical"]], "mvpy.model_selection.hierarchical_score module": [[86, "module-mvpy.model_selection.hierarchical_score"]], "mvpy.model_selection.shapley module": [[86, "module-mvpy.model_selection.shapley"]], "mvpy.model_selection.shapley_score module": [[86, "module-mvpy.model_selection.shapley_score"]], "mvpy.preprocessing": [[8, null]], "mvpy.preprocessing package": [[87, null]], "mvpy.preprocessing.clamp module": [[87, "module-mvpy.preprocessing.clamp"]], "mvpy.preprocessing.labelbinariser module": [[87, "module-mvpy.preprocessing.labelbinariser"]], "mvpy.preprocessing.robustscaler module": [[87, "module-mvpy.preprocessing.robustscaler"]], "mvpy.preprocessing.scaler module": [[87, "module-mvpy.preprocessing.scaler"]], "mvpy.signal": [[9, null]], "mvpy.signal package": [[88, null]], "mvpy.signal.hammingwindow module": [[88, "module-mvpy.signal.hammingwindow"]], "mvpy.signal.hannwindow module": [[88, "module-mvpy.signal.hannwindow"]], "mvpy.signal.raisedcosinewindow module": [[88, "module-mvpy.signal.raisedcosinewindow"]], "mvpy.utilities": [[10, null]], "mvpy.utilities package": [[89, null]], "mvpy.utilities.compile module": [[89, "module-mvpy.utilities.compile"]], "mvpy.utilities.env module": [[89, "module-mvpy.utilities.env"]], "mvpy.utilities.progressbar module": [[89, "module-mvpy.utilities.progressbar"]], "mvpy.utilities.version module": [[89, "module-mvpy.utilities.version"]], "numpy": [[73, null]], "pearsonr": [[49, null]], "pearsonr_d": [[50, null]], "r2": [[51, null]], "raised_cosine_window": [[71, null]], "rank": [[52, null]], "roc_auc": [[53, null]], "score": [[60, null]], "shapley_score": [[64, null]], "spearmanr": [[54, null]], "spearmanr_d": [[55, null]], "torch": [[74, null]]}, "docnames": ["api/index", "api/mvpy", "api/mvpy.crossvalidation", "api/mvpy.dataset", "api/mvpy.estimators", "api/mvpy.math", "api/mvpy.metrics", "api/mvpy.model_selection", "api/mvpy.preprocessing", "api/mvpy.signal", "api/mvpy.utilities", "auto_examples/index", "auto_examples/sg_execution_times", "index", "modules/generated/mvpy.crossvalidation.KFold", "modules/generated/mvpy.crossvalidation.RepeatedKFold", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold", "modules/generated/mvpy.crossvalidation.StratifiedKFold", "modules/generated/mvpy.crossvalidation.Validator", "modules/generated/mvpy.crossvalidation.cross_val_score", "modules/generated/mvpy.dataset.make_meeg_categorical", "modules/generated/mvpy.dataset.make_meeg_colours", "modules/generated/mvpy.dataset.make_meeg_continuous", "modules/generated/mvpy.dataset.make_meeg_discrete", "modules/generated/mvpy.dataset.make_meeg_layout", "modules/generated/mvpy.estimators.B2B", "modules/generated/mvpy.estimators.Classifier", "modules/generated/mvpy.estimators.Covariance", "modules/generated/mvpy.estimators.KernelRidgeCV", "modules/generated/mvpy.estimators.RSA", "modules/generated/mvpy.estimators.ReceptiveField", "modules/generated/mvpy.estimators.RidgeCV", "modules/generated/mvpy.estimators.RidgeClassifier", "modules/generated/mvpy.estimators.RidgeDecoder", "modules/generated/mvpy.estimators.RidgeEncoder", "modules/generated/mvpy.estimators.SVC", "modules/generated/mvpy.estimators.Sliding", "modules/generated/mvpy.estimators.TimeDelayed", "modules/generated/mvpy.math.accuracy", "modules/generated/mvpy.math.cosine", "modules/generated/mvpy.math.cosine_d", "modules/generated/mvpy.math.cv_euclidean", "modules/generated/mvpy.math.cv_mahalanobis", "modules/generated/mvpy.math.euclidean", "modules/generated/mvpy.math.kernel_linear", "modules/generated/mvpy.math.kernel_poly", "modules/generated/mvpy.math.kernel_rbf", "modules/generated/mvpy.math.kernel_sigmoid", "modules/generated/mvpy.math.mahalanobis", "modules/generated/mvpy.math.pearsonr", "modules/generated/mvpy.math.pearsonr_d", "modules/generated/mvpy.math.r2", "modules/generated/mvpy.math.rank", "modules/generated/mvpy.math.roc_auc", "modules/generated/mvpy.math.spearmanr", "modules/generated/mvpy.math.spearmanr_d", "modules/generated/mvpy.metrics.Accuracy", "modules/generated/mvpy.metrics.Metric", "modules/generated/mvpy.metrics.R2", "modules/generated/mvpy.metrics.Roc_auc", "modules/generated/mvpy.metrics.score", "modules/generated/mvpy.model_selection.Hierarchical", "modules/generated/mvpy.model_selection.Shapley", "modules/generated/mvpy.model_selection.hierarchical_score", "modules/generated/mvpy.model_selection.shapley_score", "modules/generated/mvpy.preprocessing.Clamp", "modules/generated/mvpy.preprocessing.LabelBinariser", "modules/generated/mvpy.preprocessing.RobustScaler", "modules/generated/mvpy.preprocessing.Scaler", "modules/generated/mvpy.signal.hamming_window", "modules/generated/mvpy.signal.hann_window", "modules/generated/mvpy.signal.raised_cosine_window", "modules/generated/mvpy.utilities.Progressbar", "modules/generated/mvpy.utilities.compile.numpy", "modules/generated/mvpy.utilities.compile.torch", "modules/generated/mvpy.utilities.env.get_var", "modules/generated/mvpy.utilities.env.is_enabled", "modules/generated/mvpy.utilities.version.compare", "sg_execution_times", "source/modules", "source/mvpy", "source/mvpy.crossvalidation", "source/mvpy.dataset", "source/mvpy.estimators", "source/mvpy.math", "source/mvpy.metrics", "source/mvpy.model_selection", "source/mvpy.preprocessing", "source/mvpy.signal", "source/mvpy.utilities"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["api/index.rst", "api/mvpy.rst", "api/mvpy.crossvalidation.rst", "api/mvpy.dataset.rst", "api/mvpy.estimators.rst", "api/mvpy.math.rst", "api/mvpy.metrics.rst", "api/mvpy.model_selection.rst", "api/mvpy.preprocessing.rst", "api/mvpy.signal.rst", "api/mvpy.utilities.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "index.rst", "modules/generated/mvpy.crossvalidation.KFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedKFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold.rst", "modules/generated/mvpy.crossvalidation.StratifiedKFold.rst", "modules/generated/mvpy.crossvalidation.Validator.rst", "modules/generated/mvpy.crossvalidation.cross_val_score.rst", "modules/generated/mvpy.dataset.make_meeg_categorical.rst", "modules/generated/mvpy.dataset.make_meeg_colours.rst", "modules/generated/mvpy.dataset.make_meeg_continuous.rst", "modules/generated/mvpy.dataset.make_meeg_discrete.rst", "modules/generated/mvpy.dataset.make_meeg_layout.rst", "modules/generated/mvpy.estimators.B2B.rst", "modules/generated/mvpy.estimators.Classifier.rst", "modules/generated/mvpy.estimators.Covariance.rst", "modules/generated/mvpy.estimators.KernelRidgeCV.rst", "modules/generated/mvpy.estimators.RSA.rst", "modules/generated/mvpy.estimators.ReceptiveField.rst", "modules/generated/mvpy.estimators.RidgeCV.rst", "modules/generated/mvpy.estimators.RidgeClassifier.rst", "modules/generated/mvpy.estimators.RidgeDecoder.rst", "modules/generated/mvpy.estimators.RidgeEncoder.rst", "modules/generated/mvpy.estimators.SVC.rst", "modules/generated/mvpy.estimators.Sliding.rst", "modules/generated/mvpy.estimators.TimeDelayed.rst", "modules/generated/mvpy.math.accuracy.rst", "modules/generated/mvpy.math.cosine.rst", "modules/generated/mvpy.math.cosine_d.rst", "modules/generated/mvpy.math.cv_euclidean.rst", "modules/generated/mvpy.math.cv_mahalanobis.rst", "modules/generated/mvpy.math.euclidean.rst", "modules/generated/mvpy.math.kernel_linear.rst", "modules/generated/mvpy.math.kernel_poly.rst", "modules/generated/mvpy.math.kernel_rbf.rst", "modules/generated/mvpy.math.kernel_sigmoid.rst", "modules/generated/mvpy.math.mahalanobis.rst", "modules/generated/mvpy.math.pearsonr.rst", "modules/generated/mvpy.math.pearsonr_d.rst", "modules/generated/mvpy.math.r2.rst", "modules/generated/mvpy.math.rank.rst", "modules/generated/mvpy.math.roc_auc.rst", "modules/generated/mvpy.math.spearmanr.rst", "modules/generated/mvpy.math.spearmanr_d.rst", "modules/generated/mvpy.metrics.Accuracy.rst", "modules/generated/mvpy.metrics.Metric.rst", "modules/generated/mvpy.metrics.R2.rst", "modules/generated/mvpy.metrics.Roc_auc.rst", "modules/generated/mvpy.metrics.score.rst", "modules/generated/mvpy.model_selection.Hierarchical.rst", "modules/generated/mvpy.model_selection.Shapley.rst", "modules/generated/mvpy.model_selection.hierarchical_score.rst", "modules/generated/mvpy.model_selection.shapley_score.rst", "modules/generated/mvpy.preprocessing.Clamp.rst", "modules/generated/mvpy.preprocessing.LabelBinariser.rst", "modules/generated/mvpy.preprocessing.RobustScaler.rst", "modules/generated/mvpy.preprocessing.Scaler.rst", "modules/generated/mvpy.signal.hamming_window.rst", "modules/generated/mvpy.signal.hann_window.rst", "modules/generated/mvpy.signal.raised_cosine_window.rst", "modules/generated/mvpy.utilities.Progressbar.rst", "modules/generated/mvpy.utilities.compile.numpy.rst", "modules/generated/mvpy.utilities.compile.torch.rst", "modules/generated/mvpy.utilities.env.get_var.rst", "modules/generated/mvpy.utilities.env.is_enabled.rst", "modules/generated/mvpy.utilities.version.compare.rst", "sg_execution_times.rst", "source/modules.rst", "source/mvpy.rst", "source/mvpy.crossvalidation.rst", "source/mvpy.dataset.rst", "source/mvpy.estimators.rst", "source/mvpy.math.rst", "source/mvpy.metrics.rst", "source/mvpy.model_selection.rst", "source/mvpy.preprocessing.rst", "source/mvpy.signal.rst", "source/mvpy.utilities.rst"], "indexentries": {"__call__() (mvpy.metrics.metric method)": [[57, "mvpy.metrics.Metric.__call__", false]], "__call__() (mvpy.metrics.roc_auc method)": [[59, "mvpy.metrics.Roc_auc.__call__", false]], "accuracy (class in mvpy.metrics)": [[56, "mvpy.metrics.Accuracy", false]], "accuracy (class in mvpy.metrics.accuracy)": [[85, "mvpy.metrics.accuracy.Accuracy", false]], "accuracy() (in module mvpy.math)": [[38, "mvpy.math.accuracy", false]], "accuracy() (in module mvpy.math.accuracy)": [[84, "mvpy.math.accuracy.accuracy", false]], "b2b (class in mvpy.estimators)": [[25, "mvpy.estimators.B2B", false]], "b2b (class in mvpy.estimators.b2b)": [[83, "mvpy.estimators.b2b.B2B", false]], "call() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.call", false]], "call() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.call", false]], "check_dims_and_groups_() (in module mvpy.model_selection.hierarchical)": [[86, "mvpy.model_selection.hierarchical.check_dims_and_groups_", false]], "clamp (class in mvpy.preprocessing)": [[65, "mvpy.preprocessing.Clamp", false]], "clamp (class in mvpy.preprocessing.clamp)": [[87, "mvpy.preprocessing.clamp.Clamp", false]], "classifier (class in mvpy.estimators)": [[26, "mvpy.estimators.Classifier", false]], "classifier (class in mvpy.estimators.classifier)": [[83, "mvpy.estimators.classifier.Classifier", false]], "clone() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.clone", false]], "clone() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.clone", false]], "clone() (mvpy.estimators.b2b method)": [[25, "mvpy.estimators.B2B.clone", false]], "clone() (mvpy.estimators.b2b.b2b method)": [[83, "mvpy.estimators.b2b.B2B.clone", false]], "clone() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.clone", false]], "clone() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.clone", false]], "clone() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.clone", false]], "clone() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.clone", false]], "clone() (mvpy.estimators.csp.csp method)": [[83, "mvpy.estimators.csp.CSP.clone", false]], "clone() (mvpy.estimators.kernelridgecv method)": [[28, "mvpy.estimators.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[83, "mvpy.estimators.kernelridgecv.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.receptivefield method)": [[30, "mvpy.estimators.ReceptiveField.clone", false]], "clone() (mvpy.estimators.receptivefield.receptivefield method)": [[83, "mvpy.estimators.receptivefield.ReceptiveField.clone", false]], "clone() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgecv method)": [[31, "mvpy.estimators.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgecv.ridgecv method)": [[83, "mvpy.estimators.ridgecv.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgedecoder method)": [[33, "mvpy.estimators.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[83, "mvpy.estimators.ridgedecoder.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder method)": [[34, "mvpy.estimators.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[83, "mvpy.estimators.ridgeencoder.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.clone", false]], "clone() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.clone", false]], "clone() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.clone", false]], "clone() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.clone", false]], "clone() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.clone", false]], "clone() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.clone", false]], "clone() (mvpy.estimators.timedelayed method)": [[37, "mvpy.estimators.TimeDelayed.clone", false]], "clone() (mvpy.estimators.timedelayed.timedelayed method)": [[83, "mvpy.estimators.timedelayed.TimeDelayed.clone", false]], "clone() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.clone", false]], "clone() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.clone", false]], "clone() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.clone", false]], "clone() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.clone", false]], "collect() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.collect", false]], "collect() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.collect", false]], "collect() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.collect", false]], "collect() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.collect", false]], "compare() (in module mvpy.utilities.version)": [[77, "mvpy.utilities.version.compare", false], [89, "mvpy.utilities.version.compare", false]], "copy() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.copy", false]], "copy() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.copy", false]], "copy() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.copy", false]], "copy() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.copy", false]], "copy() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.copy", false]], "copy() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.copy", false]], "copy() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.copy", false]], "cosine() (in module mvpy.math)": [[39, "mvpy.math.cosine", false]], "cosine() (in module mvpy.math.cosine)": [[84, "mvpy.math.cosine.cosine", false]], "cosine_d() (in module mvpy.math)": [[40, "mvpy.math.cosine_d", false]], "cosine_d() (in module mvpy.math.cosine)": [[84, "mvpy.math.cosine.cosine_d", false]], "covariance (class in mvpy.estimators)": [[27, "mvpy.estimators.Covariance", false]], "covariance (class in mvpy.estimators.covariance)": [[83, "mvpy.estimators.covariance.Covariance", false]], "cross_val_score() (in module mvpy.crossvalidation)": [[19, "mvpy.crossvalidation.cross_val_score", false]], "cross_val_score() (in module mvpy.crossvalidation.cross_val_score)": [[81, "mvpy.crossvalidation.cross_val_score.cross_val_score", false]], "csp (class in mvpy.estimators.csp)": [[83, "mvpy.estimators.csp.CSP", false]], "cv_euclidean() (in module mvpy.math)": [[41, "mvpy.math.cv_euclidean", false]], "cv_euclidean() (in module mvpy.math.crossvalidated)": [[84, "mvpy.math.crossvalidated.cv_euclidean", false]], "cv_mahalanobis() (in module mvpy.math)": [[42, "mvpy.math.cv_mahalanobis", false]], "cv_mahalanobis() (in module mvpy.math.crossvalidated)": [[84, "mvpy.math.crossvalidated.cv_mahalanobis", false]], "decision_function() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.decision_function", false]], "decision_function() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.decision_function", false]], "decision_function() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.decision_function", false]], "decision_function() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.decision_function", false]], "euclidean() (in module mvpy.math)": [[43, "mvpy.math.euclidean", false]], "euclidean() (in module mvpy.math.euclidean)": [[84, "mvpy.math.euclidean.euclidean", false]], "f() (mvpy.metrics.accuracy.accuracy method)": [[85, "mvpy.metrics.accuracy.Accuracy.f", false]], "f() (mvpy.metrics.metric.metric method)": [[85, "mvpy.metrics.metric.Metric.f", false]], "f() (mvpy.metrics.pearsonr.pearsonr method)": [[85, "mvpy.metrics.pearsonr.Pearsonr.f", false]], "f() (mvpy.metrics.r2.r2 method)": [[85, "mvpy.metrics.r2.R2.f", false]], "f() (mvpy.metrics.roc_auc.roc_auc method)": [[85, "mvpy.metrics.roc_auc.Roc_auc.f", false]], "f() (mvpy.metrics.spearmanr.spearmanr method)": [[85, "mvpy.metrics.spearmanr.Spearmanr.f", false]], "fit() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.fit", false]], "fit() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.fit", false]], "fit() (mvpy.estimators.b2b method)": [[25, "mvpy.estimators.B2B.fit", false]], "fit() (mvpy.estimators.b2b.b2b method)": [[83, "mvpy.estimators.b2b.B2B.fit", false]], "fit() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.fit", false]], "fit() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.fit", false]], "fit() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.fit", false]], "fit() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.fit", false]], "fit() (mvpy.estimators.csp.csp method)": [[83, "mvpy.estimators.csp.CSP.fit", false]], "fit() (mvpy.estimators.kernelridgecv method)": [[28, "mvpy.estimators.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[83, "mvpy.estimators.kernelridgecv.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.receptivefield method)": [[30, "mvpy.estimators.ReceptiveField.fit", false]], "fit() (mvpy.estimators.receptivefield.receptivefield method)": [[83, "mvpy.estimators.receptivefield.ReceptiveField.fit", false]], "fit() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgecv method)": [[31, "mvpy.estimators.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgecv.ridgecv method)": [[83, "mvpy.estimators.ridgecv.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgedecoder method)": [[33, "mvpy.estimators.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[83, "mvpy.estimators.ridgedecoder.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder method)": [[34, "mvpy.estimators.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[83, "mvpy.estimators.ridgeencoder.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.fit", false]], "fit() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.fit", false]], "fit() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.fit", false]], "fit() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.fit", false]], "fit() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.fit", false]], "fit() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.fit", false]], "fit() (mvpy.estimators.timedelayed method)": [[37, "mvpy.estimators.TimeDelayed.fit", false]], "fit() (mvpy.estimators.timedelayed.timedelayed method)": [[83, "mvpy.estimators.timedelayed.TimeDelayed.fit", false]], "fit() (mvpy.model_selection.hierarchical method)": [[61, "mvpy.model_selection.Hierarchical.fit", false]], "fit() (mvpy.model_selection.hierarchical.hierarchical method)": [[86, "mvpy.model_selection.hierarchical.Hierarchical.fit", false]], "fit() (mvpy.model_selection.shapley method)": [[62, "mvpy.model_selection.Shapley.fit", false]], "fit() (mvpy.model_selection.shapley.shapley method)": [[86, "mvpy.model_selection.shapley.Shapley.fit", false]], "fit() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.fit", false]], "fit() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.fit", false]], "fit() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.fit", false]], "fit() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.fit", false]], "fit_model_() (in module mvpy.crossvalidation.validator)": [[81, "mvpy.crossvalidation.validator.fit_model_", false]], "fit_permutation_() (in module mvpy.model_selection.shapley)": [[86, "mvpy.model_selection.shapley.fit_permutation_", false]], "fit_transform() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.fit_transform", false]], "fit_validator_() (in module mvpy.model_selection.hierarchical)": [[86, "mvpy.model_selection.hierarchical.fit_validator_", false]], "fit_validator_() (in module mvpy.model_selection.shapley)": [[86, "mvpy.model_selection.shapley.fit_validator_", false]], "full_rdm() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.full_rdm", false]], "full_rdm() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.full_rdm", false]], "get_var() (in module mvpy.utilities.env)": [[75, "mvpy.utilities.env.get_var", false], [89, "mvpy.utilities.env.get_var", false]], "hamming_window() (in module mvpy.signal)": [[69, "mvpy.signal.hamming_window", false]], "hamming_window() (in module mvpy.signal.hammingwindow)": [[88, "mvpy.signal.hammingwindow.hamming_window", false]], "hann_window() (in module mvpy.signal)": [[70, "mvpy.signal.hann_window", false]], "hann_window() (in module mvpy.signal.hannwindow)": [[88, "mvpy.signal.hannwindow.hann_window", false]], "hierarchical (class in mvpy.model_selection)": [[61, "mvpy.model_selection.Hierarchical", false]], "hierarchical (class in mvpy.model_selection.hierarchical)": [[86, "mvpy.model_selection.hierarchical.Hierarchical", false]], "hierarchical_score() (in module mvpy.model_selection)": [[63, "mvpy.model_selection.hierarchical_score", false]], "hierarchical_score() (in module mvpy.model_selection.hierarchical_score)": [[86, "mvpy.model_selection.hierarchical_score.hierarchical_score", false]], "inverse_transform() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.inverse_transform", false]], "is_enabled() (in module mvpy.utilities.env)": [[76, "mvpy.utilities.env.is_enabled", false], [89, "mvpy.utilities.env.is_enabled", false]], "kernel_linear() (in module mvpy.math)": [[44, "mvpy.math.kernel_linear", false]], "kernel_linear() (in module mvpy.math.kernel_linear)": [[84, "mvpy.math.kernel_linear.kernel_linear", false]], "kernel_poly() (in module mvpy.math)": [[45, "mvpy.math.kernel_poly", false]], "kernel_poly() (in module mvpy.math.kernel_poly)": [[84, "mvpy.math.kernel_poly.kernel_poly", false]], "kernel_rbf() (in module mvpy.math)": [[46, "mvpy.math.kernel_rbf", false]], "kernel_rbf() (in module mvpy.math.kernel_rbf)": [[84, "mvpy.math.kernel_rbf.kernel_rbf", false]], "kernel_sigmoid() (in module mvpy.math)": [[47, "mvpy.math.kernel_sigmoid", false]], "kernel_sigmoid() (in module mvpy.math.kernel_sigmoid)": [[84, "mvpy.math.kernel_sigmoid.kernel_sigmoid", false]], "kernelridgecv (class in mvpy.estimators)": [[28, "mvpy.estimators.KernelRidgeCV", false]], "kernelridgecv (class in mvpy.estimators.kernelridgecv)": [[83, "mvpy.estimators.kernelridgecv.KernelRidgeCV", false]], "kfold (class in mvpy.crossvalidation)": [[14, "mvpy.crossvalidation.KFold", false]], "kfold (class in mvpy.crossvalidation.kfold)": [[81, "mvpy.crossvalidation.kfold.KFold", false]], "labelbinariser (class in mvpy.preprocessing)": [[66, "mvpy.preprocessing.LabelBinariser", false]], "labelbinariser (class in mvpy.preprocessing.labelbinariser)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser", false]], "loss() (in module mvpy.estimators.csp)": [[83, "mvpy.estimators.csp.loss", false]], "mahalanobis() (in module mvpy.math)": [[48, "mvpy.math.mahalanobis", false]], "mahalanobis() (in module mvpy.math.mahalanobis)": [[84, "mvpy.math.mahalanobis.mahalanobis", false]], "make_meeg_categorical() (in module mvpy.dataset)": [[20, "mvpy.dataset.make_meeg_categorical", false]], "make_meeg_categorical() (in module mvpy.dataset.make_meeg_categorical)": [[82, "mvpy.dataset.make_meeg_categorical.make_meeg_categorical", false]], "make_meeg_colours() (in module mvpy.dataset)": [[21, "mvpy.dataset.make_meeg_colours", false]], "make_meeg_colours() (in module mvpy.dataset.make_meeg_colours)": [[82, "mvpy.dataset.make_meeg_colours.make_meeg_colours", false]], "make_meeg_continuous() (in module mvpy.dataset)": [[22, "mvpy.dataset.make_meeg_continuous", false]], "make_meeg_continuous() (in module mvpy.dataset.make_meeg_continuous)": [[82, "mvpy.dataset.make_meeg_continuous.make_meeg_continuous", false]], "make_meeg_discrete() (in module mvpy.dataset)": [[23, "mvpy.dataset.make_meeg_discrete", false]], "make_meeg_discrete() (in module mvpy.dataset.make_meeg_discrete)": [[82, "mvpy.dataset.make_meeg_discrete.make_meeg_discrete", false]], "make_meeg_layout() (in module mvpy.dataset)": [[24, "mvpy.dataset.make_meeg_layout", false]], "make_meeg_layout() (in module mvpy.dataset.make_meeg_layout)": [[82, "mvpy.dataset.make_meeg_layout.make_meeg_layout", false]], "mean_rotation() (in module mvpy.estimators.csp)": [[83, "mvpy.estimators.csp.mean_rotation", false]], "metric (class in mvpy.metrics)": [[57, "mvpy.metrics.Metric", false]], "metric (class in mvpy.metrics.metric)": [[85, "mvpy.metrics.metric.Metric", false]], "module": [[1, "module-mvpy", false], [2, "module-mvpy.crossvalidation", false], [3, "module-mvpy.dataset", false], [4, "module-mvpy.estimators", false], [5, "module-mvpy.math", false], [6, "module-mvpy.metrics", false], [7, "module-mvpy.model_selection", false], [8, "module-mvpy.preprocessing", false], [9, "module-mvpy.signal", false], [10, "module-mvpy.utilities", false], [80, "module-mvpy", false], [81, "module-mvpy.crossvalidation", false], [81, "module-mvpy.crossvalidation.cross_val_score", false], [81, "module-mvpy.crossvalidation.kfold", false], [81, "module-mvpy.crossvalidation.repeatedkfold", false], [81, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false], [81, "module-mvpy.crossvalidation.stratifiedkfold", false], [81, "module-mvpy.crossvalidation.validator", false], [82, "module-mvpy.dataset", false], [82, "module-mvpy.dataset.make_meeg_categorical", false], [82, "module-mvpy.dataset.make_meeg_colours", false], [82, "module-mvpy.dataset.make_meeg_continuous", false], [82, "module-mvpy.dataset.make_meeg_discrete", false], [82, "module-mvpy.dataset.make_meeg_layout", false], [83, "module-mvpy.estimators", false], [83, "module-mvpy.estimators.b2b", false], [83, "module-mvpy.estimators.classifier", false], [83, "module-mvpy.estimators.covariance", false], [83, "module-mvpy.estimators.csp", false], [83, "module-mvpy.estimators.kernelridgecv", false], [83, "module-mvpy.estimators.receptivefield", false], [83, "module-mvpy.estimators.ridgeclassifier", false], [83, "module-mvpy.estimators.ridgecv", false], [83, "module-mvpy.estimators.ridgedecoder", false], [83, "module-mvpy.estimators.ridgeencoder", false], [83, "module-mvpy.estimators.rsa", false], [83, "module-mvpy.estimators.sliding", false], [83, "module-mvpy.estimators.svc", false], [83, "module-mvpy.estimators.timedelayed", false], [84, "module-mvpy.math", false], [84, "module-mvpy.math.accuracy", false], [84, "module-mvpy.math.cosine", false], [84, "module-mvpy.math.crossvalidated", false], [84, "module-mvpy.math.euclidean", false], [84, "module-mvpy.math.kernel_linear", false], [84, "module-mvpy.math.kernel_poly", false], [84, "module-mvpy.math.kernel_rbf", false], [84, "module-mvpy.math.kernel_sigmoid", false], [84, "module-mvpy.math.mahalanobis", false], [84, "module-mvpy.math.pearsonr", false], [84, "module-mvpy.math.r2", false], [84, "module-mvpy.math.rank", false], [84, "module-mvpy.math.roc_auc", false], [84, "module-mvpy.math.spearmanr", false], [85, "module-mvpy.metrics", false], [85, "module-mvpy.metrics.accuracy", false], [85, "module-mvpy.metrics.metric", false], [85, "module-mvpy.metrics.pearsonr", false], [85, "module-mvpy.metrics.r2", false], [85, "module-mvpy.metrics.roc_auc", false], [85, "module-mvpy.metrics.score", false], [85, "module-mvpy.metrics.spearmanr", false], [86, "module-mvpy.model_selection", false], [86, "module-mvpy.model_selection.hierarchical", false], [86, "module-mvpy.model_selection.hierarchical_score", false], [86, "module-mvpy.model_selection.shapley", false], [86, "module-mvpy.model_selection.shapley_score", false], [87, "module-mvpy.preprocessing", false], [87, "module-mvpy.preprocessing.clamp", false], [87, "module-mvpy.preprocessing.labelbinariser", false], [87, "module-mvpy.preprocessing.robustscaler", false], [87, "module-mvpy.preprocessing.scaler", false], [88, "module-mvpy.signal", false], [88, "module-mvpy.signal.hammingwindow", false], [88, "module-mvpy.signal.hannwindow", false], [88, "module-mvpy.signal.raisedcosinewindow", false], [89, "module-mvpy.utilities", false], [89, "module-mvpy.utilities.compile", false], [89, "module-mvpy.utilities.env", false], [89, "module-mvpy.utilities.progressbar", false], [89, "module-mvpy.utilities.version", false]], "mutate() (mvpy.metrics.metric method)": [[57, "mvpy.metrics.Metric.mutate", false]], "mutate() (mvpy.metrics.metric.metric method)": [[85, "mvpy.metrics.metric.Metric.mutate", false]], "mvpy": [[1, "module-mvpy", false], [80, "module-mvpy", false]], "mvpy.crossvalidation": [[2, "module-mvpy.crossvalidation", false], [81, "module-mvpy.crossvalidation", false]], "mvpy.crossvalidation.cross_val_score": [[81, "module-mvpy.crossvalidation.cross_val_score", false]], "mvpy.crossvalidation.kfold": [[81, "module-mvpy.crossvalidation.kfold", false]], "mvpy.crossvalidation.repeatedkfold": [[81, "module-mvpy.crossvalidation.repeatedkfold", false]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[81, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false]], "mvpy.crossvalidation.stratifiedkfold": [[81, "module-mvpy.crossvalidation.stratifiedkfold", false]], "mvpy.crossvalidation.validator": [[81, "module-mvpy.crossvalidation.validator", false]], "mvpy.dataset": [[3, "module-mvpy.dataset", false], [82, "module-mvpy.dataset", false]], "mvpy.dataset.make_meeg_categorical": [[82, "module-mvpy.dataset.make_meeg_categorical", false]], "mvpy.dataset.make_meeg_colours": [[82, "module-mvpy.dataset.make_meeg_colours", false]], "mvpy.dataset.make_meeg_continuous": [[82, "module-mvpy.dataset.make_meeg_continuous", false]], "mvpy.dataset.make_meeg_discrete": [[82, "module-mvpy.dataset.make_meeg_discrete", false]], "mvpy.dataset.make_meeg_layout": [[82, "module-mvpy.dataset.make_meeg_layout", false]], "mvpy.estimators": [[4, "module-mvpy.estimators", false], [83, "module-mvpy.estimators", false]], "mvpy.estimators.b2b": [[83, "module-mvpy.estimators.b2b", false]], "mvpy.estimators.classifier": [[83, "module-mvpy.estimators.classifier", false]], "mvpy.estimators.covariance": [[83, "module-mvpy.estimators.covariance", false]], "mvpy.estimators.csp": [[83, "module-mvpy.estimators.csp", false]], "mvpy.estimators.kernelridgecv": [[83, "module-mvpy.estimators.kernelridgecv", false]], "mvpy.estimators.receptivefield": [[83, "module-mvpy.estimators.receptivefield", false]], "mvpy.estimators.ridgeclassifier": [[83, "module-mvpy.estimators.ridgeclassifier", false]], "mvpy.estimators.ridgecv": [[83, "module-mvpy.estimators.ridgecv", false]], "mvpy.estimators.ridgedecoder": [[83, "module-mvpy.estimators.ridgedecoder", false]], "mvpy.estimators.ridgeencoder": [[83, "module-mvpy.estimators.ridgeencoder", false]], "mvpy.estimators.rsa": [[83, "module-mvpy.estimators.rsa", false]], "mvpy.estimators.sliding": [[83, "module-mvpy.estimators.sliding", false]], "mvpy.estimators.svc": [[83, "module-mvpy.estimators.svc", false]], "mvpy.estimators.timedelayed": [[83, "module-mvpy.estimators.timedelayed", false]], "mvpy.math": [[5, "module-mvpy.math", false], [84, "module-mvpy.math", false]], "mvpy.math.accuracy": [[84, "module-mvpy.math.accuracy", false]], "mvpy.math.cosine": [[84, "module-mvpy.math.cosine", false]], "mvpy.math.crossvalidated": [[84, "module-mvpy.math.crossvalidated", false]], "mvpy.math.euclidean": [[84, "module-mvpy.math.euclidean", false]], "mvpy.math.kernel_linear": [[84, "module-mvpy.math.kernel_linear", false]], "mvpy.math.kernel_poly": [[84, "module-mvpy.math.kernel_poly", false]], "mvpy.math.kernel_rbf": [[84, "module-mvpy.math.kernel_rbf", false]], "mvpy.math.kernel_sigmoid": [[84, "module-mvpy.math.kernel_sigmoid", false]], "mvpy.math.mahalanobis": [[84, "module-mvpy.math.mahalanobis", false]], "mvpy.math.pearsonr": [[84, "module-mvpy.math.pearsonr", false]], "mvpy.math.r2": [[84, "module-mvpy.math.r2", false]], "mvpy.math.rank": [[84, "module-mvpy.math.rank", false]], "mvpy.math.roc_auc": [[84, "module-mvpy.math.roc_auc", false]], "mvpy.math.spearmanr": [[84, "module-mvpy.math.spearmanr", false]], "mvpy.metrics": [[6, "module-mvpy.metrics", false], [85, "module-mvpy.metrics", false]], "mvpy.metrics.accuracy": [[85, "module-mvpy.metrics.accuracy", false]], "mvpy.metrics.metric": [[85, "module-mvpy.metrics.metric", false]], "mvpy.metrics.pearsonr": [[85, "module-mvpy.metrics.pearsonr", false]], "mvpy.metrics.r2": [[85, "module-mvpy.metrics.r2", false]], "mvpy.metrics.roc_auc": [[85, "module-mvpy.metrics.roc_auc", false]], "mvpy.metrics.score": [[85, "module-mvpy.metrics.score", false]], "mvpy.metrics.spearmanr": [[85, "module-mvpy.metrics.spearmanr", false]], "mvpy.model_selection": [[7, "module-mvpy.model_selection", false], [86, "module-mvpy.model_selection", false]], "mvpy.model_selection.hierarchical": [[86, "module-mvpy.model_selection.hierarchical", false]], "mvpy.model_selection.hierarchical_score": [[86, "module-mvpy.model_selection.hierarchical_score", false]], "mvpy.model_selection.shapley": [[86, "module-mvpy.model_selection.shapley", false]], "mvpy.model_selection.shapley_score": [[86, "module-mvpy.model_selection.shapley_score", false]], "mvpy.preprocessing": [[8, "module-mvpy.preprocessing", false], [87, "module-mvpy.preprocessing", false]], "mvpy.preprocessing.clamp": [[87, "module-mvpy.preprocessing.clamp", false]], "mvpy.preprocessing.labelbinariser": [[87, "module-mvpy.preprocessing.labelbinariser", false]], "mvpy.preprocessing.robustscaler": [[87, "module-mvpy.preprocessing.robustscaler", false]], "mvpy.preprocessing.scaler": [[87, "module-mvpy.preprocessing.scaler", false]], "mvpy.signal": [[9, "module-mvpy.signal", false], [88, "module-mvpy.signal", false]], "mvpy.signal.hammingwindow": [[88, "module-mvpy.signal.hammingwindow", false]], "mvpy.signal.hannwindow": [[88, "module-mvpy.signal.hannwindow", false]], "mvpy.signal.raisedcosinewindow": [[88, "module-mvpy.signal.raisedcosinewindow", false]], "mvpy.utilities": [[10, "module-mvpy.utilities", false], [89, "module-mvpy.utilities", false]], "mvpy.utilities.compile": [[89, "module-mvpy.utilities.compile", false]], "mvpy.utilities.env": [[89, "module-mvpy.utilities.env", false]], "mvpy.utilities.progressbar": [[89, "module-mvpy.utilities.progressbar", false]], "mvpy.utilities.version": [[89, "module-mvpy.utilities.version", false]], "name (mvpy.metrics.accuracy.accuracy attribute)": [[85, "mvpy.metrics.accuracy.Accuracy.name", false]], "name (mvpy.metrics.metric.metric attribute)": [[85, "mvpy.metrics.metric.Metric.name", false]], "name (mvpy.metrics.pearsonr.pearsonr attribute)": [[85, "mvpy.metrics.pearsonr.Pearsonr.name", false]], "name (mvpy.metrics.r2.r2 attribute)": [[85, "mvpy.metrics.r2.R2.name", false]], "name (mvpy.metrics.roc_auc.roc_auc attribute)": [[85, "mvpy.metrics.roc_auc.Roc_auc.name", false]], "name (mvpy.metrics.spearmanr.spearmanr attribute)": [[85, "mvpy.metrics.spearmanr.Spearmanr.name", false]], "numpy() (in module mvpy.utilities.compile)": [[73, "mvpy.utilities.compile.numpy", false], [89, "mvpy.utilities.compile.numpy", false]], "pearsonr (class in mvpy.metrics.pearsonr)": [[85, "mvpy.metrics.pearsonr.Pearsonr", false]], "pearsonr() (in module mvpy.math)": [[49, "mvpy.math.pearsonr", false]], "pearsonr() (in module mvpy.math.pearsonr)": [[84, "mvpy.math.pearsonr.pearsonr", false]], "pearsonr_d() (in module mvpy.math)": [[50, "mvpy.math.pearsonr_d", false]], "pearsonr_d() (in module mvpy.math.pearsonr)": [[84, "mvpy.math.pearsonr.pearsonr_d", false]], "predict() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.predict", false]], "predict() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.predict", false]], "predict() (mvpy.estimators.b2b method)": [[25, "mvpy.estimators.B2B.predict", false]], "predict() (mvpy.estimators.b2b.b2b method)": [[83, "mvpy.estimators.b2b.B2B.predict", false]], "predict() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.predict", false]], "predict() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.predict", false]], "predict() (mvpy.estimators.csp.csp method)": [[83, "mvpy.estimators.csp.CSP.predict", false]], "predict() (mvpy.estimators.kernelridgecv method)": [[28, "mvpy.estimators.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[83, "mvpy.estimators.kernelridgecv.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.receptivefield method)": [[30, "mvpy.estimators.ReceptiveField.predict", false]], "predict() (mvpy.estimators.receptivefield.receptivefield method)": [[83, "mvpy.estimators.receptivefield.ReceptiveField.predict", false]], "predict() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgecv method)": [[31, "mvpy.estimators.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgecv.ridgecv method)": [[83, "mvpy.estimators.ridgecv.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgedecoder method)": [[33, "mvpy.estimators.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[83, "mvpy.estimators.ridgedecoder.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder method)": [[34, "mvpy.estimators.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[83, "mvpy.estimators.ridgeencoder.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.predict", false]], "predict() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.predict", false]], "predict() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.predict", false]], "predict() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.predict", false]], "predict() (mvpy.estimators.timedelayed method)": [[37, "mvpy.estimators.TimeDelayed.predict", false]], "predict() (mvpy.estimators.timedelayed.timedelayed method)": [[83, "mvpy.estimators.timedelayed.TimeDelayed.predict", false]], "predict_proba() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.predict_proba", false]], "predict_proba() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.predict_proba", false]], "predict_proba() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.predict_proba", false]], "predict_proba() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.predict_proba", false]], "progressbar (class in mvpy.utilities)": [[72, "mvpy.utilities.Progressbar", false]], "progressbar (class in mvpy.utilities.progressbar)": [[89, "mvpy.utilities.progressbar.Progressbar", false]], "r2 (class in mvpy.metrics)": [[58, "mvpy.metrics.R2", false]], "r2 (class in mvpy.metrics.r2)": [[85, "mvpy.metrics.r2.R2", false]], "r2() (in module mvpy.math)": [[51, "mvpy.math.r2", false]], "r2() (in module mvpy.math.r2)": [[84, "mvpy.math.r2.r2", false]], "raised_cosine_window() (in module mvpy.signal)": [[71, "mvpy.signal.raised_cosine_window", false]], "raised_cosine_window() (in module mvpy.signal.raisedcosinewindow)": [[88, "mvpy.signal.raisedcosinewindow.raised_cosine_window", false]], "rank() (in module mvpy.math)": [[52, "mvpy.math.rank", false]], "rank() (in module mvpy.math.rank)": [[84, "mvpy.math.rank.rank", false]], "receptivefield (class in mvpy.estimators)": [[30, "mvpy.estimators.ReceptiveField", false]], "receptivefield (class in mvpy.estimators.receptivefield)": [[83, "mvpy.estimators.receptivefield.ReceptiveField", false]], "reduce (mvpy.metrics.accuracy.accuracy attribute)": [[85, "mvpy.metrics.accuracy.Accuracy.reduce", false]], "reduce (mvpy.metrics.metric.metric attribute)": [[85, "mvpy.metrics.metric.Metric.reduce", false]], "reduce (mvpy.metrics.pearsonr.pearsonr attribute)": [[85, "mvpy.metrics.pearsonr.Pearsonr.reduce", false]], "reduce (mvpy.metrics.r2.r2 attribute)": [[85, "mvpy.metrics.r2.R2.reduce", false]], "reduce (mvpy.metrics.roc_auc.roc_auc attribute)": [[85, "mvpy.metrics.roc_auc.Roc_auc.reduce", false]], "reduce (mvpy.metrics.spearmanr.spearmanr attribute)": [[85, "mvpy.metrics.spearmanr.Spearmanr.reduce", false]], "reduce_() (in module mvpy.metrics.score)": [[85, "mvpy.metrics.score.reduce_", false]], "repeatedkfold (class in mvpy.crossvalidation)": [[15, "mvpy.crossvalidation.RepeatedKFold", false]], "repeatedkfold (class in mvpy.crossvalidation.repeatedkfold)": [[81, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation)": [[16, "mvpy.crossvalidation.RepeatedStratifiedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation.repeatedstratifiedkfold)": [[81, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold", false]], "request (mvpy.metrics.accuracy.accuracy attribute)": [[85, "mvpy.metrics.accuracy.Accuracy.request", false]], "request (mvpy.metrics.metric.metric attribute)": [[85, "mvpy.metrics.metric.Metric.request", false]], "request (mvpy.metrics.pearsonr.pearsonr attribute)": [[85, "mvpy.metrics.pearsonr.Pearsonr.request", false]], "request (mvpy.metrics.r2.r2 attribute)": [[85, "mvpy.metrics.r2.R2.request", false]], "request (mvpy.metrics.roc_auc.roc_auc attribute)": [[85, "mvpy.metrics.roc_auc.Roc_auc.request", false]], "request (mvpy.metrics.spearmanr.spearmanr attribute)": [[85, "mvpy.metrics.spearmanr.Spearmanr.request", false]], "ridgeclassifier (class in mvpy.estimators)": [[32, "mvpy.estimators.RidgeClassifier", false]], "ridgeclassifier (class in mvpy.estimators.ridgeclassifier)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier", false]], "ridgecv (class in mvpy.estimators)": [[31, "mvpy.estimators.RidgeCV", false]], "ridgecv (class in mvpy.estimators.ridgecv)": [[83, "mvpy.estimators.ridgecv.RidgeCV", false]], "ridgedecoder (class in mvpy.estimators)": [[33, "mvpy.estimators.RidgeDecoder", false]], "ridgedecoder (class in mvpy.estimators.ridgedecoder)": [[83, "mvpy.estimators.ridgedecoder.RidgeDecoder", false]], "ridgeencoder (class in mvpy.estimators)": [[34, "mvpy.estimators.RidgeEncoder", false]], "ridgeencoder (class in mvpy.estimators.ridgeencoder)": [[83, "mvpy.estimators.ridgeencoder.RidgeEncoder", false]], "robustscaler (class in mvpy.preprocessing)": [[67, "mvpy.preprocessing.RobustScaler", false]], "robustscaler (class in mvpy.preprocessing.robustscaler)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler", false]], "roc_auc (class in mvpy.metrics)": [[59, "mvpy.metrics.Roc_auc", false]], "roc_auc (class in mvpy.metrics.roc_auc)": [[85, "mvpy.metrics.roc_auc.Roc_auc", false]], "roc_auc() (in module mvpy.math)": [[53, "mvpy.math.roc_auc", false]], "roc_auc() (in module mvpy.math.roc_auc)": [[84, "mvpy.math.roc_auc.roc_auc", false]], "rotmat() (in module mvpy.estimators.csp)": [[83, "mvpy.estimators.csp.rotmat", false]], "rsa (class in mvpy.estimators)": [[29, "mvpy.estimators.RSA", false]], "rsa (class in mvpy.estimators.rsa)": [[83, "mvpy.estimators.rsa.RSA", false]], "scaler (class in mvpy.preprocessing)": [[68, "mvpy.preprocessing.Scaler", false]], "scaler (class in mvpy.preprocessing.scaler)": [[87, "mvpy.preprocessing.scaler.Scaler", false]], "score() (in module mvpy.metrics)": [[60, "mvpy.metrics.score", false]], "score() (in module mvpy.metrics.score)": [[85, "mvpy.metrics.score.score", false]], "score() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.score", false]], "score() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.score", false]], "score() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.score", false]], "score() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.score", false]], "score() (mvpy.estimators.kernelridgecv method)": [[28, "mvpy.estimators.KernelRidgeCV.score", false]], "score() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[83, "mvpy.estimators.kernelridgecv.KernelRidgeCV.score", false]], "score() (mvpy.estimators.receptivefield method)": [[30, "mvpy.estimators.ReceptiveField.score", false]], "score() (mvpy.estimators.receptivefield.receptivefield method)": [[83, "mvpy.estimators.receptivefield.ReceptiveField.score", false]], "score() (mvpy.estimators.ridgeclassifier method)": [[32, "mvpy.estimators.RidgeClassifier.score", false]], "score() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[83, "mvpy.estimators.ridgeclassifier.RidgeClassifier.score", false]], "score() (mvpy.estimators.ridgecv method)": [[31, "mvpy.estimators.RidgeCV.score", false]], "score() (mvpy.estimators.ridgecv.ridgecv method)": [[83, "mvpy.estimators.ridgecv.RidgeCV.score", false]], "score() (mvpy.estimators.ridgedecoder method)": [[33, "mvpy.estimators.RidgeDecoder.score", false]], "score() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[83, "mvpy.estimators.ridgedecoder.RidgeDecoder.score", false]], "score() (mvpy.estimators.ridgeencoder method)": [[34, "mvpy.estimators.RidgeEncoder.score", false]], "score() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[83, "mvpy.estimators.ridgeencoder.RidgeEncoder.score", false]], "score() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.score", false]], "score() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.score", false]], "score() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.score", false]], "score() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.score", false]], "score() (mvpy.estimators.timedelayed method)": [[37, "mvpy.estimators.TimeDelayed.score", false]], "score() (mvpy.estimators.timedelayed.timedelayed method)": [[83, "mvpy.estimators.timedelayed.TimeDelayed.score", false]], "shapley (class in mvpy.model_selection)": [[62, "mvpy.model_selection.Shapley", false]], "shapley (class in mvpy.model_selection.shapley)": [[86, "mvpy.model_selection.shapley.Shapley", false]], "shapley_score() (in module mvpy.model_selection)": [[64, "mvpy.model_selection.shapley_score", false]], "shapley_score() (in module mvpy.model_selection.shapley_score)": [[86, "mvpy.model_selection.shapley_score.shapley_score", false]], "sliding (class in mvpy.estimators)": [[36, "mvpy.estimators.Sliding", false]], "sliding (class in mvpy.estimators.sliding)": [[83, "mvpy.estimators.sliding.Sliding", false]], "spearmanr (class in mvpy.metrics.spearmanr)": [[85, "mvpy.metrics.spearmanr.Spearmanr", false]], "spearmanr() (in module mvpy.math)": [[54, "mvpy.math.spearmanr", false]], "spearmanr() (in module mvpy.math.spearmanr)": [[84, "mvpy.math.spearmanr.spearmanr", false]], "spearmanr_d() (in module mvpy.math)": [[55, "mvpy.math.spearmanr_d", false]], "spearmanr_d() (in module mvpy.math.spearmanr)": [[84, "mvpy.math.spearmanr.spearmanr_d", false]], "split() (mvpy.crossvalidation.kfold method)": [[14, "mvpy.crossvalidation.KFold.split", false]], "split() (mvpy.crossvalidation.kfold.kfold method)": [[81, "mvpy.crossvalidation.kfold.KFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold method)": [[15, "mvpy.crossvalidation.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[81, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[16, "mvpy.crossvalidation.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[81, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold method)": [[17, "mvpy.crossvalidation.StratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[81, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.split", false]], "stratifiedkfold (class in mvpy.crossvalidation)": [[17, "mvpy.crossvalidation.StratifiedKFold", false]], "stratifiedkfold (class in mvpy.crossvalidation.stratifiedkfold)": [[81, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold", false]], "svc (class in mvpy.estimators)": [[35, "mvpy.estimators.SVC", false]], "svc (class in mvpy.estimators.svc)": [[83, "mvpy.estimators.svc.SVC", false]], "timedelayed (class in mvpy.estimators)": [[37, "mvpy.estimators.TimeDelayed", false]], "timedelayed (class in mvpy.estimators.timedelayed)": [[83, "mvpy.estimators.timedelayed.TimeDelayed", false]], "to_numpy() (mvpy.crossvalidation.kfold method)": [[14, "mvpy.crossvalidation.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.kfold.kfold method)": [[81, "mvpy.crossvalidation.kfold.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold method)": [[15, "mvpy.crossvalidation.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[81, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[16, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[81, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold method)": [[17, "mvpy.crossvalidation.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[81, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.to_numpy", false]], "to_numpy() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.to_numpy", false]], "to_torch() (mvpy.crossvalidation.kfold method)": [[14, "mvpy.crossvalidation.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.kfold.kfold method)": [[81, "mvpy.crossvalidation.kfold.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold method)": [[15, "mvpy.crossvalidation.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[81, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[16, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[81, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold method)": [[17, "mvpy.crossvalidation.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[81, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.estimators.classifier method)": [[26, "mvpy.estimators.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.classifier.classifier method)": [[83, "mvpy.estimators.classifier.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.to_torch", false]], "to_torch() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.to_torch", false]], "to_torch() (mvpy.estimators.svc method)": [[35, "mvpy.estimators.SVC.to_torch", false]], "to_torch() (mvpy.estimators.svc.svc method)": [[83, "mvpy.estimators.svc.SVC.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.to_torch", false]], "torch() (in module mvpy.utilities.compile)": [[74, "mvpy.utilities.compile.torch", false], [89, "mvpy.utilities.compile.torch", false]], "tqdm_joblib() (in module mvpy.utilities.progressbar)": [[89, "mvpy.utilities.progressbar.tqdm_joblib", false]], "transform() (mvpy.crossvalidation.validator method)": [[18, "mvpy.crossvalidation.Validator.transform", false]], "transform() (mvpy.crossvalidation.validator.validator method)": [[81, "mvpy.crossvalidation.validator.Validator.transform", false]], "transform() (mvpy.estimators.covariance method)": [[27, "mvpy.estimators.Covariance.transform", false]], "transform() (mvpy.estimators.covariance.covariance method)": [[83, "mvpy.estimators.covariance.Covariance.transform", false]], "transform() (mvpy.estimators.rsa method)": [[29, "mvpy.estimators.RSA.transform", false]], "transform() (mvpy.estimators.rsa.rsa method)": [[83, "mvpy.estimators.rsa.RSA.transform", false]], "transform() (mvpy.estimators.sliding method)": [[36, "mvpy.estimators.Sliding.transform", false]], "transform() (mvpy.estimators.sliding.sliding method)": [[83, "mvpy.estimators.sliding.Sliding.transform", false]], "transform() (mvpy.preprocessing.clamp method)": [[65, "mvpy.preprocessing.Clamp.transform", false]], "transform() (mvpy.preprocessing.clamp.clamp method)": [[87, "mvpy.preprocessing.clamp.Clamp.transform", false]], "transform() (mvpy.preprocessing.labelbinariser method)": [[66, "mvpy.preprocessing.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[87, "mvpy.preprocessing.labelbinariser.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.robustscaler method)": [[67, "mvpy.preprocessing.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[87, "mvpy.preprocessing.robustscaler.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.scaler method)": [[68, "mvpy.preprocessing.Scaler.transform", false]], "transform() (mvpy.preprocessing.scaler.scaler method)": [[87, "mvpy.preprocessing.scaler.Scaler.transform", false]], "validator (class in mvpy.crossvalidation)": [[18, "mvpy.crossvalidation.Validator", false]], "validator (class in mvpy.crossvalidation.validator)": [[81, "mvpy.crossvalidation.validator.Validator", false]]}, "objects": {"": [[80, 0, 0, "-", "mvpy"]], "mvpy": [[81, 0, 0, "-", "crossvalidation"], [82, 0, 0, "-", "dataset"], [83, 0, 0, "-", "estimators"], [84, 0, 0, "-", "math"], [85, 0, 0, "-", "metrics"], [86, 0, 0, "-", "model_selection"], [87, 0, 0, "-", "preprocessing"], [88, 0, 0, "-", "signal"], [89, 0, 0, "-", "utilities"]], "mvpy.crossvalidation": [[14, 1, 1, "", "KFold"], [15, 1, 1, "", "RepeatedKFold"], [16, 1, 1, "", "RepeatedStratifiedKFold"], [17, 1, 1, "", "StratifiedKFold"], [18, 1, 1, "", "Validator"], [81, 0, 0, "-", "cross_val_score"], [81, 0, 0, "-", "kfold"], [81, 0, 0, "-", "repeatedkfold"], [81, 0, 0, "-", "repeatedstratifiedkfold"], [81, 0, 0, "-", "stratifiedkfold"], [81, 0, 0, "-", "validator"]], "mvpy.crossvalidation.KFold": [[14, 2, 1, "", "split"], [14, 2, 1, "", "to_numpy"], [14, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedKFold": [[15, 2, 1, "", "split"], [15, 2, 1, "", "to_numpy"], [15, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedStratifiedKFold": [[16, 2, 1, "", "split"], [16, 2, 1, "", "to_numpy"], [16, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.StratifiedKFold": [[17, 2, 1, "", "split"], [17, 2, 1, "", "to_numpy"], [17, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.Validator": [[18, 2, 1, "", "call"], [18, 2, 1, "", "clone"], [18, 2, 1, "", "collect"], [18, 2, 1, "", "decision_function"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "transform"]], "mvpy.crossvalidation.cross_val_score": [[81, 3, 1, "", "cross_val_score"]], "mvpy.crossvalidation.kfold": [[81, 1, 1, "", "KFold"]], "mvpy.crossvalidation.kfold.KFold": [[81, 2, 1, "", "split"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedkfold": [[81, 1, 1, "", "RepeatedKFold"]], "mvpy.crossvalidation.repeatedkfold.RepeatedKFold": [[81, 2, 1, "", "split"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[81, 1, 1, "", "RepeatedStratifiedKFold"]], "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold": [[81, 2, 1, "", "split"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.stratifiedkfold": [[81, 1, 1, "", "StratifiedKFold"]], "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold": [[81, 2, 1, "", "split"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.validator": [[81, 1, 1, "", "Validator"], [81, 3, 1, "", "fit_model_"]], "mvpy.crossvalidation.validator.Validator": [[81, 2, 1, "", "call"], [81, 2, 1, "", "clone"], [81, 2, 1, "", "collect"], [81, 2, 1, "", "decision_function"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "predict"], [81, 2, 1, "", "predict_proba"], [81, 2, 1, "", "score"], [81, 2, 1, "", "transform"]], "mvpy.dataset": [[82, 0, 0, "-", "make_meeg_categorical"], [82, 0, 0, "-", "make_meeg_colours"], [82, 0, 0, "-", "make_meeg_continuous"], [82, 0, 0, "-", "make_meeg_discrete"], [82, 0, 0, "-", "make_meeg_layout"]], "mvpy.dataset.make_meeg_categorical": [[82, 3, 1, "", "make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours": [[82, 3, 1, "", "make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous": [[82, 3, 1, "", "make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete": [[82, 3, 1, "", "make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout": [[82, 3, 1, "", "make_meeg_layout"]], "mvpy.estimators": [[25, 1, 1, "", "B2B"], [26, 1, 1, "", "Classifier"], [27, 1, 1, "", "Covariance"], [28, 1, 1, "", "KernelRidgeCV"], [29, 1, 1, "", "RSA"], [30, 1, 1, "", "ReceptiveField"], [31, 1, 1, "", "RidgeCV"], [32, 1, 1, "", "RidgeClassifier"], [33, 1, 1, "", "RidgeDecoder"], [34, 1, 1, "", "RidgeEncoder"], [35, 1, 1, "", "SVC"], [36, 1, 1, "", "Sliding"], [37, 1, 1, "", "TimeDelayed"], [83, 0, 0, "-", "b2b"], [83, 0, 0, "-", "classifier"], [83, 0, 0, "-", "covariance"], [83, 0, 0, "-", "csp"], [83, 0, 0, "-", "kernelridgecv"], [83, 0, 0, "-", "receptivefield"], [83, 0, 0, "-", "ridgeclassifier"], [83, 0, 0, "-", "ridgecv"], [83, 0, 0, "-", "ridgedecoder"], [83, 0, 0, "-", "ridgeencoder"], [83, 0, 0, "-", "rsa"], [83, 0, 0, "-", "sliding"], [83, 0, 0, "-", "svc"], [83, 0, 0, "-", "timedelayed"]], "mvpy.estimators.B2B": [[25, 2, 1, "", "clone"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "predict"]], "mvpy.estimators.Classifier": [[26, 2, 1, "", "clone"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "decision_function"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "predict"], [26, 2, 1, "", "predict_proba"], [26, 2, 1, "", "score"], [26, 2, 1, "", "to_numpy"], [26, 2, 1, "", "to_torch"]], "mvpy.estimators.Covariance": [[27, 2, 1, "", "clone"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "fit_transform"], [27, 2, 1, "", "to_numpy"], [27, 2, 1, "", "to_torch"], [27, 2, 1, "", "transform"]], "mvpy.estimators.KernelRidgeCV": [[28, 2, 1, "", "clone"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "score"]], "mvpy.estimators.RSA": [[29, 2, 1, "", "clone"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "fit_transform"], [29, 2, 1, "", "full_rdm"], [29, 2, 1, "", "to_numpy"], [29, 2, 1, "", "to_torch"], [29, 2, 1, "", "transform"]], "mvpy.estimators.ReceptiveField": [[30, 2, 1, "", "clone"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "score"]], "mvpy.estimators.RidgeCV": [[31, 2, 1, "", "clone"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "score"]], "mvpy.estimators.RidgeClassifier": [[32, 2, 1, "", "clone"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "decision_function"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_proba"], [32, 2, 1, "", "score"]], "mvpy.estimators.RidgeDecoder": [[33, 2, 1, "", "clone"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "score"]], "mvpy.estimators.RidgeEncoder": [[34, 2, 1, "", "clone"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "score"]], "mvpy.estimators.SVC": [[35, 2, 1, "", "clone"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "decision_function"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_proba"], [35, 2, 1, "", "score"], [35, 2, 1, "", "to_numpy"], [35, 2, 1, "", "to_torch"]], "mvpy.estimators.Sliding": [[36, 2, 1, "", "clone"], [36, 2, 1, "", "collect"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "fit_transform"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "predict_proba"], [36, 2, 1, "", "score"], [36, 2, 1, "", "transform"]], "mvpy.estimators.TimeDelayed": [[37, 2, 1, "", "clone"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "score"]], "mvpy.estimators.b2b": [[83, 1, 1, "", "B2B"]], "mvpy.estimators.b2b.B2B": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"]], "mvpy.estimators.classifier": [[83, 1, 1, "", "Classifier"]], "mvpy.estimators.classifier.Classifier": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "copy"], [83, 2, 1, "", "decision_function"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_proba"], [83, 2, 1, "", "score"], [83, 2, 1, "", "to_numpy"], [83, 2, 1, "", "to_torch"]], "mvpy.estimators.covariance": [[83, 1, 1, "", "Covariance"]], "mvpy.estimators.covariance.Covariance": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "fit_transform"], [83, 2, 1, "", "to_numpy"], [83, 2, 1, "", "to_torch"], [83, 2, 1, "", "transform"]], "mvpy.estimators.csp": [[83, 1, 1, "", "CSP"], [83, 3, 1, "", "loss"], [83, 3, 1, "", "mean_rotation"], [83, 3, 1, "", "rotmat"]], "mvpy.estimators.csp.CSP": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"]], "mvpy.estimators.kernelridgecv": [[83, 1, 1, "", "KernelRidgeCV"]], "mvpy.estimators.kernelridgecv.KernelRidgeCV": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.estimators.receptivefield": [[83, 1, 1, "", "ReceptiveField"]], "mvpy.estimators.receptivefield.ReceptiveField": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.estimators.ridgeclassifier": [[83, 1, 1, "", "RidgeClassifier"]], "mvpy.estimators.ridgeclassifier.RidgeClassifier": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "copy"], [83, 2, 1, "", "decision_function"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_proba"], [83, 2, 1, "", "score"]], "mvpy.estimators.ridgecv": [[83, 1, 1, "", "RidgeCV"]], "mvpy.estimators.ridgecv.RidgeCV": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.estimators.ridgedecoder": [[83, 1, 1, "", "RidgeDecoder"]], "mvpy.estimators.ridgedecoder.RidgeDecoder": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.estimators.ridgeencoder": [[83, 1, 1, "", "RidgeEncoder"]], "mvpy.estimators.ridgeencoder.RidgeEncoder": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.estimators.rsa": [[83, 1, 1, "", "RSA"]], "mvpy.estimators.rsa.RSA": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "fit_transform"], [83, 2, 1, "", "full_rdm"], [83, 2, 1, "", "to_numpy"], [83, 2, 1, "", "to_torch"], [83, 2, 1, "", "transform"]], "mvpy.estimators.sliding": [[83, 1, 1, "", "Sliding"]], "mvpy.estimators.sliding.Sliding": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "collect"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "fit_transform"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_proba"], [83, 2, 1, "", "score"], [83, 2, 1, "", "transform"]], "mvpy.estimators.svc": [[83, 1, 1, "", "SVC"]], "mvpy.estimators.svc.SVC": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "copy"], [83, 2, 1, "", "decision_function"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_proba"], [83, 2, 1, "", "score"], [83, 2, 1, "", "to_numpy"], [83, 2, 1, "", "to_torch"]], "mvpy.estimators.timedelayed": [[83, 1, 1, "", "TimeDelayed"]], "mvpy.estimators.timedelayed.TimeDelayed": [[83, 2, 1, "", "clone"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "score"]], "mvpy.math": [[84, 0, 0, "-", "accuracy"], [84, 0, 0, "-", "cosine"], [40, 3, 1, "", "cosine_d"], [84, 0, 0, "-", "crossvalidated"], [41, 3, 1, "", "cv_euclidean"], [42, 3, 1, "", "cv_mahalanobis"], [84, 0, 0, "-", "euclidean"], [84, 0, 0, "-", "kernel_linear"], [84, 0, 0, "-", "kernel_poly"], [84, 0, 0, "-", "kernel_rbf"], [84, 0, 0, "-", "kernel_sigmoid"], [84, 0, 0, "-", "mahalanobis"], [84, 0, 0, "-", "pearsonr"], [50, 3, 1, "", "pearsonr_d"], [84, 0, 0, "-", "r2"], [84, 0, 0, "-", "rank"], [84, 0, 0, "-", "roc_auc"], [84, 0, 0, "-", "spearmanr"], [55, 3, 1, "", "spearmanr_d"]], "mvpy.math.accuracy": [[84, 3, 1, "", "accuracy"]], "mvpy.math.cosine": [[84, 3, 1, "", "cosine"], [84, 3, 1, "", "cosine_d"]], "mvpy.math.crossvalidated": [[84, 3, 1, "", "cv_euclidean"], [84, 3, 1, "", "cv_mahalanobis"]], "mvpy.math.euclidean": [[84, 3, 1, "", "euclidean"]], "mvpy.math.kernel_linear": [[84, 3, 1, "", "kernel_linear"]], "mvpy.math.kernel_poly": [[84, 3, 1, "", "kernel_poly"]], "mvpy.math.kernel_rbf": [[84, 3, 1, "", "kernel_rbf"]], "mvpy.math.kernel_sigmoid": [[84, 3, 1, "", "kernel_sigmoid"]], "mvpy.math.mahalanobis": [[84, 3, 1, "", "mahalanobis"]], "mvpy.math.pearsonr": [[84, 3, 1, "", "pearsonr"], [84, 3, 1, "", "pearsonr_d"]], "mvpy.math.r2": [[84, 3, 1, "", "r2"]], "mvpy.math.rank": [[84, 3, 1, "", "rank"]], "mvpy.math.roc_auc": [[84, 3, 1, "", "roc_auc"]], "mvpy.math.spearmanr": [[84, 3, 1, "", "spearmanr"], [84, 3, 1, "", "spearmanr_d"]], "mvpy.metrics": [[56, 1, 1, "", "Accuracy"], [57, 1, 1, "", "Metric"], [58, 1, 1, "", "R2"], [59, 1, 1, "", "Roc_auc"], [85, 0, 0, "-", "accuracy"], [85, 0, 0, "-", "metric"], [85, 0, 0, "-", "pearsonr"], [85, 0, 0, "-", "r2"], [85, 0, 0, "-", "roc_auc"], [85, 0, 0, "-", "score"], [85, 0, 0, "-", "spearmanr"]], "mvpy.metrics.Metric": [[57, 2, 1, "", "__call__"], [57, 2, 1, "", "mutate"]], "mvpy.metrics.Roc_auc": [[59, 2, 1, "", "__call__"]], "mvpy.metrics.accuracy": [[85, 1, 1, "", "Accuracy"]], "mvpy.metrics.accuracy.Accuracy": [[85, 2, 1, "", "f"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.metrics.metric": [[85, 1, 1, "", "Metric"]], "mvpy.metrics.metric.Metric": [[85, 2, 1, "", "f"], [85, 2, 1, "", "mutate"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.metrics.pearsonr": [[85, 1, 1, "", "Pearsonr"]], "mvpy.metrics.pearsonr.Pearsonr": [[85, 2, 1, "", "f"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.metrics.r2": [[85, 1, 1, "", "R2"]], "mvpy.metrics.r2.R2": [[85, 2, 1, "", "f"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.metrics.roc_auc": [[85, 1, 1, "", "Roc_auc"]], "mvpy.metrics.roc_auc.Roc_auc": [[85, 2, 1, "", "f"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.metrics.score": [[85, 3, 1, "", "reduce_"], [85, 3, 1, "", "score"]], "mvpy.metrics.spearmanr": [[85, 1, 1, "", "Spearmanr"]], "mvpy.metrics.spearmanr.Spearmanr": [[85, 2, 1, "", "f"], [85, 4, 1, "", "name"], [85, 4, 1, "", "reduce"], [85, 4, 1, "", "request"]], "mvpy.model_selection": [[61, 1, 1, "", "Hierarchical"], [62, 1, 1, "", "Shapley"], [86, 0, 0, "-", "hierarchical"], [86, 0, 0, "-", "hierarchical_score"], [86, 0, 0, "-", "shapley"], [86, 0, 0, "-", "shapley_score"]], "mvpy.model_selection.Hierarchical": [[61, 2, 1, "", "fit"]], "mvpy.model_selection.Shapley": [[62, 2, 1, "", "fit"]], "mvpy.model_selection.hierarchical": [[86, 1, 1, "", "Hierarchical"], [86, 3, 1, "", "check_dims_and_groups_"], [86, 3, 1, "", "fit_validator_"]], "mvpy.model_selection.hierarchical.Hierarchical": [[86, 2, 1, "", "fit"]], "mvpy.model_selection.hierarchical_score": [[86, 3, 1, "", "hierarchical_score"]], "mvpy.model_selection.shapley": [[86, 1, 1, "", "Shapley"], [86, 3, 1, "", "fit_permutation_"], [86, 3, 1, "", "fit_validator_"]], "mvpy.model_selection.shapley.Shapley": [[86, 2, 1, "", "fit"]], "mvpy.model_selection.shapley_score": [[86, 3, 1, "", "shapley_score"]], "mvpy.preprocessing": [[65, 1, 1, "", "Clamp"], [66, 1, 1, "", "LabelBinariser"], [67, 1, 1, "", "RobustScaler"], [68, 1, 1, "", "Scaler"], [87, 0, 0, "-", "clamp"], [87, 0, 0, "-", "labelbinariser"], [87, 0, 0, "-", "robustscaler"], [87, 0, 0, "-", "scaler"]], "mvpy.preprocessing.Clamp": [[65, 2, 1, "", "clone"], [65, 2, 1, "", "copy"], [65, 2, 1, "", "fit"], [65, 2, 1, "", "fit_transform"], [65, 2, 1, "", "inverse_transform"], [65, 2, 1, "", "to_numpy"], [65, 2, 1, "", "to_torch"], [65, 2, 1, "", "transform"]], "mvpy.preprocessing.LabelBinariser": [[66, 2, 1, "", "clone"], [66, 2, 1, "", "copy"], [66, 2, 1, "", "fit"], [66, 2, 1, "", "fit_transform"], [66, 2, 1, "", "inverse_transform"], [66, 2, 1, "", "to_numpy"], [66, 2, 1, "", "to_torch"], [66, 2, 1, "", "transform"]], "mvpy.preprocessing.RobustScaler": [[67, 2, 1, "", "clone"], [67, 2, 1, "", "copy"], [67, 2, 1, "", "fit"], [67, 2, 1, "", "fit_transform"], [67, 2, 1, "", "inverse_transform"], [67, 2, 1, "", "to_numpy"], [67, 2, 1, "", "to_torch"], [67, 2, 1, "", "transform"]], "mvpy.preprocessing.Scaler": [[68, 2, 1, "", "clone"], [68, 2, 1, "", "copy"], [68, 2, 1, "", "fit"], [68, 2, 1, "", "fit_transform"], [68, 2, 1, "", "inverse_transform"], [68, 2, 1, "", "to_numpy"], [68, 2, 1, "", "to_torch"], [68, 2, 1, "", "transform"]], "mvpy.preprocessing.clamp": [[87, 1, 1, "", "Clamp"]], "mvpy.preprocessing.clamp.Clamp": [[87, 2, 1, "", "clone"], [87, 2, 1, "", "copy"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "fit_transform"], [87, 2, 1, "", "inverse_transform"], [87, 2, 1, "", "to_numpy"], [87, 2, 1, "", "to_torch"], [87, 2, 1, "", "transform"]], "mvpy.preprocessing.labelbinariser": [[87, 1, 1, "", "LabelBinariser"]], "mvpy.preprocessing.labelbinariser.LabelBinariser": [[87, 2, 1, "", "clone"], [87, 2, 1, "", "copy"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "fit_transform"], [87, 2, 1, "", "inverse_transform"], [87, 2, 1, "", "to_numpy"], [87, 2, 1, "", "to_torch"], [87, 2, 1, "", "transform"]], "mvpy.preprocessing.robustscaler": [[87, 1, 1, "", "RobustScaler"]], "mvpy.preprocessing.robustscaler.RobustScaler": [[87, 2, 1, "", "clone"], [87, 2, 1, "", "copy"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "fit_transform"], [87, 2, 1, "", "inverse_transform"], [87, 2, 1, "", "to_numpy"], [87, 2, 1, "", "to_torch"], [87, 2, 1, "", "transform"]], "mvpy.preprocessing.scaler": [[87, 1, 1, "", "Scaler"]], "mvpy.preprocessing.scaler.Scaler": [[87, 2, 1, "", "clone"], [87, 2, 1, "", "copy"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "fit_transform"], [87, 2, 1, "", "inverse_transform"], [87, 2, 1, "", "to_numpy"], [87, 2, 1, "", "to_torch"], [87, 2, 1, "", "transform"]], "mvpy.signal": [[69, 3, 1, "", "hamming_window"], [88, 0, 0, "-", "hammingwindow"], [70, 3, 1, "", "hann_window"], [88, 0, 0, "-", "hannwindow"], [71, 3, 1, "", "raised_cosine_window"], [88, 0, 0, "-", "raisedcosinewindow"]], "mvpy.signal.hammingwindow": [[88, 3, 1, "", "hamming_window"]], "mvpy.signal.hannwindow": [[88, 3, 1, "", "hann_window"]], "mvpy.signal.raisedcosinewindow": [[88, 3, 1, "", "raised_cosine_window"]], "mvpy.utilities": [[72, 1, 1, "", "Progressbar"], [89, 0, 0, "-", "compile"], [89, 0, 0, "-", "env"], [89, 0, 0, "-", "progressbar"], [89, 0, 0, "-", "version"]], "mvpy.utilities.compile": [[89, 3, 1, "", "numpy"], [89, 3, 1, "", "torch"]], "mvpy.utilities.env": [[89, 3, 1, "", "get_var"], [89, 3, 1, "", "is_enabled"]], "mvpy.utilities.progressbar": [[89, 1, 1, "", "Progressbar"], [89, 3, 1, "", "tqdm_joblib"]], "mvpy.utilities.version": [[89, 3, 1, "", "compare"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "terms": {"": [14, 17, 20, 22, 23, 25, 27, 29, 30, 32, 33, 34, 35, 37, 42, 56, 58, 59, 66, 73, 74, 81, 82, 83, 84, 85, 87, 89], "0": [12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 78, 81, 82, 83, 84, 85, 86, 87], "00": [12, 78], "000": [12, 35, 78, 83], "0000": [52, 65, 68, 84, 87], "00096": [27, 83], "001": [23, 35, 82, 83], "004": [29, 83], "0055": [30, 83], "0060": [25, 83], "00604": [30, 37, 83], "00809": [27, 83], "0085": [37, 83], "012": [41, 84], "01371": [29, 42, 83, 84], "0165": [65, 87], "0251": [30, 83], "0297": [30, 83], "03": [27, 83], "0325": [30, 83], "0347": [37, 83], "05": [65, 87], "0591": [65, 87], "06": [29, 83], "067": [25, 30, 32, 33, 35, 37, 83], "0678": [30, 83], "0728": [37, 83], "0827": [30, 83], "0828": [37, 83], "0847": [30, 83], "09": [65, 87], "0907": [27, 83], "0924": [30, 83], "0954": [30, 83], "1": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 61, 62, 63, 64, 65, 66, 68, 81, 82, 83, 84, 85, 86, 87], "10": [14, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 48, 61, 62, 63, 64, 65, 66, 67, 68, 81, 83, 84, 86, 87], "100": [18, 19, 25, 27, 29, 30, 31, 33, 34, 36, 37, 41, 42, 66, 81, 83, 84, 87], "1000": [35, 65, 67, 68, 83, 87], "1002": [31, 83], "1005508": [29, 83], "1007": [35, 83], "1016": [25, 27, 30, 32, 33, 35, 37, 41, 83, 84], "1058": [67, 87], "1080": [30, 83], "1088": [30, 83], "11": [30, 37, 66, 83, 87], "110": [25, 30, 32, 33, 35, 37, 83], "1109020": [28, 83], "1136": 83, "1137": [28, 83], "1152": 83, "117028": [25, 83], "12": [16, 17, 20, 30, 31, 35, 37, 41, 66, 81, 82, 83, 84, 87], "120": [20, 22, 23, 82], "1274": [68, 87], "13": [16, 29, 30, 37, 66, 81, 83, 87], "137": [41, 84], "1371": [29, 83], "14": [30, 31, 37, 83], "1400": [37, 83], "141": [28, 83], "1410": [30, 83], "142": [28, 83], "1452": [37, 83], "1481": [67, 87], "15": [17, 30, 37, 81, 83], "1512": [27, 83], "1548": [30, 83], "16": [30, 37, 83], "1607": [29, 42, 83, 84], "17": [30, 37, 83], "1793": [37, 83], "18": [30, 37, 83], "188": [41, 84], "19": [30, 37, 83], "1964": [28, 83], "1e": [18, 19, 23, 30, 35, 37, 65, 81, 82, 83, 87], "1e3": [65, 67, 87], "2": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 81, 82, 83, 84, 85, 86, 87], "20": [16, 17, 27, 30, 32, 33, 36, 37, 66, 81, 83, 87], "200": [20, 22, 23, 41, 61, 62, 63, 64, 82, 84, 86], "2001": [30, 83], "2004": [27, 83], "2008": [29, 83], "2009": [27, 30, 31, 83], "2011": [31, 83], "2012": [28, 83], "2013": [25, 30, 32, 33, 35, 37, 68, 83, 87], "2014": [25, 30, 32, 33, 35, 37, 83], "2015": [35, 41, 83, 84], "2016": [27, 29, 30, 37, 41, 42, 83, 84], "2017": [29, 83], "2020": [25, 31, 83], "2047": [37, 83], "2070": [65, 87], "21": [30, 37, 66, 83, 87], "2115": [30, 83], "2148": [30, 83], "22": [30, 37, 66, 83, 87], "220": [25, 83], "2251": [37, 83], "23": [30, 37, 83], "2332": [37, 83], "24": [30, 37, 83], "240": [28, 31, 34, 36, 83], "2483": [68, 87], "25": [16, 17, 20, 22, 23, 30, 65, 67, 81, 82, 83, 87], "250": [20, 22, 23, 82], "2510": [68, 87], "2549": [37, 83], "259x": [27, 83], "26": [30, 37, 83], "27": [30, 37, 83], "2717": [37, 83], "28": [30, 37, 83], "2825": [31, 83], "2830": [31, 83], "2861": [30, 83], "289": [30, 83], "29": [30, 37, 83], "2945": [37, 83], "2d": [44, 45, 46, 47, 61, 62, 63, 64, 84, 86], "3": [14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 35, 36, 37, 49, 50, 51, 61, 62, 65, 66, 81, 82, 83, 84, 85, 86, 87], "30": [30, 37, 83], "31": [30, 37, 83], "316": [30, 83], "32": [17, 30, 37, 67, 81, 83, 87], "33": [30, 37, 83], "3389": [29, 30, 37, 83], "34": [30, 37, 83], "343": 89, "3440": [37, 83], "3491": [37, 83], "35": [37, 83], "3544": [37, 83], "3591": [37, 83], "36": [17, 30, 37, 81, 83], "365": [27, 83], "3683": [37, 83], "37": [30, 37, 83], "38": [30, 37, 83], "3800": [37, 83], "3817": [37, 83], "39": [30, 35, 37, 83], "3925": [30, 83], "3962": [37, 83], "4": [14, 15, 17, 20, 22, 23, 27, 30, 32, 35, 36, 37, 49, 52, 61, 63, 64, 81, 82, 83, 84, 85, 86], "40": [16, 17, 30, 37, 81, 83], "400": [18, 20, 22, 23, 61, 62, 63, 64, 81, 82, 86], "4021": [30, 83], "4022": [30, 83], "4097": [37, 83], "41": [30, 37, 83], "411": [27, 83], "42": [14, 30, 37, 81, 83], "43": [30, 37, 83], "4302": [35, 83], "44": [30, 37, 83], "4418": [37, 83], "4449": [37, 83], "4454": [37, 83], "4470": [25, 83], "4489": [37, 83], "45": [17, 30, 37, 81, 83], "4594": [25, 83], "46": [37, 83], "4690": [30, 83], "4698": [27, 83], "47": [37, 83], "4741": [30, 83], "4759": [30, 83], "48": [37, 83], "4854": [37, 83], "48550": [27, 29, 42, 83, 84], "4915": [30, 83], "4950": [29, 83], "4965": [37, 83], "4978": [37, 83], "5": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 49, 52, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87], "50": [18, 19, 20, 22, 23, 29, 30, 34, 37, 42, 43, 48, 54, 55, 66, 81, 82, 83, 84, 85, 87], "500": [65, 67, 87], "5000": [52, 84], "5046": [30, 83], "5186": [30, 83], "5206": [37, 83], "5346": [37, 83], "5374": [37, 83], "5378": [65, 87], "553": [30, 83], "5530": [30, 83], "5662": [37, 83], "5716": [37, 83], "577": [30, 83], "5841": [37, 83], "5862": [30, 83], "5872": [30, 83], "5990": [35, 83], "6": [14, 15, 30, 32, 35, 37, 49, 61, 81, 83, 84, 85, 86], "60": [25, 33, 34, 42, 54, 55, 83, 84, 85], "6014": [30, 83], "604": [30, 37, 83], "6102": [37, 83], "6197": [30, 83], "6254": [37, 83], "6343": [65, 87], "64": [18, 20, 22, 23, 36, 61, 62, 63, 64, 81, 82, 83, 86], "6523": [30, 83], "66": [35, 83], "6616": [65, 87], "6622": [30, 83], "6700": [35, 83], "6765": [30, 83], "6769": [30, 83], "6926": [65, 87], "6932": [37, 83], "6939": [37, 83], "7": [14, 30, 37, 81, 83], "7017": [30, 83], "7023": [30, 83], "7033": [68, 87], "7117": [30, 83], "7154": [67, 87], "7168": [37, 83], "7172": [30, 83], "7263": [65, 87], "7301": [37, 83], "7348": [67, 87], "7351": [67, 87], "7464": [67, 87], "7468": [67, 87], "75": [16, 17, 20, 22, 23, 32, 65, 67, 81, 82, 83, 87], "76": [30, 83], "7609": [67, 87], "7619": [37, 83], "7849": [30, 83], "7885": [30, 83], "7994": [30, 83], "8": [14, 17, 22, 23, 30, 32, 35, 37, 81, 82, 83], "8130": [37, 83], "8182": [37, 83], "82": [32, 83], "8434": [30, 83], "8523": [30, 83], "8533": [32, 83], "8687": [37, 83], "8697": [30, 83], "87": [25, 30, 32, 33, 35, 37, 83], "8705": [30, 83], "8793": [37, 83], "88": [27, 83], "8802": [37, 83], "8854": [37, 83], "898x_14_3_309": [30, 83], "9": [14, 17, 28, 30, 37, 54, 55, 65, 67, 68, 81, 83, 84, 85, 87], "9028": [30, 83], "9101": [37, 83], "9122": [67, 87], "9270": [37, 83], "9290": [37, 83], "93": [31, 83], "9310": [37, 83], "9342": [30, 83], "9375": [65, 87], "9401": [30, 83], "9428": [30, 83], "9432": [19, 81], "9453": [37, 83], "9482": [30, 83], "9511": [30, 83], "96": [25, 30, 32, 33, 35, 37, 83], "9615": [67, 87], "9704": [30, 83], "9729": [30, 83], "9733": [35, 83], "9790": [37, 83], "9800": [35, 83], "9808": [37, 83], "9842": [30, 83], "9847": [30, 83], "9912": [30, 83], "9930": [30, 83], "9974": [30, 83], "9_3": [35, 83], "A": [0, 12, 18, 27, 28, 29, 30, 31, 35, 37, 41, 61, 62, 64, 67, 68, 78, 81, 83, 84, 86, 87], "As": [14, 28, 31, 35, 61, 81, 83, 86], "By": [32, 62, 65, 67, 83, 86, 87], "For": [14, 15, 16, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 41, 42, 56, 58, 59, 61, 62, 63, 64, 65, 66, 81, 83, 84, 85, 86, 87], "If": [14, 18, 19, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 75, 76, 81, 82, 83, 85, 86, 87, 89], "In": [14, 15, 18, 20, 22, 23, 25, 26, 27, 28, 32, 35, 36, 37, 53, 61, 81, 82, 83, 84, 85, 86], "Its": [28, 83], "On": [25, 28, 29, 30, 32, 33, 35, 37, 42, 83, 84], "One": [26, 35, 61, 83, 86], "Or": [32, 62, 83, 86], "The": [14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 47, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89], "There": [65, 87], "To": [29, 62, 66, 83, 86, 87], "_": [16, 17, 81], "_0": [20, 82], "_1": [20, 82], "__call__": [57, 59], "__version__": 0, "_c": [14, 15, 16, 17, 81], "_channel": [28, 83], "_clamp_numpi": [65, 87], "_clamp_torch": [65, 87], "_classifier_numpi": [26, 83], "_classifier_torch": [26, 83], "_gener": [14, 15, 16, 17, 81], "_kfold_numpi": [14, 81], "_kfold_torch": [14, 81], "_labelbinariser_numpi": [66, 87], "_labelbinariser_torch": [66, 87], "_receptivefield_numpi": [30, 83], "_receptivefield_torch": [30, 83], "_repeatedkfold_numpi": [15, 16, 81], "_repeatedkfold_torch": [15, 16, 81], "_repeatedstratifiedkfold_numpi": [16, 81], "_repeatedstratifiedkfold_torch": [16, 81], "_robustscaler_numpi": [67, 87], "_robustscaler_torch": [67, 87], "_sampl": [28, 83], "_scaler_numpi": [68, 87], "_scaler_torch": [68, 87], "_stratifiedkfold_numpi": [17, 81], "_stratifiedkfold_torch": [17, 81], "_svc_numpi": [35, 83], "_svc_torch": [35, 83], "_timedelayed_numpi": [37, 83], "_timedelayed_torch": [37, 83], "a_": [35, 83], "a_dual_": [28, 83], "abc": [14, 15, 16, 17, 81], "about": [20, 29, 61, 62, 81, 82, 83, 85, 86, 87], "absolut": [65, 87], "access": [18, 81, 82, 83, 87], "accord": [18, 62, 67, 81, 83, 86, 87], "account": [28, 83], "accur": [26, 83], "accuraci": [0, 18, 26, 32, 35, 53, 79, 80, 81, 83], "achiev": [14, 33, 81, 83], "across": [14, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 66, 81, 83, 86, 87], "act": [19, 63, 64, 81, 86], "actual": [30, 37, 61, 63, 83, 86], "ad": [62, 86], "add": [62, 86], "addit": [18, 27, 29, 34, 36, 37, 59, 65, 66, 67, 68, 72, 81, 83, 87, 89], "addition": [33, 83], "affect": [62, 67, 86, 87], "after": 83, "against": [26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 83], "aggreg": [26, 83], "aggress": [27, 83], "akin": [0, 68, 87], "algorithm": [27, 83], "alink": [41, 84], "all": [0, 11, 18, 25, 26, 28, 31, 33, 34, 36, 61, 62, 63, 64, 66, 78, 81, 83, 86, 87], "allow": [0, 18, 20, 22, 23, 25, 28, 29, 32, 36, 61, 73, 81, 82, 83, 86, 89], "along": [0, 51, 52, 84, 85, 86], "alpha": [18, 19, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 71, 81, 83, 86, 88], "alpha_": [28, 31, 32, 33, 34, 37, 83], "alpha_i": [25, 35, 83], "alpha_per_target": [25, 28, 31, 32, 33, 83], "alpha_x": [25, 83], "alreadi": [28, 83, 84], "also": [0, 14, 15, 16, 17, 18, 25, 28, 30, 32, 33, 34, 37, 42, 81, 83, 84], "altern": [28, 30, 33, 34, 37, 61, 62, 63, 64, 67, 83, 86, 87], "alwai": [0, 38, 39, 40, 49, 50, 53, 54, 55, 62, 66, 84, 85, 86, 87], "among": [33, 83], "amplitud": [20, 22, 23, 82], "an": [0, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 30, 31, 32, 33, 35, 36, 37, 59, 61, 62, 63, 64, 67, 81, 82, 83, 86, 87], "analaysi": [29, 83], "analys": [66, 87], "analysi": [0, 11, 27, 29, 41, 83, 84], "anh": [47, 84], "ani": [14, 15, 16, 17, 18, 19, 20, 26, 27, 29, 30, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 57, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89], "anoth": [62, 86], "appear": [28, 61, 62, 83, 86], "appli": [20, 22, 23, 25, 27, 29, 30, 56, 58, 59, 61, 65, 82, 83, 85, 86, 87], "applic": [28, 61, 63, 83, 86], "approach": [30, 32, 83], "appropri": [36, 59, 83], "approxim": [27, 83], "ar": [0, 14, 18, 19, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 81, 82, 83, 84, 85, 86, 87], "ar1": [20, 22, 23, 82], "arang": [14, 15, 20, 22, 23, 30, 37, 81, 82, 83], "arbitrai": [61, 62, 86], "arbitrari": [18, 19, 26, 33, 36, 61, 62, 63, 64, 65, 67, 81, 83, 86, 87], "arg": [18, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 57, 65, 66, 67, 68, 73, 74, 81, 83, 84, 85, 87, 89], "argument": [18, 26, 27, 29, 34, 36, 37, 65, 66, 67, 68, 72, 73, 74, 81, 83, 87, 89], "aris": [66, 87], "around": [14, 81], "arrai": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "artifact": [65, 87], "arxiv": [27, 29, 42, 83, 84], "ascent": [28, 35, 83], "ask": [61, 62, 86], "assert": [30, 83], "assign": [26, 83], "associ": [28, 83], "assum": [14, 17, 27, 29, 34, 61, 62, 63, 64, 81, 83, 86], "attr": [18, 36, 81, 83], "attribut": [14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 65, 66, 67, 68, 81, 83, 86, 87], "auc": [0, 53, 59, 84, 85], "auditori": [30, 83], "auto": [20, 22, 23, 28, 30, 35, 37, 82, 83], "auto_exampl": 12, "auto_examples_python": 11, "autom": [0, 18, 19, 35, 81, 83], "automat": [14, 15, 19, 27, 28, 30, 31, 36, 61, 63, 64, 81, 83, 86], "avail": [0, 14, 15, 16, 17, 26, 27, 28, 29, 30, 35, 61, 62, 73, 74, 81, 83, 86, 89], "averag": [0, 51, 52, 53, 84, 85], "avoid": [30, 34, 66, 83, 87], "awad": [35, 83], "awar": 83, "ax": [20, 22, 23, 82], "axi": [20, 22, 23, 32, 35, 82, 83], "b": [20, 22, 23, 25, 30, 31, 32, 33, 35, 37, 77, 82, 83, 89], "b2b": [0, 33, 79, 80], "back": [0, 25, 31, 83], "back2back": 83, "backend": [14, 15, 16, 17, 20, 22, 23, 24, 26, 28, 29, 35, 61, 65, 66, 67, 69, 70, 71, 81, 82, 83, 86, 87, 88], "background": [20, 22, 23, 82], "bar": [0, 49, 72, 84, 85, 89], "base": [0, 18, 19, 20, 22, 23, 26, 27, 28, 29, 35, 36, 63, 64, 65, 66, 67, 81, 82, 83, 85, 86, 87, 89], "baseestim": [18, 19, 26, 27, 29, 32, 35, 36, 60, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87], "baselin": [61, 62, 64, 86], "basi": [0, 20, 22, 23, 46, 82, 84], "becaus": [14, 15, 25, 28, 31, 32, 61, 63, 66, 67, 81, 83, 86, 87], "becom": [14, 61, 62, 63, 64, 81, 86], "bednar": [30, 37, 83], "befor": [14, 17, 20, 22, 23, 29, 30, 61, 67, 68, 81, 82, 83, 86, 87], "begin": [61, 62, 86], "behaviour": [30, 35, 37, 59, 61, 62, 83, 86], "benefici": [30, 83], "benefit": [28, 83], "best": [61, 63, 86], "beta": [28, 31, 32, 33, 34, 37, 83], "beta_": [28, 31, 83], "better": [62, 64, 86], "between": [0, 29, 32, 38, 39, 40, 41, 42, 43, 48, 49, 50, 53, 54, 55, 83, 84, 85], "beyond": [33, 83], "biass": [29, 83], "bie\u00dfmann": [25, 30, 32, 33, 35, 37, 83], "binari": [26, 53, 83, 84, 85], "binaris": [26, 32, 35, 66, 83, 87], "binariser_": [26, 32, 35, 83], "biologi": [29, 83], "blankertz": [25, 30, 32, 33, 35, 37, 83], "bmatrix": [61, 62, 86], "bool": [14, 17, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 37, 61, 62, 63, 64, 67, 68, 72, 73, 76, 77, 81, 82, 83, 86, 87, 89], "boolean": [61, 86], "both": [19, 30, 37, 63, 64, 65, 67, 81, 83, 86, 87], "bound": [65, 87], "boundari": [35, 83], "brain": [20, 22, 23, 82], "branch": [29, 83], "c": [20, 22, 23, 27, 30, 31, 35, 37, 82, 83], "c_": [37, 66, 83, 87], "c_0": [26, 45, 47, 83, 84], "c_1": [26, 83], "c_2": [26, 83], "cach": [73, 89], "calibr": [26, 32, 35, 83], "calibratedclassifi": [26, 83], "call": [14, 15, 16, 17, 18, 26, 27, 56, 58, 59, 65, 66, 67, 68, 75, 76, 80, 81, 83, 85, 87, 89], "callabl": [29, 36, 56, 57, 58, 59, 73, 74, 83, 85, 89], "callibr": [26, 83], "can": [0, 14, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 32, 35, 36, 37, 61, 63, 64, 65, 66, 67, 72, 81, 83, 86, 87, 89], "cannot": [14, 27, 28, 33, 35, 65, 66, 67, 68, 81, 83, 87], "captur": [28, 83], "care": [18, 19, 61, 62, 63, 64, 81, 86], "carefulli": [32, 83], "case": [18, 19, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 53, 61, 62, 63, 64, 65, 81, 83, 84, 85, 86, 87], "cat": [25, 42, 48, 83, 84], "categor": 82, "causal": [0, 25, 30, 83], "causal_": [25, 83], "cdot": [28, 35, 39, 83, 84], "cell": [30, 83], "center": [67, 68, 87], "centr": [67, 87], "centre_": [67, 87], "certain": [32, 66, 83, 87], "ch_col": [20, 22, 23, 82], "ch_po": [20, 21, 22, 23, 82], "challeng": [27, 83], "channel": [0, 20, 21, 22, 23, 24, 29, 30, 37, 82, 83], "charton": [25, 83], "check": [0, 61, 62, 65, 76, 86, 87, 89], "check_dims_and_groups_": [80, 86], "chen": [27, 83], "choos": [28, 83], "chose": [31, 83], "chosen": [28, 83], "clamp": [0, 67, 79, 80], "clariti": [17, 81], "class": [0, 14, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 81, 82, 83, 84, 85, 86, 87, 89], "classes_": [66, 87], "classif": [0, 26, 32, 35, 83], "classifi": [0, 32, 35, 36, 79, 80], "clf": [18, 26, 32, 35, 56, 58, 59, 81, 83, 85], "clone": [18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 65, 66, 67, 68, 80, 81, 83, 86, 87], "close": [28, 31, 83], "cmap": [29, 83], "code": [11, 18, 61, 81, 86], "coef0": [28, 35, 45, 47, 83, 84], "coef_": [18, 26, 28, 30, 31, 32, 33, 34, 35, 37, 81, 83], "coefficeint": [33, 83], "coeffici": [26, 28, 30, 31, 32, 34, 35, 37, 45, 47, 83, 84], "collect": [14, 15, 16, 17, 18, 29, 36, 80, 81, 83, 87], "colour": [0, 21, 82], "combin": [61, 63, 64, 86], "common": [18, 29, 61, 62, 81, 83, 86], "compar": [0, 29, 35, 61, 80, 83, 86, 89], "comparison": [29, 77, 83, 89], "compil": [0, 73, 74, 79, 80, 83], "complementari": [65, 67, 87], "complic": [18, 81], "compon": [29, 83], "comput": [0, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87], "computation": [27, 83], "concaten": [32, 35, 83], "concentr": [0, 24, 82], "condit": [27, 29, 83], "configur": [81, 83, 85, 86, 87], "confirm": [61, 86], "connect": [29, 83], "consequ": [25, 26, 29, 30, 32, 33, 34, 35, 37, 65, 83, 87], "consid": [25, 26, 27, 28, 35, 61, 63, 66, 83, 86, 87], "consist": [14, 15, 16, 17, 18, 19, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "constitut": [65, 87], "construct": [37, 83], "consult": [56, 58, 59, 63, 64, 85, 86], "contain": [25, 61, 62, 63, 64, 66, 81, 82, 83, 84, 85, 86, 87, 88], "content": 79, "context": 89, "continu": [0, 20, 22, 30, 37, 82, 83], "contrari": [27, 35, 83], "contrast": [61, 86], "contribut": [0, 25, 61, 62, 63, 83, 86], "control": [33, 65, 83, 87], "conv1d": [18, 19, 30, 37, 81, 83], "conveni": [28, 31, 32, 35, 83], "convers": [27, 29, 65, 66, 67, 68, 83, 87], "convert": [14, 15, 16, 17, 30, 81, 83], "convolut": [30, 83], "copi": [26, 32, 35, 65, 66, 67, 68, 79, 80, 87], "correct": [30, 65, 83, 87], "correl": [0, 20, 22, 23, 25, 30, 33, 37, 49, 54, 82, 83, 84, 85], "correspond": [24, 34, 61, 62, 82, 83, 86], "cosin": [0, 29, 40, 79, 80, 83], "cosine_d": [0, 29, 80, 83, 84], "cost": [35, 83], "could": [14, 81], "coupl": [26, 83], "cours": [34, 62, 64, 83, 86], "cov": [27, 83], "cov_": [30, 83], "covari": [0, 20, 22, 23, 30, 42, 48, 79, 80, 82, 84], "covariance_": [27, 42, 48, 83, 84], "cpu": [20, 22, 23, 24, 69, 70, 71, 82, 88], "creat": [0, 14, 15, 19, 20, 21, 22, 23, 24, 26, 27, 30, 53, 61, 62, 63, 64, 66, 81, 82, 83, 84, 85, 86, 87], "creation": [61, 86], "cross": [0, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 35, 37, 41, 42, 61, 62, 63, 64, 81, 83, 84, 86], "cross_val_scor": [0, 18, 56, 58, 59, 79, 80, 85], "crossnobi": [0, 42, 84], "crossvalid": [0, 14, 15, 16, 17, 18, 19, 30, 56, 58, 59, 61, 62, 63, 64, 79, 80, 83, 85, 86], "csp": [79, 80], "curb": [65, 87], "current": [27, 35, 61, 63, 83, 86], "cut": [20, 22, 23, 82], "cv": [18, 19, 28, 30, 31, 32, 33, 34, 35, 37, 63, 64, 81, 83, 86], "cv_": [18, 81], "cv_euclidean": [0, 29, 80, 83, 84], "cv_mahalanobi": [0, 29, 80, 83, 84], "cv_n_": [18, 81], "cx_": [29, 83], "cy_": [29, 83], "cycl": [20, 22, 23, 82], "d": [25, 30, 32, 33, 35, 37, 41, 42, 43, 45, 48, 83, 84], "data": [0, 11, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 51, 52, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87, 88], "dataset": [0, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 27, 32, 35, 56, 58, 59, 61, 62, 63, 64, 79, 80, 81, 83, 85, 86], "david": [30, 83], "de": [30, 83], "deal": [65, 87], "debug": [73, 89], "decai": [20, 22, 23, 82], "decid": [26, 30, 83], "decis": [18, 26, 35, 59, 61, 63, 81, 83, 86], "decision_funct": [18, 26, 32, 35, 59, 80, 81, 83, 85], "decod": [0, 25, 30, 32, 33, 36, 83], "decoder_": [25, 83], "decor": [0, 73, 74, 83, 89], "decorrel": [27, 83], "decreas": [28, 83], "def": [73, 74, 89], "default": [0, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 81, 82, 83, 85, 86, 87, 89], "defici": [28, 83], "defin": [0, 20, 22, 23, 28, 35, 38, 39, 41, 42, 43, 48, 49, 50, 54, 55, 65, 82, 83, 84, 85, 87], "definit": [27, 35, 83], "degrad": [35, 83], "degre": [28, 35, 45, 62, 83, 84, 86], "delai": [0, 30, 37, 83], "delta": [27, 35, 83], "demonstr": [14, 17, 81], "depend": [25, 83, 89], "deriv": [14, 17, 81], "describ": [0, 30, 37, 61, 62, 63, 64, 67, 83, 86, 87], "descript": 0, "design": [30, 37, 83], "desir": [14, 15, 25, 26, 32, 33, 61, 65, 81, 83, 86, 87], "detail": [0, 83], "detect": [61, 62, 86], "determin": [20, 22, 23, 82], "deviat": [20, 65, 68, 82, 87], "devic": [14, 15, 20, 22, 23, 24, 61, 62, 63, 64, 69, 70, 71, 81, 82, 86, 88], "df": [18, 26, 32, 35, 59, 81, 83], "di": [29, 30, 37, 83, 84], "diag": [27, 28, 31, 83], "diagon": [25, 83], "dict": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 66, 73, 74, 81, 83, 86, 87, 89], "dictionari": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "diedrichsen": [29, 41, 42, 83, 84], "differ": [0, 17, 18, 19, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 65, 66, 68, 81, 82, 83, 86, 87], "dim": [17, 18, 36, 61, 62, 63, 64, 65, 66, 67, 68, 81, 83, 85, 86, 87], "dimens": [0, 27, 34, 36, 38, 39, 40, 42, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 83, 84, 85, 86, 87], "dimension": [27, 81, 82, 83, 84, 85, 86, 87, 88], "dims_": [65, 67, 87], "direct": [26, 65, 83, 87], "directli": [65, 87], "disabl": [0, 30, 35, 72, 73, 74, 83, 89], "discret": [0, 23, 82], "disentangl": [0, 25, 33, 83], "dissimilar": [41, 84], "distanc": [0, 29, 40, 41, 42, 43, 48, 50, 55, 83, 84], "distort": [25, 83], "distribut": [23, 29, 42, 82, 83, 84], "diverg": [35, 83], "do": [14, 18, 29, 30, 32, 34, 36, 37, 62, 81, 83, 86], "document": [56, 58, 59, 85], "doe": [29, 61, 63, 66, 83, 86, 87], "doi": [31, 83], "domain": [30, 37, 83], "done": [29, 83], "download": 11, "draw": [29, 83], "drawn": 82, "driven": [27, 83], "dtype": [49, 50, 54, 55, 61, 62, 63, 64, 84, 85, 86], "dual": [28, 35, 83], "duplic": [61, 86], "dure": [18, 42, 81, 84], "d\u00e4hne": [25, 30, 32, 33, 35, 37, 83], "e": [20, 22, 23, 24, 26, 27, 28, 30, 35, 37, 61, 62, 82, 83, 86], "e1005508": [29, 83], "each": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 31, 33, 36, 61, 62, 63, 64, 66, 67, 81, 82, 83, 86, 87], "earli": [35, 83], "easi": [18, 81], "easier": [66, 87], "easili": [14, 65, 81, 87], "edg": [30, 83], "edge_correct": [30, 83], "eeg": [0, 20, 22, 23, 24, 82], "effect": [25, 32, 83], "effici": [27, 30, 32, 35, 83], "egg": [65, 87], "eigendecomposit": [27, 83], "eigenvalu": [27, 83], "either": [14, 15, 16, 17, 18, 19, 26, 30, 32, 61, 62, 63, 64, 65, 72, 81, 83, 84, 86, 87, 89], "ejaz": [41, 84], "eldar": [27, 83], "element": [43, 49, 84, 85], "elimin": [42, 84], "embed": [34, 83], "empir": [27, 83], "emploi": [30, 83], "enabl": [0, 23, 32, 72, 76, 82, 83, 89], "encod": [0, 25, 26, 29, 34, 53, 66, 83, 84, 85, 87], "encoder_": [25, 83], "end": [14, 61, 62, 81, 86], "enforc": [61, 86], "enough": [34, 83], "entri": [18, 62, 64, 81, 86], "enumer": [14, 15, 16, 17, 81], "env": [0, 75, 76, 79, 80], "environ": [0, 75, 76, 81, 83, 85, 86, 87, 89], "eog": [65, 87], "ep": [65, 87], "eps_": [35, 83], "epsilon": [65, 87], "equival": [37, 83], "error": [28, 30, 35, 37, 83], "escal": [61, 62, 86], "estim": [0, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 48, 56, 58, 59, 61, 62, 63, 64, 66, 68, 79, 80, 81, 84, 85, 86, 87], "estimator_": [33, 83], "estimators_": [26, 36, 83], "euclidean": [0, 29, 41, 79, 80, 83], "evalu": [18, 28, 31, 32, 61, 81, 83, 86], "even": [59, 66, 87], "event": [0, 23, 82], "everi": [61, 86], "exampl": [0, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 78, 81, 82, 83, 84, 85, 86, 87, 89], "exceed": [65, 87], "except": [61, 62, 64, 86], "execut": [12, 78], "exist": [25, 26, 62, 83, 86], "expand": [30, 34, 36, 37, 83], "expect": [27, 30, 83], "expens": [61, 62, 63, 64, 86], "experiment": [35, 83], "expit": [26, 32, 35, 83], "explain": [61, 86], "explicit": [14, 34, 81, 83], "explicitli": [14, 18, 30, 33, 34, 66, 81, 83, 87], "exponenti": [61, 63, 86], "expos": [18, 19, 26, 30, 36, 56, 58, 59, 63, 64, 81, 83, 85, 86, 89], "express": [61, 86], "extend": [56, 58, 59, 85], "extern": [14, 81], "extrem": [0, 30, 32, 65, 83, 87], "f": [14, 15, 16, 17, 20, 22, 23, 25, 29, 30, 31, 32, 33, 35, 37, 56, 57, 58, 59, 61, 62, 63, 64, 80, 81, 82, 83, 85, 86], "f978": [35, 83], "f_": [37, 83], "f_i": [14, 15, 16, 17, 81], "facilit": [32, 83], "fact": [30, 83], "factor": [25, 83], "fair": [62, 86], "fall": [31, 83], "fals": [14, 17, 18, 19, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 37, 61, 62, 63, 64, 68, 73, 76, 81, 82, 83, 86, 87, 89], "faster": [28, 31, 83], "fastmath": [73, 89], "featur": [0, 17, 20, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 41, 42, 43, 48, 49, 51, 52, 59, 61, 62, 63, 64, 66, 67, 81, 82, 83, 84, 85, 86, 87], "few": [26, 83], "field": [0, 30, 83], "fig": [20, 22, 23, 82], "figsiz": [20, 22, 23, 82], "file": [12, 78], "filter": [32, 33, 83], "final": [0, 29, 38, 39, 40, 49, 50, 51, 52, 53, 54, 55, 83, 84, 85], "find": [34, 83], "fine": [28, 31, 83], "first": [17, 30, 35, 61, 62, 65, 66, 67, 68, 81, 83, 86, 87], "fit": [0, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 48, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 83, 84, 86, 87], "fit_intercept": [25, 30, 31, 32, 33, 83], "fit_model_": [80, 81], "fit_permutation_": [80, 86], "fit_transform": [27, 29, 36, 65, 66, 67, 68, 80, 83, 87], "fit_validator_": [80, 86], "flag": [0, 73, 75, 76, 89], "float": [20, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 45, 46, 47, 65, 67, 71, 82, 83, 84, 87, 88], "float64": [49, 50, 54, 55, 84, 85], "fnhum": [30, 37, 83], "fold": [0, 14, 15, 16, 17, 18, 19, 25, 41, 42, 63, 64, 81, 83, 84, 86], "fold0": [14, 15, 81], "fold1": [14, 15, 81], "fold2": [14, 15, 81], "fold3": [14, 15, 81], "fold4": [14, 81], "follow": [18, 19, 27, 31, 33, 61, 63, 64, 81, 83, 86], "form": [28, 31, 35, 61, 83, 86], "formula": [28, 53, 83, 84, 85], "forward": [34, 83], "fourier": [30, 37, 83], "fr": [20, 22, 23, 82], "frac": [20, 22, 23, 27, 28, 31, 35, 38, 39, 49, 53, 82, 83, 84, 85], "frame": [32, 35, 83], "framework": [29, 83], "frequenc": [20, 22, 23, 30, 37, 82, 83], "frobeniu": [27, 83], "from": [0, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 78, 81, 82, 83, 84, 85, 86, 87, 89], "from_numpi": [32, 35, 83], "from_step": [18, 81], "frontier": [29, 30, 37, 83], "full": [29, 30, 34, 61, 62, 63, 64, 83, 86], "full_rdm": [29, 80, 83], "function": [0, 18, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 63, 64, 73, 74, 81, 82, 83, 84, 85, 86, 87, 89], "fundament": [30, 83], "further": [0, 61, 63, 86], "futur": [35, 83], "g": [25, 26, 30, 31, 37, 61, 62, 83, 86], "gallant": [30, 83], "galleri": [11, 78], "gamma": [20, 22, 23, 28, 35, 45, 46, 47, 82, 83, 84], "gamma_": [35, 83], "ge": [35, 83], "gener": [11, 14, 15, 16, 17, 20, 22, 23, 26, 29, 30, 37, 62, 64, 65, 81, 82, 83, 86, 87], "generalis": [27, 83], "geometri": [29, 83], "geq": [27, 28, 83], "get": [75, 76, 81, 83, 85, 86, 87, 89], "get_var": [0, 80, 89], "given": [27, 28, 29, 65, 83, 87, 89], "global": [81, 83, 85, 86, 87], "good": [34, 83], "grab": [0, 75, 89], "grad": [35, 83], "gradient": [28, 35, 83], "gram": [28, 35, 83], "gramfort": [31, 83], "greater": [30, 83], "grisel": [31, 83], "group": [0, 20, 29, 61, 62, 63, 64, 82, 83, 86], "group_": [61, 86], "group_id": 86, "group_id_": [61, 86], "g\u00f6rgen": [25, 30, 32, 33, 35, 37, 83], "h": [25, 29, 41, 42, 66, 67, 83, 84, 87], "h_": [28, 31, 83], "ha": [28, 31, 35, 66, 83, 87], "hamming_window": [0, 80, 88], "hammingwindow": [79, 80], "handl": [0, 26, 65, 66, 83, 87], "hann_window": [0, 80, 88], "hannwindow": [79, 80], "hat": [25, 26, 27, 53, 61, 83, 84, 85, 86], "hauf": [25, 30, 32, 33, 35, 37, 83], "have": [17, 18, 28, 29, 34, 35, 36, 61, 62, 66, 81, 83, 86, 87], "hayn": [25, 30, 32, 33, 35, 37, 83], "here": [14, 17, 18, 19, 20, 22, 23, 25, 28, 31, 32, 35, 36, 42, 61, 62, 63, 64, 81, 82, 83, 84, 86], "hermitian": 83, "hero": [27, 83], "hierarch": [0, 62, 63, 64, 79, 80], "hierarchical_scor": [0, 61, 62, 64, 79, 80], "higher": [30, 35, 62, 64, 83, 86], "hing": [28, 35, 83], "hot": [0, 26, 53, 66, 83, 84, 85, 87], "how": [18, 19, 20, 22, 23, 29, 61, 62, 63, 64, 81, 82, 83, 86], "howev": [14, 15, 25, 30, 32, 35, 61, 81, 83, 86], "hsu": [30, 83], "html": [30, 83], "http": [30, 83], "human": [30, 37, 83], "hurt": [18, 19, 27, 32, 61, 62, 63, 64, 81, 83, 86], "hyperparamet": [35, 83], "hypothet": [29, 83], "hz": [20, 22, 23, 82], "i": [0, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 59, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89], "i_p": [27, 83], "idea": [25, 83], "ident": [61, 62, 63, 64, 66, 86, 87], "identifi": [61, 86], "ignor": [61, 62, 86], "ii": [28, 31, 83], "ill": [26, 27, 83], "immedi": [14, 15, 16, 17, 81], "implement": [0, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 56, 58, 59, 61, 62, 63, 64, 65, 67, 81, 83, 85, 86, 87], "import": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 81, 82, 83, 84, 85, 86, 87, 89], "improv": [62, 86], "impuls": [23, 82], "imshow": [29, 83], "inclin": [14, 81], "includ": [20, 22, 23, 34, 61, 62, 66, 82, 83, 86, 87], "independ": [28, 83], "indic": [14, 15, 17, 18, 29, 37, 41, 81, 83, 84], "indici": 81, "individu": [18, 19, 20, 26, 32, 33, 61, 62, 63, 64, 81, 82, 83, 86], "infer": [14, 36, 81, 83], "influenc": [25, 30, 83], "inform": [19, 25, 27, 28, 29, 30, 31, 32, 35, 37, 41, 42, 56, 58, 59, 63, 64, 81, 83, 84, 85, 86, 87], "inher": [29, 83], "inherit": [26, 83], "initialis": [18, 19, 26, 61, 62, 63, 64, 81, 83, 86], "inner": [28, 30, 31, 83], "input": [0, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 50, 54, 55, 61, 62, 63, 64, 66, 81, 83, 84, 85, 86, 87], "inspect": [18, 81], "instanc": [26, 56, 58, 59, 83, 85], "instanti": [14, 15, 16, 17, 18, 81], "instead": [29, 30, 33, 34, 61, 63, 65, 83, 86, 87], "int": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 81, 82, 83, 85, 86, 87, 88, 89], "integ": [14, 15, 16, 17, 18, 19, 30, 63, 64, 81, 83, 86], "intens": [27, 83], "inter": [65, 87], "intercept": [25, 26, 30, 31, 32, 33, 34, 35, 37, 62, 83, 86], "intercept_": [26, 30, 31, 32, 33, 34, 35, 37, 83], "interdisciplinari": [31, 83], "interest": [30, 61, 62, 63, 64, 83, 86], "interfac": [82, 84, 87, 89], "intern": [26, 32, 35, 83], "interpet": [30, 83], "interpret": [25, 28, 30, 32, 33, 35, 37, 65, 83, 87], "interquartil": [67, 87], "inv": [42, 48, 84], "invari": [0, 62, 67, 86, 87], "invers": [0, 27, 35, 48, 65, 67, 68, 83, 84, 87], "inverse_transform": [65, 66, 67, 68, 80, 87], "invert": [65, 67, 68, 87], "investig": [28, 83], "iqr": [65, 87], "irrelev": [29, 83], "is_en": [0, 80, 89], "issu": [28, 35, 66, 83, 87], "iter": [0, 14, 15, 16, 17, 35, 36, 61, 81, 83, 86], "its": [0, 19, 28, 51, 52, 81, 83, 84, 85], "itself": [62, 64, 86], "j": [25, 29, 30, 31, 32, 33, 34, 35, 37, 41, 42, 83, 84], "jan": 83, "jit": [0, 73, 89], "jitter": [65, 87], "job": [18, 19, 29, 36, 61, 62, 63, 64, 81, 83, 86], "joblib": 89, "joint": 83, "journal": [27, 29, 31, 83], "just": [17, 28, 81, 83], "k": [0, 14, 15, 16, 17, 25, 27, 28, 30, 32, 33, 35, 37, 44, 45, 46, 47, 61, 62, 63, 64, 65, 81, 83, 84, 86, 87], "kappa": [28, 35, 44, 45, 47, 83, 84], "kei": [28, 83], "kernel": [0, 20, 22, 23, 28, 30, 35, 44, 45, 46, 47, 82, 83, 84], "kernel_linear": [0, 28, 35, 79, 80, 83], "kernel_poli": [0, 28, 35, 79, 80, 83], "kernel_rbf": [0, 28, 35, 79, 80, 83], "kernel_sigmoid": [0, 28, 35, 79, 80, 83], "kernelridgeclassifi": [35, 83], "kernelridgecv": [0, 79, 80], "kessi": [27, 83], "keyword": [18, 26, 73, 74, 81, 83, 89], "kf": [14, 15, 16, 17, 81], "kfold": [0, 18, 19, 30, 63, 64, 79, 80, 83, 86], "khanna": [35, 83], "kind": [61, 86], "king": [25, 31, 83], "kingjr": [31, 83], "kriegeskort": [29, 41, 83, 84], "kwarg": [18, 25, 33, 34, 37, 57, 72, 73, 74, 81, 83, 89], "kwargument": [26, 83], "l": [30, 65, 66, 83, 87], "l2": [28, 83], "label": [20, 26, 32, 35, 36, 53, 59, 66, 82, 83, 84, 85, 87], "labelbinaris": [0, 26, 32, 35, 79, 80, 83], "labels_": [66, 87], "lag": [30, 37, 83], "lalor": [30, 37, 83], "lambda": [27, 57, 83, 85], "lambda_1": [27, 83], "lambda_max": [23, 82], "lambda_min": [23, 82], "lambda_p": [27, 83], "laplacian": [30, 83], "larg": [27, 61, 62, 63, 64, 83, 86], "largest": [35, 83], "last": [27, 62, 83, 86], "layout": [0, 21, 24, 82], "lead": [18, 19, 26, 28, 61, 62, 63, 64, 81, 83, 86], "learn": [28, 31, 35, 83], "least": [28, 61, 62, 83, 86], "leav": [61, 63, 86], "ledoit": [27, 83], "ledoitwolf": [27, 83], "left": [27, 28, 31, 35, 61, 63, 83, 86], "less": [25, 28, 83], "let": [14, 17, 29, 34, 35, 66, 73, 74, 81, 83, 87, 89], "level": [18, 19, 36, 61, 62, 63, 64, 81, 83, 86], "lewin": [27, 83], "liberto": [30, 37, 83], "lightweight": 89, "like": [14, 15, 16, 17, 26, 27, 28, 29, 30, 32, 35, 56, 58, 59, 61, 62, 81, 83, 85, 86], "lin": [26, 83], "linalg": [42, 48, 84], "line": [30, 83], "linear": [0, 25, 28, 30, 32, 33, 34, 35, 37, 44, 83, 84], "linear_model": [31, 83], "linearli": [35, 83], "list": [18, 26, 28, 30, 31, 36, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 81, 83, 85, 86, 87, 89], "live": [25, 83], "load_iri": [32, 35, 83], "logspac": [18, 32, 33, 36, 61, 62, 63, 64, 81, 83, 86], "long": [61, 62, 63, 64, 86], "longer": [28, 83], "loo": [28, 30, 31, 32, 33, 34, 35, 37, 83], "look": [35, 66, 73, 74, 83, 87, 89], "loop": [62, 86], "lopez": [25, 83], "loss": [28, 31, 35, 80, 83], "low": [18, 19, 61, 62, 63, 64, 81, 86], "lower": [65, 87], "lower_": [65, 87], "lr": [35, 83], "lvert": [27, 28, 31, 32, 33, 34, 35, 37, 83], "m": [0, 20, 22, 23, 24, 25, 27, 30, 35, 37, 61, 65, 82, 83, 86, 87], "machin": [28, 31, 35, 83], "macro": [53, 84, 85], "mad": [65, 87], "magnitud": [28, 83], "mahalanobi": [0, 29, 42, 79, 80, 83], "mai": [18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 65, 81, 83, 86, 87], "make": [14, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 59, 61, 81, 83, 86], "make_circl": [35, 83], "make_classif": [32, 35, 83], "make_meeg_categor": [0, 18, 56, 58, 59, 79, 80, 81, 85], "make_meeg_colour": [0, 20, 22, 23, 79, 80], "make_meeg_continu": [0, 61, 62, 63, 64, 79, 80, 85, 86], "make_meeg_discret": [0, 79, 80], "make_meeg_layout": [0, 20, 22, 23, 79, 80], "make_pipelin": [18, 61, 62, 63, 64, 81, 86], "manag": 89, "mani": [18, 19, 20, 22, 23, 28, 29, 32, 61, 62, 63, 64, 81, 82, 83, 86], "mann": [53, 84, 85], "manner": [61, 84, 86], "manual_se": [14, 81], "map": [28, 31, 32, 33, 34, 35, 66, 83, 87], "map_l_to_c_": [66, 87], "margin": [28, 35, 83], "marker": [20, 22, 23, 82], "mask": [61, 86], "mask_": [61, 86], "mask_0": [20, 82], "mask_1": [20, 82], "math": [0, 28, 29, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 79, 80, 83, 85], "mathbb": [27, 83], "mathbf": [39, 84], "mathcal": [28, 35, 83], "mathemat": [82, 83, 87], "maths_a": [73, 74, 89], "maths_b": [73, 74, 89], "matlab": [30, 37, 83], "matplotlib": [20, 22, 23, 29, 82, 83], "matric": [27, 28, 29, 42, 48, 83, 84], "matrix": [0, 27, 28, 29, 30, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 61, 62, 63, 64, 66, 83, 84, 85, 86, 87], "max": [27, 35, 65, 83, 87], "max_it": [35, 83], "maxim": [35, 83], "maximum": [23, 26, 27, 30, 35, 37, 82, 83], "mb": [12, 78], "mcdonald": [31, 83], "mean": [14, 19, 20, 22, 23, 25, 28, 30, 31, 37, 61, 65, 67, 68, 81, 82, 83, 86, 87], "mean_": [68, 87], "mean_rot": [80, 83], "measur": [27, 29, 41, 42, 62, 83, 84, 86], "median": [65, 67, 87], "meineck": [25, 30, 32, 33, 35, 37, 83], "mem": [12, 78], "membership": [20, 82], "method": [18, 19, 26, 27, 29, 30, 32, 35, 36, 61, 62, 63, 64, 65, 81, 83, 86, 87, 89], "metric": [0, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 56, 58, 59, 60, 61, 62, 63, 64, 79, 80, 81, 83, 84, 86], "metric_": [26, 28, 30, 31, 32, 33, 34, 35, 37, 83], "michel": [31, 83], "might": [14, 34, 61, 67, 81, 83, 86, 87], "min": [27, 83], "min_": [28, 31, 32, 33, 34, 35, 37, 83], "minim": [28, 65, 83, 87], "minimis": [27, 28, 31, 35, 83], "minimum": [23, 27, 30, 37, 82, 83], "mirror": [28, 83], "mistak": [18, 81], "mit": [28, 83], "mmse": [27, 83], "mne": [30, 37, 83], "model": [18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 60, 61, 62, 63, 64, 81, 83, 85, 86], "model_": [18, 81], "model_select": [0, 14, 15, 61, 62, 63, 64, 79, 80, 81], "modul": 79, "more": [18, 19, 25, 27, 28, 29, 30, 31, 32, 34, 35, 37, 41, 42, 56, 58, 59, 61, 62, 63, 64, 81, 83, 84, 85, 86], "most": [26, 61, 63, 83, 86], "mtrf": [30, 37, 83], "mu": [27, 68, 83, 87], "much": [20, 22, 23, 28, 31, 82, 83], "multi": [26, 32, 41, 81, 82, 83, 84, 85, 86, 87, 88], "multiclass": [0, 26, 35, 66, 83, 87], "multifeatur": [0, 66, 87], "multipl": [17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "multivari": [0, 11, 25, 27, 30, 32, 33, 35, 37, 61, 62, 63, 64, 83, 86], "murphi": [28, 83], "must": [30, 36, 83], "mutat": [57, 61, 62, 80, 85, 86], "mv": [32, 35, 43, 83, 84], "mvpy": [0, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "n": [12, 16, 17, 27, 28, 29, 30, 31, 37, 38, 41, 43, 53, 62, 64, 69, 70, 71, 78, 81, 83, 84, 85, 86, 88], "n_": [66, 87], "n_background": [20, 22, 23, 82], "n_channel": [20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 82, 83], "n_channels_": [30, 83], "n_class": [20, 26, 32, 35, 59, 66, 82, 83, 87], "n_classes_": [66, 87], "n_classifi": [26, 83], "n_cv": [61, 62, 63, 64, 86], "n_cycl": [20, 22, 23, 82], "n_dim": [21, 82], "n_direct": [24, 82], "n_featur": [17, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 51, 59, 61, 62, 63, 64, 66, 81, 82, 83, 84, 85, 86, 87], "n_features_": [30, 66, 83, 87], "n_frequenc": [36, 83], "n_group": [29, 61, 62, 63, 64, 83, 86], "n_inform": [32, 35, 83], "n_job": [18, 19, 29, 36, 61, 62, 63, 64, 81, 83, 86], "n_jobs_valid": [63, 64, 86], "n_penalti": [30, 83], "n_permut": [62, 64, 86], "n_predictor": [61, 62, 63, 64, 86], "n_repeat": [15, 16, 81], "n_sampl": [14, 15, 16, 17, 26, 28, 30, 31, 32, 33, 35, 37, 44, 45, 46, 47, 51, 59, 66, 81, 83, 84, 85, 87], "n_set": [61, 62, 63, 64, 86], "n_split": [14, 15, 16, 17, 30, 81, 83], "n_timepoint": [17, 20, 22, 23, 27, 29, 30, 34, 36, 37, 59, 81, 82, 83], "n_trf": [22, 23, 30, 82, 83], "n_trf_": [30, 83], "n_trial": [20, 22, 23, 25, 27, 29, 33, 34, 36, 66, 82, 83, 87], "n_triu_indic": [29, 83], "nadaraya": [28, 83], "name": [17, 18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 56, 57, 58, 59, 61, 62, 63, 64, 80, 81, 83, 85, 86], "natur": [30, 83], "ndarrai": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 85, 86, 87, 88, 89], "need": [61, 63, 86], "neg": [53, 66, 84, 85, 87], "neg_label": [66, 87], "net": [30, 83], "network": [30, 83], "neural": [20, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 82, 83], "neuro": [29, 83], "neuroimag": [11, 25, 30, 32, 33, 35, 37, 41, 83, 84], "neuron": [30, 83], "neurosci": [29, 30, 37, 83], "never": [29, 83], "new": [14, 15, 16, 17, 18, 81], "next": [34, 62, 83, 86], "nice": 84, "nili": [41, 84], "nn": [18, 19, 30, 37, 81, 83], "nogil": [73, 89], "nois": [20, 22, 23, 29, 35, 82, 83], "noisi": [27, 83], "non": [28, 35, 83], "none": [14, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 57, 60, 61, 62, 63, 64, 65, 67, 68, 75, 76, 81, 83, 85, 86, 87, 89], "nopython": [73, 89], "norm": [27, 83], "normal": [18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 36, 37, 42, 43, 48, 65, 67, 68, 81, 83, 84, 87], "normalis": [25, 31, 32, 33, 67, 83, 87], "normalise_decod": [25, 83], "note": [0, 14, 15, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 81, 83, 84, 85, 86, 87], "notin": [65, 87], "novel": [61, 86], "now": [14, 18, 61, 81, 86], "np": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 81, 82, 83, 84, 85, 86, 87, 89], "nt": 89, "numba": [0, 73, 89], "number": [14, 15, 16, 17, 18, 19, 24, 26, 29, 30, 33, 35, 36, 37, 53, 61, 62, 63, 64, 66, 81, 82, 83, 84, 85, 86, 87], "numer": [26, 66, 83, 87], "numpi": [0, 14, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 29, 31, 35, 36, 65, 66, 67, 68, 80, 81, 82, 83, 84, 87, 89], "o": [20, 22, 23, 27, 31, 82, 83, 89], "oa": [27, 83], "object": [0, 14, 15, 16, 17, 18, 19, 26, 27, 30, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 85, 86, 89], "observ": [25, 29, 61, 83, 86], "obtain": [18, 25, 26, 27, 29, 35, 62, 65, 66, 67, 68, 81, 83, 86, 87], "occur": [14, 81], "off": [20, 22, 23, 67, 82, 87], "offer": [66, 87], "offset": [17, 26, 35, 66, 81, 83, 87], "offsets_": [26, 83], "often": [27, 35, 83], "on_underspecifi": [61, 62, 86], "onc": [33, 34, 61, 62, 83, 86], "one": [0, 17, 18, 23, 26, 28, 30, 34, 35, 53, 61, 62, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87], "ones": [30, 37, 83], "onli": [14, 18, 19, 20, 23, 26, 27, 28, 30, 35, 37, 61, 62, 63, 64, 65, 66, 81, 82, 83, 86, 87], "onset": [23, 82], "op": [77, 89], "oper": [14, 77, 81, 87, 89], "optim": [27, 83], "optimis": [28, 35, 83], "option": [14, 15, 16, 17, 18, 19, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 65, 67, 75, 76, 81, 82, 83, 86, 87, 89], "oquab": [25, 83], "oracl": [27, 83], "order": [28, 29, 30, 62, 83, 86], "order_": [62, 86], "org": [31, 83], "origin": [66, 87], "other": [26, 28, 32, 44, 45, 46, 47, 61, 62, 83, 84, 86], "otherwis": [14, 15, 16, 17, 18, 19, 25, 29, 61, 62, 63, 64, 65, 81, 83, 86, 87], "ouput": [25, 83], "our": [25, 36, 62, 83, 86], "out": [18, 27, 34, 81, 83], "outcom": [19, 30, 37, 51, 61, 62, 81, 83, 84, 85, 86], "outlier": [0, 65, 67, 87], "output": [18, 19, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 61, 62, 63, 64, 81, 83, 84, 86], "outsid": [65, 87], "over": [0, 18, 19, 20, 22, 23, 26, 28, 29, 30, 32, 34, 35, 36, 38, 39, 40, 49, 50, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 81, 82, 83, 84, 85, 86, 87], "overlap": [17, 81], "overrid": [75, 76, 89], "overriden": [76, 89], "overwrit": 59, "ovo": [0, 26, 35, 83], "ovr": [0, 26, 32, 35, 83], "own": [20, 82], "p": [18, 20, 22, 23, 26, 27, 28, 32, 35, 36, 53, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86], "p_": [20, 22, 23, 35, 82, 83], "packag": 79, "pad": [18, 19, 20, 22, 23, 30, 36, 37, 81, 82, 83], "pair": [14, 15, 16, 17, 81], "parallel": [29, 36, 83], "parallelis": [18, 19, 61, 62, 63, 64, 81, 86], "paramet": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 89], "parametr": [28, 83], "part": [61, 82, 83, 86, 89], "particularli": [28, 35, 36, 83], "pass": [14, 18, 20, 22, 23, 26, 27, 36, 37, 73, 74, 81, 82, 83, 89], "patch": 89, "pattern": [25, 26, 29, 30, 32, 33, 35, 36, 37, 41, 83, 84], "pattern_": [18, 25, 26, 30, 32, 33, 35, 36, 37, 81, 83], "paz": [25, 83], "pcbi": [29, 83], "pearson": [0, 49, 50, 54, 84, 85], "pearsonr": [0, 29, 50, 54, 55, 61, 62, 63, 64, 79, 80, 83, 86], "pearsonr_d": [0, 29, 80, 83, 84], "pedregosa": [31, 83], "penalis": [25, 35, 83], "penalti": [25, 28, 30, 31, 32, 33, 34, 35, 37, 83], "pep": 89, "per": [20, 22, 23, 25, 28, 29, 32, 35, 59, 62, 66, 82, 83, 86, 87], "perfectli": [14, 81], "perform": [18, 19, 28, 29, 30, 31, 32, 35, 61, 62, 63, 64, 81, 83, 86], "permut": [0, 61, 62, 63, 64, 86], "perspect": [28, 83], "pham": 83, "phi": [20, 22, 23, 82], "pi": [27, 83], "pipelin": [0, 18, 19, 60, 61, 62, 63, 64, 81, 85, 86, 89], "place": [23, 72, 82, 89], "pleas": [0, 14, 15, 16, 17, 19, 25, 26, 27, 28, 29, 32, 36, 56, 58, 59, 63, 64, 81, 83, 85, 86], "plo": [29, 83], "plot": [20, 22, 23, 29, 82, 83], "plt": [20, 22, 23, 29, 82, 83], "pm": [65, 87], "point": [29, 30, 34, 65, 83, 87], "poisson": [23, 82], "poli": [28, 35, 83], "polynomi": [0, 35, 45, 83, 84], "poor": [28, 83], "poorli": [30, 67, 83, 87], "pos_label": [66, 87], "posit": [20, 22, 23, 27, 28, 30, 35, 37, 53, 66, 72, 82, 83, 84, 85, 87, 89], "positon": [21, 82], "posix": 89, "possibl": [35, 61, 83, 86], "potenti": [25, 83], "power": [20, 22, 23, 82], "pp": 83, "practic": [25, 27, 28, 83], "pre": 83, "precis": [0, 27, 42, 48, 61, 83, 84, 86], "precision_": [27, 83], "predict": [18, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 51, 56, 57, 58, 61, 80, 81, 83, 84, 85, 86], "predict_proba": [18, 26, 32, 35, 36, 80, 81, 83], "predictor": [25, 30, 33, 61, 62, 63, 64, 82, 83, 86], "preprocess": [0, 18, 25, 26, 32, 35, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 81, 83, 86], "prespecifi": [65, 87], "press": [28, 83], "preval": [28, 83], "primal": [28, 83], "princip": [34, 42, 83, 84], "principl": [14, 15, 26, 81, 83], "print": [14, 15, 16, 17, 20, 22, 23, 29, 66, 68, 81, 82, 83, 87], "prior": [28, 83], "probabilist": [28, 83], "probabl": [18, 26, 28, 32, 35, 36, 81, 83], "problem": [26, 30, 32, 35, 37, 83], "procedur": [0, 18, 19, 25, 27, 61, 62, 63, 64, 81, 83, 86], "process": [20, 22, 23, 82], "produc": [27, 28, 35, 61, 62, 64, 66, 83, 86, 87], "progress": [0, 18, 19, 29, 36, 61, 62, 63, 64, 72, 81, 83, 86, 89], "progressbar": [0, 79, 80], "properti": [29, 83], "provid": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 82, 83, 86, 87, 89], "provost": [29, 42, 83, 84], "public": [26, 83], "push": [27, 83], "put": [28, 83], "py": [63, 64, 86], "pyplot": [20, 22, 23, 29, 82, 83], "python": [11, 31, 82, 83, 86, 89], "q": [27, 83], "qquad": [27, 28, 31, 83], "quad": [32, 83], "quantil": [65, 67, 87], "quantile_rang": [67, 87], "quartil": [65, 87], "question": [61, 62, 86], "r": [25, 30, 31, 35, 37, 49, 51, 52, 83, 84, 85], "r2": [0, 28, 30, 31, 33, 34, 37, 61, 62, 63, 64, 79, 80, 83, 86], "r_": [53, 84, 85], "rac": [68, 87], "radial": [0, 20, 22, 23, 46, 82, 84], "rais": [61, 62, 86], "raised_cosine_window": [0, 80, 88], "raisedcosinewindow": [79, 80], "randint": [66, 87], "randn": [16, 17, 41, 81, 84], "random": [14, 15, 16, 17, 81], "random_st": [14, 15, 16, 17, 81], "randomis": [14, 81], "rang": [20, 22, 23, 30, 34, 65, 67, 82, 83, 87], "rank": [0, 28, 51, 53, 54, 55, 79, 80, 83, 85], "rate": [23, 35, 82, 83], "rather": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "ratio": [20, 22, 23, 82], "rbf": [28, 35, 83, 84], "rdbu_r": [29, 83], "rdm": [29, 83], "rdm_": [29, 83], "re": [14, 81, 89], "realist": [30, 83], "recept": [0, 30, 83], "receptivefield": [0, 18, 19, 34, 37, 79, 80, 81], "recommend": [26, 30, 37, 83], "reconstruct": [0, 30, 37, 83], "record": [26, 29, 83], "recurs": [36, 83], "reduc": [56, 57, 58, 59, 80, 85], "reduce_": [80, 85], "redund": [14, 15, 81], "refer": [20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 41, 42, 82, 83, 84], "reg_cv": [30, 83], "reg_typ": [30, 83], "regress": [0, 25, 28, 31, 32, 33, 34, 37, 83], "regularis": [25, 28, 30, 35, 83], "reinstanti": [14, 81], "rel": [30, 37, 62, 64, 83, 86], "relat": [30, 35, 37, 83], "reliabl": [41, 84], "remov": [61, 65, 67, 86, 87], "repeat": [0, 15, 16, 62, 81, 86], "repeatedkfold": [0, 30, 79, 80, 83], "repeatedli": [15, 16, 81], "repeatedstratifiedkfold": [0, 30, 79, 80, 83], "report": [18, 19, 36, 61, 62, 63, 64, 81, 83, 86, 89], "repres": [62, 66, 86, 87], "represent": [0, 29, 83], "reproduc": [14, 15, 16, 17, 81], "request": [56, 57, 58, 59, 80, 85], "requir": [29, 61, 62, 83, 86], "research": [31, 83], "resolv": [35, 83], "resort": [28, 83], "respect": [0, 20, 22, 23, 43, 49, 75, 82, 84, 85, 89], "respons": [0, 20, 22, 23, 29, 30, 34, 37, 61, 62, 63, 64, 82, 83, 86], "rest": [0, 26, 35, 83], "result": [14, 61, 77, 81, 86, 89], "return": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 89], "return_count": [16, 17, 81], "return_hierarch": [63, 86], "return_shaplei": [64, 86], "return_valid": [19, 81], "return_x_i": [32, 35, 83], "return_xy\u00df": [22, 23, 82], "review": [31, 83], "rf": [30, 83], "rgb": [21, 82], "rho": [27, 83], "ridg": [0, 25, 28, 30, 31, 32, 33, 34, 37, 83], "ridgeclassifi": [0, 18, 26, 35, 56, 58, 59, 79, 80, 81, 85], "ridgecv": [0, 28, 30, 33, 34, 37, 79, 80], "ridgedecod": [0, 25, 32, 36, 79, 80, 85], "ridgeencod": [0, 79, 80], "right": [27, 28, 31, 35, 61, 63, 83, 86], "risk": [27, 83], "rng": [14, 81], "rng_": [14, 17, 81], "robust": [0, 28, 67, 83, 87], "robustli": 87, "robustscal": [0, 65, 79, 80], "roc": [0, 53, 59, 84, 85], "roc_auc": [0, 18, 79, 80, 81], "rocauc": [53, 84, 85], "rotmat": [80, 83], "routin": [35, 83, 89], "row": [61, 86], "rsa": [0, 79, 80], "run": [14, 29, 36, 62, 64, 66, 81, 83, 86, 87], "rvert": [27, 28, 31, 32, 33, 34, 35, 37, 83], "rvert_": [28, 83], "rvert_2": [28, 83], "rvert_f": [27, 83], "s0047": [27, 83], "s_max": [27, 30, 83], "s_min": [27, 30, 83], "sai": [34, 83], "same": [14, 15, 16, 17, 18, 19, 30, 36, 37, 81, 83], "sampl": [20, 22, 23, 27, 30, 37, 41, 42, 43, 48, 49, 52, 53, 68, 82, 83, 84, 85, 87], "sample_weight": [68, 87], "scale": [25, 26, 28, 30, 32, 35, 65, 67, 68, 83, 87], "scale_": [67, 68, 87], "scaler": [0, 18, 25, 35, 61, 62, 63, 64, 65, 67, 79, 80, 81, 83, 86], "scaler_": [25, 35, 83], "scatter": [20, 22, 23, 82], "scene": [30, 83], "scheme": [0, 26, 30, 83], "scikit": [31, 83], "score": [0, 18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 51, 53, 56, 58, 59, 61, 62, 63, 64, 79, 80, 81, 83, 84, 86], "score_": [18, 61, 62, 81, 86], "second": [17, 20, 22, 23, 27, 29, 35, 66, 81, 82, 83, 87], "see": [0, 14, 17, 19, 25, 27, 28, 29, 30, 31, 32, 34, 35, 37, 41, 42, 68, 81, 83, 84, 87, 89], "seed": [14, 15, 16, 17, 81], "select": [35, 61, 63, 65, 66, 67, 83, 86, 87], "selector": [61, 62, 86], "selet": [68, 87], "self": [27, 83], "semant": [34, 83], "semidefinit": [28, 83], "sens": [29, 83], "sensit": [20, 82], "sensor": [0, 21, 24, 82], "separ": [35, 36, 61, 63, 83, 86], "sequenti": [28, 83], "set": [0, 14, 15, 16, 17, 25, 29, 30, 34, 36, 61, 76, 81, 83, 85, 86, 87, 89], "set_": [61, 86], "set_titl": [20, 22, 23, 82], "set_xlabel": [20, 22, 23, 82], "set_ylabel": [20, 22, 23, 82], "setup": [61, 62, 63, 64, 86], "sever": [18, 19, 61, 62, 63, 64, 81, 86], "shape": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 51, 59, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87], "shape_": [18, 68, 81, 87], "shaplei": [0, 61, 63, 64, 79, 80], "shapley_scor": [0, 61, 62, 63, 79, 80], "share": [29, 83], "shorthand": [0, 18, 19, 61, 62, 63, 64, 81, 86], "should": [14, 17, 18, 19, 20, 22, 23, 26, 27, 28, 30, 32, 35, 36, 37, 61, 62, 63, 64, 81, 82, 83, 86], "shrinkag": [27, 83], "shrinkage_": [27, 83], "shuffl": [14, 15, 16, 17, 81], "siam": 83, "sigma": [20, 27, 68, 82, 83, 87], "sigmoid": [0, 28, 35, 47, 83, 84], "signal": [0, 20, 22, 23, 30, 37, 61, 69, 70, 71, 79, 80, 82, 83, 86], "silli": [73, 74, 89], "sim": [28, 83], "similar": [0, 29, 39, 83, 84], "similartii": [29, 83], "simpl": [0, 30, 32, 34, 66, 72, 83, 87, 89], "simplest": [18, 81], "simpli": [14, 62, 81, 86], "simul": [20, 22, 23, 29, 82, 83], "singh": [30, 83], "singl": [32, 34, 81, 83], "situat": [18, 19, 32, 61, 62, 63, 64, 66, 81, 83, 86, 87], "size": [18, 20, 22, 23, 27, 28, 29, 31, 33, 34, 36, 41, 42, 43, 48, 61, 62, 63, 64, 81, 82, 83, 84, 86], "sklearn": [0, 14, 15, 17, 18, 19, 26, 28, 29, 31, 32, 35, 36, 61, 62, 63, 64, 65, 66, 67, 68, 81, 83, 86, 87], "slide": [0, 18, 34, 79, 80, 81], "slightli": [35, 83], "small": [27, 28, 30, 83], "smaller": [35, 83], "smo": [35, 83], "smyth": [30, 83], "snr": [20, 22, 23, 82], "so": [32, 83], "softmax": [20, 82], "solut": [28, 31, 83], "solv": [28, 30, 31, 32, 33, 34, 37, 61, 62, 63, 64, 83, 86], "some": [0, 28, 29, 35, 61, 62, 66, 68, 83, 86, 87], "sometim": [0, 42, 84], "sourc": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89], "space": [28, 29, 35, 83], "span": [65, 87], "spars": [28, 83], "spatial": [0, 21, 32, 33, 82, 83], "spatio": [30, 83], "spearman": [0, 54, 55, 84, 85], "spearmanr": [0, 29, 55, 79, 80, 83], "spearmanr_d": [0, 29, 80, 83, 84], "special": [65, 87], "specif": [18, 44, 45, 46, 47, 61, 62, 67, 81, 84, 86, 87], "specifi": [18, 19, 26, 28, 36, 59, 61, 62, 63, 64, 65, 67, 81, 83, 86, 87], "speed": [28, 83], "sphinx": 11, "split": [14, 15, 16, 17, 18, 19, 25, 30, 63, 64, 80, 81, 83, 86], "sqrt": [43, 48, 49, 84, 85], "squar": [28, 31, 41, 42, 83, 84], "squeez": [32, 35, 83], "sr": [30, 37, 83], "stabilis": [20, 22, 23, 82], "stabl": [30, 83], "stack": [17, 18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 66, 81, 83, 86, 87], "standard": [0, 20, 34, 68, 82, 83, 87], "standardscal": [0, 68, 87], "state": [14, 15, 16, 17, 81], "statement": 89, "static": [14, 81], "statist": [31, 83], "std": [67, 68, 87], "step": [18, 25, 34, 35, 36, 61, 62, 63, 64, 65, 66, 67, 68, 81, 83, 86, 87], "stick": [66, 87], "still": [18, 81], "stimuli": [0, 20, 22, 23, 30, 37, 82, 83], "stimulu": [0, 20, 22, 23, 30, 37, 82, 83], "stop": [35, 83], "str": [18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 70, 71, 73, 74, 75, 76, 77, 81, 82, 83, 85, 86, 87, 88, 89], "stratifi": [0, 16, 17, 81], "stratifiedkfold": [0, 30, 79, 80, 83], "strength": [25, 35, 83], "strimmer": [27, 83], "string": [0, 30, 66, 77, 83, 87, 89], "structur": [29, 81, 82, 83, 84, 85, 86, 87, 88], "submodul": [79, 80], "subpackag": 79, "subplot": [20, 22, 23, 82], "subset": [30, 83], "subsystem": [82, 83, 86, 89], "sum": [41, 49, 53, 84, 85], "sum_": [27, 28, 30, 31, 32, 33, 35, 37, 43, 83, 84], "sum_i": [31, 34, 35, 38, 83, 84, 85], "super": [26, 83], "suppli": [18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 75, 76, 81, 83, 86, 89], "support": [0, 29, 33, 34, 35, 66, 83, 87], "sure": [14, 15, 16, 17, 18, 29, 59, 81, 83], "surrog": [35, 83], "svc": [0, 26, 28, 32, 79, 80, 84], "swapax": [34, 42, 83, 84], "switch": [35, 83], "system": [29, 30, 83, 89], "systemat": [27, 83], "t": [20, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 42, 44, 45, 47, 48, 73, 74, 82, 83, 84, 89], "t_baselin": [20, 22, 23, 82], "t_durat": [20, 22, 23, 82], "t_length": [20, 22, 23, 82], "t_max": [30, 37, 83], "t_min": [30, 37, 83], "t_pad": [20, 22, 23, 82], "tackl": [61, 86], "tail": [27, 65, 83, 87], "take": [26, 53, 83, 84, 85], "target": [14, 15, 16, 17, 25, 26, 28, 31, 32, 33, 35, 36, 81, 83], "task": [32, 83], "tau": [30, 37, 83], "td": [37, 83], "technic": [41, 84], "temperatur": [20, 82], "tempor": [0, 22, 23, 30, 34, 36, 37, 61, 62, 63, 64, 82, 83, 86], "tend": [27, 83], "tensor": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 82, 83, 84, 85, 86, 87, 88, 89], "tesor": [39, 40, 84], "test": [14, 15, 16, 17, 18, 28, 30, 31, 32, 33, 34, 37, 61, 81, 83, 86], "test_": [18, 81], "test_cnt": [16, 17, 81], "text": [38, 39, 40, 50, 53, 55, 84, 85], "textrm": [27, 28, 31, 32, 65, 83, 87], "th": [43, 49, 84, 85], "than": [18, 19, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 62, 63, 64, 81, 83, 86], "thei": [26, 34, 62, 65, 83, 86, 87], "them": [61, 86], "theori": [28, 83], "therefor": [14, 18, 28, 37, 41, 81, 83, 84], "thereof": [32, 83], "theunissen": [30, 83], "thi": [0, 14, 15, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 44, 45, 46, 47, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89], "thing": [61, 62, 86], "third": [35, 83], "thirion": [31, 83], "those": [29, 61, 83, 86], "three": [24, 27, 35, 61, 62, 65, 66, 82, 83, 86, 87], "through": [27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 83], "ti": [0, 51, 52, 84, 85], "tight_layout": [20, 22, 23, 82], "tighter": [35, 83], "time": [0, 20, 22, 23, 27, 29, 30, 34, 35, 36, 37, 59, 62, 65, 82, 83, 86, 87], "timedelai": [0, 30, 34, 61, 62, 63, 64, 79, 80, 86], "timepoint": [30, 36, 37, 83], "to_numpi": [14, 15, 16, 17, 26, 27, 29, 35, 65, 66, 67, 68, 80, 81, 83, 87], "to_torch": [14, 15, 16, 17, 18, 26, 27, 29, 35, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 83, 86, 87], "togeth": [0, 20, 61, 82, 86], "toi": [73, 74, 89], "tol": [35, 83], "toler": [35, 83], "too": [42, 84], "tool": [30, 83, 89], "toolbox": [30, 37, 83], "top": [36, 83], "torch": [0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "torch_ridg": [31, 83], "total": [12, 61, 62, 63, 64, 66, 78, 86, 87], "toward": [27, 83], "tqdm": [72, 89], "tqdm_joblib": [80, 89], "tqdm_object": 89, "tr": [27, 83], "train": [14, 15, 16, 17, 28, 35, 81, 83], "train_cnt": [16, 17, 81], "train_idx": [16, 17, 81], "transform": [14, 15, 16, 17, 18, 27, 29, 32, 36, 65, 66, 67, 68, 80, 81, 83, 87], "treat": [33, 83], "trf": [18, 19, 20, 22, 23, 30, 37, 61, 62, 63, 64, 81, 82, 83, 86], "trial": [20, 22, 23, 29, 42, 65, 82, 83, 84, 87], "triangl": [29, 83], "triangular": [29, 83], "trick": [28, 35, 83], "trigger": [35, 83], "true": [14, 16, 17, 18, 19, 23, 25, 29, 30, 31, 32, 33, 35, 36, 37, 51, 59, 61, 62, 63, 64, 67, 68, 72, 73, 74, 76, 81, 82, 83, 84, 85, 86, 87, 89], "truli": [29, 83], "try": [18, 19, 34, 61, 62, 63, 64, 81, 83, 86], "tune": [28, 31, 83], "tupl": [14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 81, 82, 83, 85, 86, 87], "turn": [20, 22, 23, 67, 82, 87], "two": [0, 14, 25, 27, 29, 30, 35, 61, 65, 66, 77, 81, 83, 86, 87, 89], "tx_i": [32, 83], "type": [14, 26, 29, 30, 36, 56, 57, 58, 59, 66, 81, 83, 85, 87], "typic": [29, 35, 83], "u": [20, 22, 23, 25, 53, 61, 65, 82, 83, 84, 85, 86, 87], "unbiass": [29, 83], "uncertainti": [20, 82], "under": [56, 58, 59, 85], "underli": [18, 19, 36, 61, 62, 63, 64, 81, 83, 86], "underspecifi": [61, 62, 86], "understand": [29, 83], "unfavour": [27, 83], "union": [14, 15, 16, 17, 20, 21, 22, 23, 24, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 76, 81, 82, 83, 84, 85, 87, 89], "uniqu": [16, 17, 53, 61, 62, 63, 64, 66, 81, 84, 85, 86, 87], "unit": [20, 67, 68, 82, 87], "unless": [27, 30, 66, 83, 87], "unlik": [17, 30, 32, 34, 35, 37, 44, 45, 46, 47, 67, 81, 83, 84, 87], "unrank": [52, 84], "unseen": [18, 81], "unspecifi": [65, 87], "unsqueez": [25, 83], "until": [14, 81], "unus": [14, 15, 16, 17, 65, 81, 87], "up": [14, 61, 63, 81, 86], "updat": [35, 83], "upon": [14, 81], "upper": [29, 65, 83, 87], "upper_": [65, 87], "us": [0, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 53, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87], "util": [0, 72, 73, 74, 75, 76, 77, 79, 80], "v": [26, 30, 31, 83], "v_a": [77, 89], "v_b": [77, 89], "valid": [0, 14, 15, 16, 17, 19, 26, 28, 29, 30, 31, 35, 41, 42, 61, 62, 63, 64, 79, 80, 83, 84, 86], "validator_": [61, 62, 86], "valu": [0, 18, 19, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 56, 58, 59, 61, 62, 63, 64, 65, 67, 75, 81, 83, 85, 86, 87, 89], "vanderpla": [31, 83], "var": [0, 75, 76, 89], "var_": [68, 87], "varepsilon": [28, 30, 31, 32, 33, 34, 37, 83], "vari": [0, 20, 22, 82], "variabl": [0, 23, 35, 75, 76, 82, 83, 89], "varianc": [67, 68, 87], "varoquaux": [31, 83], "varphi": [35, 83], "vector": [0, 25, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 53, 61, 83, 84, 85, 86], "vectoris": [35, 66, 83, 84, 87], "verbos": [18, 19, 29, 36, 61, 62, 63, 64, 81, 83, 86], "verbose_valid": [63, 64, 86], "veri": [25, 34, 73, 74, 83, 89], "version": [0, 77, 79, 80], "versu": [0, 26, 35, 83], "vert": [46, 84], "via": [35, 83], "vinj": [30, 83], "visual": [30, 83], "vol": 83, "vote": [26, 83], "voxel": [41, 84], "w": [27, 28, 30, 35, 37, 83], "w_": [35, 37, 83], "wa": [65, 76, 87, 89], "wai": [14, 61, 65, 81, 86, 87], "walther": [41, 84], "want": [14, 17, 18, 25, 26, 29, 34, 36, 61, 62, 81, 83, 86], "warn": [61, 62, 82, 83, 86, 89], "we": [14, 17, 18, 20, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 53, 61, 62, 64, 81, 82, 83, 84, 85, 86, 89], "weight": [25, 28, 30, 32, 33, 35, 37, 68, 83, 87], "well": [0, 27, 32, 35, 61, 83, 86], "were": [30, 37, 61, 62, 83, 86], "what": [20, 22, 23, 27, 30, 33, 34, 35, 61, 62, 65, 75, 82, 83, 86, 87, 89], "when": [14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 34, 35, 36, 59, 61, 62, 63, 64, 65, 66, 81, 82, 83, 86, 87], "whenev": [65, 87], "where": [14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 48, 49, 53, 61, 62, 63, 64, 65, 66, 68, 81, 82, 83, 84, 85, 86, 87], "wherea": [18, 28, 62, 81, 83, 86], "wherein": 83, "whether": [25, 29, 31, 32, 33, 61, 62, 72, 83, 86, 89], "which": [14, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 35, 61, 62, 65, 67, 68, 72, 81, 82, 83, 86, 87, 89], "while": [18, 26, 29, 33, 35, 81, 83], "whiten": [0, 27, 83], "whitener_": [27, 83], "whitnei": [53, 84, 85], "wic": [31, 83], "wiesel": [27, 83], "wilei": [31, 83], "willmor": [30, 83], "win": [26, 83], "window": [30, 37, 83], "with_cent": [67, 87], "with_mean": [68, 87], "with_scal": [67, 87], "with_std": [68, 87], "within": [18, 81], "without": [18, 28, 65, 81, 83, 87], "wolf": [27, 83], "word": [28, 62, 83, 86], "work": [14, 17, 81, 83, 85, 86, 87], "would": [14, 15, 16, 17, 29, 30, 33, 34, 56, 58, 59, 61, 62, 81, 83, 85, 86], "wrap": [26, 36, 83], "wrapper": [0, 26, 83, 84], "write": [18, 81], "written": [35, 83], "wrong": [34, 83], "wu": [26, 83], "x": [0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 73, 74, 81, 82, 83, 84, 85, 86, 87, 89], "x0": [32, 35, 83], "x1": [32, 35, 83], "x_": [28, 41, 68, 83, 84, 87], "x_i": [31, 33, 34, 35, 37, 38, 42, 43, 49, 68, 83, 84, 85, 87], "x_j": [42, 84], "x_k": [27, 83], "x_new": [18, 81], "x_train_": [35, 83], "y": [0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 73, 74, 81, 82, 83, 84, 85, 86, 87, 89], "y0": [17, 32, 35, 81, 83], "y1": [17, 32, 35, 81, 83], "y_": [41, 84], "y_h": [18, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 51, 81, 83, 84, 85], "y_i": [31, 32, 33, 34, 35, 37, 38, 42, 43, 49, 83, 84, 85], "y_j": [42, 84], "y_new": [18, 81], "y_score": [0, 53, 84, 85], "y_true": [0, 53, 84, 85], "yield": [35, 61, 62, 64, 83, 86], "you": [0, 14, 15, 16, 17, 25, 36, 56, 58, 59, 61, 62, 63, 66, 81, 83, 85, 86, 87], "your": [0, 14, 28, 29, 36, 50, 54, 55, 81, 83, 84, 85], "z": [18, 21, 24, 36, 65, 67, 81, 82, 83, 87], "zareamoghaddam": [29, 42, 83, 84], "zero": [28, 29, 62, 67, 83, 86, 87], "zip": 11, "\u00df": [18, 19, 22, 23, 25, 28, 30, 31, 33, 34, 37, 81, 82, 83], "\u03b3": [45, 46, 47, 84], "\u03c3": [0, 42, 48, 84]}, "titles": ["API Reference", "mvpy", "mvpy.crossvalidation", "mvpy.dataset", "mvpy.estimators", "mvpy.math", "mvpy.metrics", "mvpy.model_selection", "mvpy.preprocessing", "mvpy.signal", "mvpy.utilities", "Examples", "Computation times", "&lt;no title&gt;", "KFold", "RepeatedKFold", "RepeatedStratifiedKFold", "StratifiedKFold", "Validator", "cross_val_score", "make_meeg_categorical", "make_meeg_colours", "make_meeg_continuous", "make_meeg_discrete", "make_meeg_layout", "B2B", "Classifier", "Covariance", "KernelRidgeCV", "RSA", "ReceptiveField", "RidgeCV", "RidgeClassifier", "RidgeDecoder", "RidgeEncoder", "SVC", "Sliding", "TimeDelayed", "accuracy", "cosine", "cosine_d", "cv_euclidean", "cv_mahalanobis", "euclidean", "kernel_linear", "kernel_poly", "kernel_rbf", "kernel_sigmoid", "mahalanobis", "pearsonr", "pearsonr_d", "r2", "rank", "roc_auc", "spearmanr", "spearmanr_d", "Accuracy", "Metric", "R2", "Roc_auc", "score", "Hierarchical", "Shapley", "hierarchical_score", "shapley_score", "Clamp", "LabelBinariser", "RobustScaler", "Scaler", "hamming_window", "hann_window", "raised_cosine_window", "Progressbar", "numpy", "torch", "get_var", "is_enabled", "compare", "Computation times", "mvpy", "mvpy package", "mvpy.crossvalidation package", "mvpy.dataset package", "mvpy.estimators package", "mvpy.math package", "mvpy.metrics package", "mvpy.model_selection package", "mvpy.preprocessing package", "mvpy.signal package", "mvpy.utilities package"], "titleterms": {"accuraci": [38, 56, 84, 85], "api": 0, "b2b": [25, 83], "clamp": [65, 87], "classifi": [26, 83], "compar": 77, "compil": 89, "comput": [12, 78], "content": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "copi": 83, "cosin": [39, 84], "cosine_d": 40, "covari": [27, 83], "cross_val_scor": [19, 81], "crossvalid": [2, 81, 84], "csp": 83, "cv_euclidean": 41, "cv_mahalanobi": 42, "dataset": [3, 82], "env": 89, "estim": [4, 83], "euclidean": [43, 84], "exampl": 11, "get_var": 75, "hamming_window": 69, "hammingwindow": 88, "hann_window": 70, "hannwindow": 88, "hierarch": [61, 86], "hierarchical_scor": [63, 86], "is_en": 76, "kernel_linear": [44, 84], "kernel_poli": [45, 84], "kernel_rbf": [46, 84], "kernel_sigmoid": [47, 84], "kernelridgecv": [28, 83], "kfold": [14, 81], "labelbinaris": [66, 87], "mahalanobi": [48, 84], "make_meeg_categor": [20, 82], "make_meeg_colour": [21, 82], "make_meeg_continu": [22, 82], "make_meeg_discret": [23, 82], "make_meeg_layout": [24, 82], "math": [5, 84], "metric": [6, 57, 85], "model_select": [7, 86], "modul": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "mvpy": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "numpi": 73, "packag": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "pearsonr": [49, 84, 85], "pearsonr_d": 50, "preprocess": [8, 87], "progressbar": [72, 89], "r2": [51, 58, 84, 85], "raised_cosine_window": 71, "raisedcosinewindow": 88, "rank": [52, 84], "receptivefield": [30, 83], "refer": 0, "repeatedkfold": [15, 81], "repeatedstratifiedkfold": [16, 81], "ridgeclassifi": [32, 83], "ridgecv": [31, 83], "ridgedecod": [33, 83], "ridgeencod": [34, 83], "robustscal": [67, 87], "roc_auc": [53, 59, 84, 85], "rsa": [29, 83], "scaler": [68, 87], "score": [60, 85], "shaplei": [62, 86], "shapley_scor": [64, 86], "signal": [9, 88], "slide": [36, 83], "spearmanr": [54, 84, 85], "spearmanr_d": 55, "stratifiedkfold": [17, 81], "submodul": [81, 82, 83, 84, 85, 86, 87, 88, 89], "subpackag": 80, "svc": [35, 83], "time": [12, 78], "timedelai": [37, 83], "torch": 74, "util": [10, 89], "valid": [18, 81], "version": 89}})