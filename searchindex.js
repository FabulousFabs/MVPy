Search.setIndex({"alltitles": {"API Reference": [[0, null]], "Accuracy": [[55, null]], "B2B": [[24, null]], "Clamp": [[60, null]], "Classifier": [[25, null]], "Computation times": [[11, null], [73, null]], "Covariance": [[26, null]], "Examples": [[10, null]], "KFold": [[13, null]], "KernelRidgeCV": [[27, null]], "LabelBinariser": [[61, null]], "Metric": [[56, null]], "Module contents": [[75, "module-mvpy"], [76, "module-mvpy.crossvalidation"], [77, "module-mvpy.dataset"], [78, "module-mvpy.estimators"], [79, "module-mvpy.math"], [80, "module-mvpy.metrics"], [81, "module-mvpy.preprocessing"], [82, "module-mvpy.signal"], [83, "module-mvpy.utilities"]], "Progressbar": [[67, null]], "R2": [[57, null]], "RSA": [[28, null]], "ReceptiveField": [[29, null]], "RepeatedKFold": [[14, null]], "RepeatedStratifiedKFold": [[15, null]], "RidgeCV": [[30, null]], "RidgeClassifier": [[31, null]], "RidgeDecoder": [[32, null]], "RidgeEncoder": [[33, null]], "RobustScaler": [[62, null]], "Roc_auc": [[58, null]], "SVC": [[34, null]], "Scaler": [[63, null]], "Sliding": [[35, null]], "StratifiedKFold": [[16, null]], "Submodules": [[76, "submodules"], [77, "submodules"], [78, "submodules"], [79, "submodules"], [80, "submodules"], [81, "submodules"], [82, "submodules"], [83, "submodules"]], "Subpackages": [[75, "subpackages"]], "TimeDelayed": [[36, null]], "Validator": [[17, null]], "accuracy": [[37, null]], "compare": [[72, null]], "cosine": [[38, null]], "cosine_d": [[39, null]], "cross_val_score": [[18, null]], "cv_euclidean": [[40, null]], "cv_mahalanobis": [[41, null]], "euclidean": [[42, null]], "get_var": [[70, null]], "hamming_window": [[64, null]], "hann_window": [[65, null]], "is_enabled": [[71, null]], "kernel_linear": [[43, null]], "kernel_poly": [[44, null]], "kernel_rbf": [[45, null]], "kernel_sigmoid": [[46, null]], "mahalanobis": [[47, null]], "make_meeg_categorical": [[19, null]], "make_meeg_colours": [[20, null]], "make_meeg_continuous": [[21, null]], "make_meeg_discrete": [[22, null]], "make_meeg_layout": [[23, null]], "mvpy": [[1, null], [74, null]], "mvpy package": [[75, null]], "mvpy.crossvalidation": [[2, null]], "mvpy.crossvalidation package": [[76, null]], "mvpy.crossvalidation.cross_val_score module": [[76, "module-mvpy.crossvalidation.cross_val_score"]], "mvpy.crossvalidation.kfold module": [[76, "module-mvpy.crossvalidation.kfold"]], "mvpy.crossvalidation.repeatedkfold module": [[76, "module-mvpy.crossvalidation.repeatedkfold"]], "mvpy.crossvalidation.repeatedstratifiedkfold module": [[76, "module-mvpy.crossvalidation.repeatedstratifiedkfold"]], "mvpy.crossvalidation.stratifiedkfold module": [[76, "module-mvpy.crossvalidation.stratifiedkfold"]], "mvpy.crossvalidation.validator module": [[76, "module-mvpy.crossvalidation.validator"]], "mvpy.dataset": [[3, null]], "mvpy.dataset package": [[77, null]], "mvpy.dataset.make_meeg_categorical module": [[77, "module-mvpy.dataset.make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours module": [[77, "module-mvpy.dataset.make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous module": [[77, "module-mvpy.dataset.make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete module": [[77, "module-mvpy.dataset.make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout module": [[77, "module-mvpy.dataset.make_meeg_layout"]], "mvpy.estimators": [[4, null]], "mvpy.estimators package": [[78, null]], "mvpy.estimators.b2b module": [[78, "module-mvpy.estimators.b2b"]], "mvpy.estimators.classifier module": [[78, "module-mvpy.estimators.classifier"]], "mvpy.estimators.covariance module": [[78, "module-mvpy.estimators.covariance"]], "mvpy.estimators.csp copy module": [[78, "mvpy-estimators-csp-copy-module"]], "mvpy.estimators.csp module": [[78, "module-mvpy.estimators.csp"]], "mvpy.estimators.kernelridgecv module": [[78, "module-mvpy.estimators.kernelridgecv"]], "mvpy.estimators.receptivefield module": [[78, "module-mvpy.estimators.receptivefield"]], "mvpy.estimators.ridgeclassifier module": [[78, "module-mvpy.estimators.ridgeclassifier"]], "mvpy.estimators.ridgecv module": [[78, "module-mvpy.estimators.ridgecv"]], "mvpy.estimators.ridgedecoder module": [[78, "module-mvpy.estimators.ridgedecoder"]], "mvpy.estimators.ridgeencoder module": [[78, "module-mvpy.estimators.ridgeencoder"]], "mvpy.estimators.rsa module": [[78, "module-mvpy.estimators.rsa"]], "mvpy.estimators.sliding module": [[78, "module-mvpy.estimators.sliding"]], "mvpy.estimators.svc module": [[78, "module-mvpy.estimators.svc"]], "mvpy.estimators.timedelayed module": [[78, "module-mvpy.estimators.timedelayed"]], "mvpy.math": [[5, null]], "mvpy.math package": [[79, null]], "mvpy.math.accuracy module": [[79, "module-mvpy.math.accuracy"]], "mvpy.math.cosine module": [[79, "module-mvpy.math.cosine"]], "mvpy.math.crossvalidated module": [[79, "module-mvpy.math.crossvalidated"]], "mvpy.math.euclidean module": [[79, "module-mvpy.math.euclidean"]], "mvpy.math.kernel_linear module": [[79, "module-mvpy.math.kernel_linear"]], "mvpy.math.kernel_poly module": [[79, "module-mvpy.math.kernel_poly"]], "mvpy.math.kernel_rbf module": [[79, "module-mvpy.math.kernel_rbf"]], "mvpy.math.kernel_sigmoid module": [[79, "module-mvpy.math.kernel_sigmoid"]], "mvpy.math.mahalanobis module": [[79, "module-mvpy.math.mahalanobis"]], "mvpy.math.pearsonr module": [[79, "module-mvpy.math.pearsonr"]], "mvpy.math.r2 module": [[79, "module-mvpy.math.r2"]], "mvpy.math.rank module": [[79, "module-mvpy.math.rank"]], "mvpy.math.roc_auc module": [[79, "module-mvpy.math.roc_auc"]], "mvpy.math.spearmanr module": [[79, "module-mvpy.math.spearmanr"]], "mvpy.metrics": [[6, null]], "mvpy.metrics package": [[80, null]], "mvpy.metrics.accuracy module": [[80, "module-mvpy.metrics.accuracy"]], "mvpy.metrics.metric module": [[80, "module-mvpy.metrics.metric"]], "mvpy.metrics.pearsonr module": [[80, "module-mvpy.metrics.pearsonr"]], "mvpy.metrics.r2 module": [[80, "module-mvpy.metrics.r2"]], "mvpy.metrics.roc_auc module": [[80, "module-mvpy.metrics.roc_auc"]], "mvpy.metrics.score module": [[80, "module-mvpy.metrics.score"]], "mvpy.metrics.spearmanr module": [[80, "module-mvpy.metrics.spearmanr"]], "mvpy.preprocessing": [[7, null]], "mvpy.preprocessing package": [[81, null]], "mvpy.preprocessing.clamp module": [[81, "module-mvpy.preprocessing.clamp"]], "mvpy.preprocessing.labelbinariser module": [[81, "module-mvpy.preprocessing.labelbinariser"]], "mvpy.preprocessing.robustscaler module": [[81, "module-mvpy.preprocessing.robustscaler"]], "mvpy.preprocessing.scaler module": [[81, "module-mvpy.preprocessing.scaler"]], "mvpy.signal": [[8, null]], "mvpy.signal package": [[82, null]], "mvpy.signal.hammingwindow module": [[82, "module-mvpy.signal.hammingwindow"]], "mvpy.signal.hannwindow module": [[82, "module-mvpy.signal.hannwindow"]], "mvpy.signal.raisedcosinewindow module": [[82, "module-mvpy.signal.raisedcosinewindow"]], "mvpy.utilities": [[9, null]], "mvpy.utilities package": [[83, null]], "mvpy.utilities.compile module": [[83, "module-mvpy.utilities.compile"]], "mvpy.utilities.env module": [[83, "module-mvpy.utilities.env"]], "mvpy.utilities.progressbar module": [[83, "module-mvpy.utilities.progressbar"]], "mvpy.utilities.version module": [[83, "module-mvpy.utilities.version"]], "numpy": [[68, null]], "pearsonr": [[48, null]], "pearsonr_d": [[49, null]], "r2": [[50, null]], "raised_cosine_window": [[66, null]], "rank": [[51, null]], "roc_auc": [[52, null]], "score": [[59, null]], "spearmanr": [[53, null]], "spearmanr_d": [[54, null]], "torch": [[69, null]]}, "docnames": ["api/index", "api/mvpy", "api/mvpy.crossvalidation", "api/mvpy.dataset", "api/mvpy.estimators", "api/mvpy.math", "api/mvpy.metrics", "api/mvpy.preprocessing", "api/mvpy.signal", "api/mvpy.utilities", "auto_examples/index", "auto_examples/sg_execution_times", "index", "modules/generated/mvpy.crossvalidation.KFold", "modules/generated/mvpy.crossvalidation.RepeatedKFold", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold", "modules/generated/mvpy.crossvalidation.StratifiedKFold", "modules/generated/mvpy.crossvalidation.Validator", "modules/generated/mvpy.crossvalidation.cross_val_score", "modules/generated/mvpy.dataset.make_meeg_categorical", "modules/generated/mvpy.dataset.make_meeg_colours", "modules/generated/mvpy.dataset.make_meeg_continuous", "modules/generated/mvpy.dataset.make_meeg_discrete", "modules/generated/mvpy.dataset.make_meeg_layout", "modules/generated/mvpy.estimators.B2B", "modules/generated/mvpy.estimators.Classifier", "modules/generated/mvpy.estimators.Covariance", "modules/generated/mvpy.estimators.KernelRidgeCV", "modules/generated/mvpy.estimators.RSA", "modules/generated/mvpy.estimators.ReceptiveField", "modules/generated/mvpy.estimators.RidgeCV", "modules/generated/mvpy.estimators.RidgeClassifier", "modules/generated/mvpy.estimators.RidgeDecoder", "modules/generated/mvpy.estimators.RidgeEncoder", "modules/generated/mvpy.estimators.SVC", "modules/generated/mvpy.estimators.Sliding", "modules/generated/mvpy.estimators.TimeDelayed", "modules/generated/mvpy.math.accuracy", "modules/generated/mvpy.math.cosine", "modules/generated/mvpy.math.cosine_d", "modules/generated/mvpy.math.cv_euclidean", "modules/generated/mvpy.math.cv_mahalanobis", "modules/generated/mvpy.math.euclidean", "modules/generated/mvpy.math.kernel_linear", "modules/generated/mvpy.math.kernel_poly", "modules/generated/mvpy.math.kernel_rbf", "modules/generated/mvpy.math.kernel_sigmoid", "modules/generated/mvpy.math.mahalanobis", "modules/generated/mvpy.math.pearsonr", "modules/generated/mvpy.math.pearsonr_d", "modules/generated/mvpy.math.r2", "modules/generated/mvpy.math.rank", "modules/generated/mvpy.math.roc_auc", "modules/generated/mvpy.math.spearmanr", "modules/generated/mvpy.math.spearmanr_d", "modules/generated/mvpy.metrics.Accuracy", "modules/generated/mvpy.metrics.Metric", "modules/generated/mvpy.metrics.R2", "modules/generated/mvpy.metrics.Roc_auc", "modules/generated/mvpy.metrics.score", "modules/generated/mvpy.preprocessing.Clamp", "modules/generated/mvpy.preprocessing.LabelBinariser", "modules/generated/mvpy.preprocessing.RobustScaler", "modules/generated/mvpy.preprocessing.Scaler", "modules/generated/mvpy.signal.hamming_window", "modules/generated/mvpy.signal.hann_window", "modules/generated/mvpy.signal.raised_cosine_window", "modules/generated/mvpy.utilities.Progressbar", "modules/generated/mvpy.utilities.compile.numpy", "modules/generated/mvpy.utilities.compile.torch", "modules/generated/mvpy.utilities.env.get_var", "modules/generated/mvpy.utilities.env.is_enabled", "modules/generated/mvpy.utilities.version.compare", "sg_execution_times", "source/modules", "source/mvpy", "source/mvpy.crossvalidation", "source/mvpy.dataset", "source/mvpy.estimators", "source/mvpy.math", "source/mvpy.metrics", "source/mvpy.preprocessing", "source/mvpy.signal", "source/mvpy.utilities"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["api/index.rst", "api/mvpy.rst", "api/mvpy.crossvalidation.rst", "api/mvpy.dataset.rst", "api/mvpy.estimators.rst", "api/mvpy.math.rst", "api/mvpy.metrics.rst", "api/mvpy.preprocessing.rst", "api/mvpy.signal.rst", "api/mvpy.utilities.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "index.rst", "modules/generated/mvpy.crossvalidation.KFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedKFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold.rst", "modules/generated/mvpy.crossvalidation.StratifiedKFold.rst", "modules/generated/mvpy.crossvalidation.Validator.rst", "modules/generated/mvpy.crossvalidation.cross_val_score.rst", "modules/generated/mvpy.dataset.make_meeg_categorical.rst", "modules/generated/mvpy.dataset.make_meeg_colours.rst", "modules/generated/mvpy.dataset.make_meeg_continuous.rst", "modules/generated/mvpy.dataset.make_meeg_discrete.rst", "modules/generated/mvpy.dataset.make_meeg_layout.rst", "modules/generated/mvpy.estimators.B2B.rst", "modules/generated/mvpy.estimators.Classifier.rst", "modules/generated/mvpy.estimators.Covariance.rst", "modules/generated/mvpy.estimators.KernelRidgeCV.rst", "modules/generated/mvpy.estimators.RSA.rst", "modules/generated/mvpy.estimators.ReceptiveField.rst", "modules/generated/mvpy.estimators.RidgeCV.rst", "modules/generated/mvpy.estimators.RidgeClassifier.rst", "modules/generated/mvpy.estimators.RidgeDecoder.rst", "modules/generated/mvpy.estimators.RidgeEncoder.rst", "modules/generated/mvpy.estimators.SVC.rst", "modules/generated/mvpy.estimators.Sliding.rst", "modules/generated/mvpy.estimators.TimeDelayed.rst", "modules/generated/mvpy.math.accuracy.rst", "modules/generated/mvpy.math.cosine.rst", "modules/generated/mvpy.math.cosine_d.rst", "modules/generated/mvpy.math.cv_euclidean.rst", "modules/generated/mvpy.math.cv_mahalanobis.rst", "modules/generated/mvpy.math.euclidean.rst", "modules/generated/mvpy.math.kernel_linear.rst", "modules/generated/mvpy.math.kernel_poly.rst", "modules/generated/mvpy.math.kernel_rbf.rst", "modules/generated/mvpy.math.kernel_sigmoid.rst", "modules/generated/mvpy.math.mahalanobis.rst", "modules/generated/mvpy.math.pearsonr.rst", "modules/generated/mvpy.math.pearsonr_d.rst", "modules/generated/mvpy.math.r2.rst", "modules/generated/mvpy.math.rank.rst", "modules/generated/mvpy.math.roc_auc.rst", "modules/generated/mvpy.math.spearmanr.rst", "modules/generated/mvpy.math.spearmanr_d.rst", "modules/generated/mvpy.metrics.Accuracy.rst", "modules/generated/mvpy.metrics.Metric.rst", "modules/generated/mvpy.metrics.R2.rst", "modules/generated/mvpy.metrics.Roc_auc.rst", "modules/generated/mvpy.metrics.score.rst", "modules/generated/mvpy.preprocessing.Clamp.rst", "modules/generated/mvpy.preprocessing.LabelBinariser.rst", "modules/generated/mvpy.preprocessing.RobustScaler.rst", "modules/generated/mvpy.preprocessing.Scaler.rst", "modules/generated/mvpy.signal.hamming_window.rst", "modules/generated/mvpy.signal.hann_window.rst", "modules/generated/mvpy.signal.raised_cosine_window.rst", "modules/generated/mvpy.utilities.Progressbar.rst", "modules/generated/mvpy.utilities.compile.numpy.rst", "modules/generated/mvpy.utilities.compile.torch.rst", "modules/generated/mvpy.utilities.env.get_var.rst", "modules/generated/mvpy.utilities.env.is_enabled.rst", "modules/generated/mvpy.utilities.version.compare.rst", "sg_execution_times.rst", "source/modules.rst", "source/mvpy.rst", "source/mvpy.crossvalidation.rst", "source/mvpy.dataset.rst", "source/mvpy.estimators.rst", "source/mvpy.math.rst", "source/mvpy.metrics.rst", "source/mvpy.preprocessing.rst", "source/mvpy.signal.rst", "source/mvpy.utilities.rst"], "indexentries": {"__call__() (mvpy.metrics.metric method)": [[56, "mvpy.metrics.Metric.__call__", false]], "__call__() (mvpy.metrics.roc_auc method)": [[58, "mvpy.metrics.Roc_auc.__call__", false]], "accuracy (class in mvpy.metrics)": [[55, "mvpy.metrics.Accuracy", false]], "accuracy (class in mvpy.metrics.accuracy)": [[80, "mvpy.metrics.accuracy.Accuracy", false]], "accuracy() (in module mvpy.math)": [[37, "mvpy.math.accuracy", false]], "accuracy() (in module mvpy.math.accuracy)": [[79, "mvpy.math.accuracy.accuracy", false]], "b2b (class in mvpy.estimators)": [[24, "mvpy.estimators.B2B", false]], "b2b (class in mvpy.estimators.b2b)": [[78, "mvpy.estimators.b2b.B2B", false]], "call() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.call", false]], "call() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.call", false]], "clamp (class in mvpy.preprocessing)": [[60, "mvpy.preprocessing.Clamp", false]], "clamp (class in mvpy.preprocessing.clamp)": [[81, "mvpy.preprocessing.clamp.Clamp", false]], "classifier (class in mvpy.estimators)": [[25, "mvpy.estimators.Classifier", false]], "classifier (class in mvpy.estimators.classifier)": [[78, "mvpy.estimators.classifier.Classifier", false]], "clone() (mvpy.estimators.b2b method)": [[24, "mvpy.estimators.B2B.clone", false]], "clone() (mvpy.estimators.b2b.b2b method)": [[78, "mvpy.estimators.b2b.B2B.clone", false]], "clone() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.clone", false]], "clone() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.clone", false]], "clone() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.clone", false]], "clone() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.clone", false]], "clone() (mvpy.estimators.csp.csp method)": [[78, "mvpy.estimators.csp.CSP.clone", false]], "clone() (mvpy.estimators.kernelridgecv method)": [[27, "mvpy.estimators.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[78, "mvpy.estimators.kernelridgecv.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.receptivefield method)": [[29, "mvpy.estimators.ReceptiveField.clone", false]], "clone() (mvpy.estimators.receptivefield.receptivefield method)": [[78, "mvpy.estimators.receptivefield.ReceptiveField.clone", false]], "clone() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgecv method)": [[30, "mvpy.estimators.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgecv.ridgecv method)": [[78, "mvpy.estimators.ridgecv.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgedecoder method)": [[32, "mvpy.estimators.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[78, "mvpy.estimators.ridgedecoder.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder method)": [[33, "mvpy.estimators.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[78, "mvpy.estimators.ridgeencoder.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.clone", false]], "clone() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.clone", false]], "clone() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.clone", false]], "clone() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.clone", false]], "clone() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.clone", false]], "clone() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.clone", false]], "clone() (mvpy.estimators.timedelayed method)": [[36, "mvpy.estimators.TimeDelayed.clone", false]], "clone() (mvpy.estimators.timedelayed.timedelayed method)": [[78, "mvpy.estimators.timedelayed.TimeDelayed.clone", false]], "clone() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.clone", false]], "clone() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.clone", false]], "clone() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.clone", false]], "clone() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.clone", false]], "collect() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.collect", false]], "collect() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.collect", false]], "collect() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.collect", false]], "collect() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.collect", false]], "compare() (in module mvpy.utilities.version)": [[72, "mvpy.utilities.version.compare", false], [83, "mvpy.utilities.version.compare", false]], "copy() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.copy", false]], "copy() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.copy", false]], "copy() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.copy", false]], "copy() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.copy", false]], "copy() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.copy", false]], "copy() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.copy", false]], "copy() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.copy", false]], "cosine() (in module mvpy.math)": [[38, "mvpy.math.cosine", false]], "cosine() (in module mvpy.math.cosine)": [[79, "mvpy.math.cosine.cosine", false]], "cosine_d() (in module mvpy.math)": [[39, "mvpy.math.cosine_d", false]], "cosine_d() (in module mvpy.math.cosine)": [[79, "mvpy.math.cosine.cosine_d", false]], "covariance (class in mvpy.estimators)": [[26, "mvpy.estimators.Covariance", false]], "covariance (class in mvpy.estimators.covariance)": [[78, "mvpy.estimators.covariance.Covariance", false]], "cross_val_score() (in module mvpy.crossvalidation)": [[18, "mvpy.crossvalidation.cross_val_score", false]], "cross_val_score() (in module mvpy.crossvalidation.cross_val_score)": [[76, "mvpy.crossvalidation.cross_val_score.cross_val_score", false]], "csp (class in mvpy.estimators.csp)": [[78, "mvpy.estimators.csp.CSP", false]], "cv_euclidean() (in module mvpy.math)": [[40, "mvpy.math.cv_euclidean", false]], "cv_euclidean() (in module mvpy.math.crossvalidated)": [[79, "mvpy.math.crossvalidated.cv_euclidean", false]], "cv_mahalanobis() (in module mvpy.math)": [[41, "mvpy.math.cv_mahalanobis", false]], "cv_mahalanobis() (in module mvpy.math.crossvalidated)": [[79, "mvpy.math.crossvalidated.cv_mahalanobis", false]], "decision_function() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.decision_function", false]], "decision_function() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.decision_function", false]], "decision_function() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.decision_function", false]], "decision_function() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.decision_function", false]], "euclidean() (in module mvpy.math)": [[42, "mvpy.math.euclidean", false]], "euclidean() (in module mvpy.math.euclidean)": [[79, "mvpy.math.euclidean.euclidean", false]], "f() (mvpy.metrics.accuracy.accuracy method)": [[80, "mvpy.metrics.accuracy.Accuracy.f", false]], "f() (mvpy.metrics.metric.metric method)": [[80, "mvpy.metrics.metric.Metric.f", false]], "f() (mvpy.metrics.pearsonr.pearsonr method)": [[80, "mvpy.metrics.pearsonr.Pearsonr.f", false]], "f() (mvpy.metrics.r2.r2 method)": [[80, "mvpy.metrics.r2.R2.f", false]], "f() (mvpy.metrics.roc_auc.roc_auc method)": [[80, "mvpy.metrics.roc_auc.Roc_auc.f", false]], "f() (mvpy.metrics.spearmanr.spearmanr method)": [[80, "mvpy.metrics.spearmanr.Spearmanr.f", false]], "fit() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.fit", false]], "fit() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.fit", false]], "fit() (mvpy.estimators.b2b method)": [[24, "mvpy.estimators.B2B.fit", false]], "fit() (mvpy.estimators.b2b.b2b method)": [[78, "mvpy.estimators.b2b.B2B.fit", false]], "fit() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.fit", false]], "fit() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.fit", false]], "fit() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.fit", false]], "fit() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.fit", false]], "fit() (mvpy.estimators.csp.csp method)": [[78, "mvpy.estimators.csp.CSP.fit", false]], "fit() (mvpy.estimators.kernelridgecv method)": [[27, "mvpy.estimators.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[78, "mvpy.estimators.kernelridgecv.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.receptivefield method)": [[29, "mvpy.estimators.ReceptiveField.fit", false]], "fit() (mvpy.estimators.receptivefield.receptivefield method)": [[78, "mvpy.estimators.receptivefield.ReceptiveField.fit", false]], "fit() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgecv method)": [[30, "mvpy.estimators.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgecv.ridgecv method)": [[78, "mvpy.estimators.ridgecv.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgedecoder method)": [[32, "mvpy.estimators.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[78, "mvpy.estimators.ridgedecoder.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder method)": [[33, "mvpy.estimators.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[78, "mvpy.estimators.ridgeencoder.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.fit", false]], "fit() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.fit", false]], "fit() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.fit", false]], "fit() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.fit", false]], "fit() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.fit", false]], "fit() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.fit", false]], "fit() (mvpy.estimators.timedelayed method)": [[36, "mvpy.estimators.TimeDelayed.fit", false]], "fit() (mvpy.estimators.timedelayed.timedelayed method)": [[78, "mvpy.estimators.timedelayed.TimeDelayed.fit", false]], "fit() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.fit", false]], "fit() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.fit", false]], "fit() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.fit", false]], "fit() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.fit", false]], "fit_model_() (in module mvpy.crossvalidation.validator)": [[76, "mvpy.crossvalidation.validator.fit_model_", false]], "fit_transform() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.fit_transform", false]], "full_rdm() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.full_rdm", false]], "full_rdm() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.full_rdm", false]], "get_var() (in module mvpy.utilities.env)": [[70, "mvpy.utilities.env.get_var", false], [83, "mvpy.utilities.env.get_var", false]], "hamming_window() (in module mvpy.signal)": [[64, "mvpy.signal.hamming_window", false]], "hamming_window() (in module mvpy.signal.hammingwindow)": [[82, "mvpy.signal.hammingwindow.hamming_window", false]], "hann_window() (in module mvpy.signal)": [[65, "mvpy.signal.hann_window", false]], "hann_window() (in module mvpy.signal.hannwindow)": [[82, "mvpy.signal.hannwindow.hann_window", false]], "inverse_transform() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.inverse_transform", false]], "is_enabled() (in module mvpy.utilities.env)": [[71, "mvpy.utilities.env.is_enabled", false], [83, "mvpy.utilities.env.is_enabled", false]], "kernel_linear() (in module mvpy.math)": [[43, "mvpy.math.kernel_linear", false]], "kernel_linear() (in module mvpy.math.kernel_linear)": [[79, "mvpy.math.kernel_linear.kernel_linear", false]], "kernel_poly() (in module mvpy.math)": [[44, "mvpy.math.kernel_poly", false]], "kernel_poly() (in module mvpy.math.kernel_poly)": [[79, "mvpy.math.kernel_poly.kernel_poly", false]], "kernel_rbf() (in module mvpy.math)": [[45, "mvpy.math.kernel_rbf", false]], "kernel_rbf() (in module mvpy.math.kernel_rbf)": [[79, "mvpy.math.kernel_rbf.kernel_rbf", false]], "kernel_sigmoid() (in module mvpy.math)": [[46, "mvpy.math.kernel_sigmoid", false]], "kernel_sigmoid() (in module mvpy.math.kernel_sigmoid)": [[79, "mvpy.math.kernel_sigmoid.kernel_sigmoid", false]], "kernelridgecv (class in mvpy.estimators)": [[27, "mvpy.estimators.KernelRidgeCV", false]], "kernelridgecv (class in mvpy.estimators.kernelridgecv)": [[78, "mvpy.estimators.kernelridgecv.KernelRidgeCV", false]], "kfold (class in mvpy.crossvalidation)": [[13, "mvpy.crossvalidation.KFold", false]], "kfold (class in mvpy.crossvalidation.kfold)": [[76, "mvpy.crossvalidation.kfold.KFold", false]], "labelbinariser (class in mvpy.preprocessing)": [[61, "mvpy.preprocessing.LabelBinariser", false]], "labelbinariser (class in mvpy.preprocessing.labelbinariser)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser", false]], "loss() (in module mvpy.estimators.csp)": [[78, "mvpy.estimators.csp.loss", false]], "mahalanobis() (in module mvpy.math)": [[47, "mvpy.math.mahalanobis", false]], "mahalanobis() (in module mvpy.math.mahalanobis)": [[79, "mvpy.math.mahalanobis.mahalanobis", false]], "make_meeg_categorical() (in module mvpy.dataset)": [[19, "mvpy.dataset.make_meeg_categorical", false]], "make_meeg_categorical() (in module mvpy.dataset.make_meeg_categorical)": [[77, "mvpy.dataset.make_meeg_categorical.make_meeg_categorical", false]], "make_meeg_colours() (in module mvpy.dataset)": [[20, "mvpy.dataset.make_meeg_colours", false]], "make_meeg_colours() (in module mvpy.dataset.make_meeg_colours)": [[77, "mvpy.dataset.make_meeg_colours.make_meeg_colours", false]], "make_meeg_continuous() (in module mvpy.dataset)": [[21, "mvpy.dataset.make_meeg_continuous", false]], "make_meeg_continuous() (in module mvpy.dataset.make_meeg_continuous)": [[77, "mvpy.dataset.make_meeg_continuous.make_meeg_continuous", false]], "make_meeg_discrete() (in module mvpy.dataset)": [[22, "mvpy.dataset.make_meeg_discrete", false]], "make_meeg_discrete() (in module mvpy.dataset.make_meeg_discrete)": [[77, "mvpy.dataset.make_meeg_discrete.make_meeg_discrete", false]], "make_meeg_layout() (in module mvpy.dataset)": [[23, "mvpy.dataset.make_meeg_layout", false]], "make_meeg_layout() (in module mvpy.dataset.make_meeg_layout)": [[77, "mvpy.dataset.make_meeg_layout.make_meeg_layout", false]], "mean_rotation() (in module mvpy.estimators.csp)": [[78, "mvpy.estimators.csp.mean_rotation", false]], "metric (class in mvpy.metrics)": [[56, "mvpy.metrics.Metric", false]], "metric (class in mvpy.metrics.metric)": [[80, "mvpy.metrics.metric.Metric", false]], "module": [[1, "module-mvpy", false], [2, "module-mvpy.crossvalidation", false], [3, "module-mvpy.dataset", false], [4, "module-mvpy.estimators", false], [5, "module-mvpy.math", false], [6, "module-mvpy.metrics", false], [7, "module-mvpy.preprocessing", false], [8, "module-mvpy.signal", false], [9, "module-mvpy.utilities", false], [75, "module-mvpy", false], [76, "module-mvpy.crossvalidation", false], [76, "module-mvpy.crossvalidation.cross_val_score", false], [76, "module-mvpy.crossvalidation.kfold", false], [76, "module-mvpy.crossvalidation.repeatedkfold", false], [76, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false], [76, "module-mvpy.crossvalidation.stratifiedkfold", false], [76, "module-mvpy.crossvalidation.validator", false], [77, "module-mvpy.dataset", false], [77, "module-mvpy.dataset.make_meeg_categorical", false], [77, "module-mvpy.dataset.make_meeg_colours", false], [77, "module-mvpy.dataset.make_meeg_continuous", false], [77, "module-mvpy.dataset.make_meeg_discrete", false], [77, "module-mvpy.dataset.make_meeg_layout", false], [78, "module-mvpy.estimators", false], [78, "module-mvpy.estimators.b2b", false], [78, "module-mvpy.estimators.classifier", false], [78, "module-mvpy.estimators.covariance", false], [78, "module-mvpy.estimators.csp", false], [78, "module-mvpy.estimators.kernelridgecv", false], [78, "module-mvpy.estimators.receptivefield", false], [78, "module-mvpy.estimators.ridgeclassifier", false], [78, "module-mvpy.estimators.ridgecv", false], [78, "module-mvpy.estimators.ridgedecoder", false], [78, "module-mvpy.estimators.ridgeencoder", false], [78, "module-mvpy.estimators.rsa", false], [78, "module-mvpy.estimators.sliding", false], [78, "module-mvpy.estimators.svc", false], [78, "module-mvpy.estimators.timedelayed", false], [79, "module-mvpy.math", false], [79, "module-mvpy.math.accuracy", false], [79, "module-mvpy.math.cosine", false], [79, "module-mvpy.math.crossvalidated", false], [79, "module-mvpy.math.euclidean", false], [79, "module-mvpy.math.kernel_linear", false], [79, "module-mvpy.math.kernel_poly", false], [79, "module-mvpy.math.kernel_rbf", false], [79, "module-mvpy.math.kernel_sigmoid", false], [79, "module-mvpy.math.mahalanobis", false], [79, "module-mvpy.math.pearsonr", false], [79, "module-mvpy.math.r2", false], [79, "module-mvpy.math.rank", false], [79, "module-mvpy.math.roc_auc", false], [79, "module-mvpy.math.spearmanr", false], [80, "module-mvpy.metrics", false], [80, "module-mvpy.metrics.accuracy", false], [80, "module-mvpy.metrics.metric", false], [80, "module-mvpy.metrics.pearsonr", false], [80, "module-mvpy.metrics.r2", false], [80, "module-mvpy.metrics.roc_auc", false], [80, "module-mvpy.metrics.score", false], [80, "module-mvpy.metrics.spearmanr", false], [81, "module-mvpy.preprocessing", false], [81, "module-mvpy.preprocessing.clamp", false], [81, "module-mvpy.preprocessing.labelbinariser", false], [81, "module-mvpy.preprocessing.robustscaler", false], [81, "module-mvpy.preprocessing.scaler", false], [82, "module-mvpy.signal", false], [82, "module-mvpy.signal.hammingwindow", false], [82, "module-mvpy.signal.hannwindow", false], [82, "module-mvpy.signal.raisedcosinewindow", false], [83, "module-mvpy.utilities", false], [83, "module-mvpy.utilities.compile", false], [83, "module-mvpy.utilities.env", false], [83, "module-mvpy.utilities.progressbar", false], [83, "module-mvpy.utilities.version", false]], "mutate() (mvpy.metrics.metric method)": [[56, "mvpy.metrics.Metric.mutate", false]], "mutate() (mvpy.metrics.metric.metric method)": [[80, "mvpy.metrics.metric.Metric.mutate", false]], "mvpy": [[1, "module-mvpy", false], [75, "module-mvpy", false]], "mvpy.crossvalidation": [[2, "module-mvpy.crossvalidation", false], [76, "module-mvpy.crossvalidation", false]], "mvpy.crossvalidation.cross_val_score": [[76, "module-mvpy.crossvalidation.cross_val_score", false]], "mvpy.crossvalidation.kfold": [[76, "module-mvpy.crossvalidation.kfold", false]], "mvpy.crossvalidation.repeatedkfold": [[76, "module-mvpy.crossvalidation.repeatedkfold", false]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[76, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false]], "mvpy.crossvalidation.stratifiedkfold": [[76, "module-mvpy.crossvalidation.stratifiedkfold", false]], "mvpy.crossvalidation.validator": [[76, "module-mvpy.crossvalidation.validator", false]], "mvpy.dataset": [[3, "module-mvpy.dataset", false], [77, "module-mvpy.dataset", false]], "mvpy.dataset.make_meeg_categorical": [[77, "module-mvpy.dataset.make_meeg_categorical", false]], "mvpy.dataset.make_meeg_colours": [[77, "module-mvpy.dataset.make_meeg_colours", false]], "mvpy.dataset.make_meeg_continuous": [[77, "module-mvpy.dataset.make_meeg_continuous", false]], "mvpy.dataset.make_meeg_discrete": [[77, "module-mvpy.dataset.make_meeg_discrete", false]], "mvpy.dataset.make_meeg_layout": [[77, "module-mvpy.dataset.make_meeg_layout", false]], "mvpy.estimators": [[4, "module-mvpy.estimators", false], [78, "module-mvpy.estimators", false]], "mvpy.estimators.b2b": [[78, "module-mvpy.estimators.b2b", false]], "mvpy.estimators.classifier": [[78, "module-mvpy.estimators.classifier", false]], "mvpy.estimators.covariance": [[78, "module-mvpy.estimators.covariance", false]], "mvpy.estimators.csp": [[78, "module-mvpy.estimators.csp", false]], "mvpy.estimators.kernelridgecv": [[78, "module-mvpy.estimators.kernelridgecv", false]], "mvpy.estimators.receptivefield": [[78, "module-mvpy.estimators.receptivefield", false]], "mvpy.estimators.ridgeclassifier": [[78, "module-mvpy.estimators.ridgeclassifier", false]], "mvpy.estimators.ridgecv": [[78, "module-mvpy.estimators.ridgecv", false]], "mvpy.estimators.ridgedecoder": [[78, "module-mvpy.estimators.ridgedecoder", false]], "mvpy.estimators.ridgeencoder": [[78, "module-mvpy.estimators.ridgeencoder", false]], "mvpy.estimators.rsa": [[78, "module-mvpy.estimators.rsa", false]], "mvpy.estimators.sliding": [[78, "module-mvpy.estimators.sliding", false]], "mvpy.estimators.svc": [[78, "module-mvpy.estimators.svc", false]], "mvpy.estimators.timedelayed": [[78, "module-mvpy.estimators.timedelayed", false]], "mvpy.math": [[5, "module-mvpy.math", false], [79, "module-mvpy.math", false]], "mvpy.math.accuracy": [[79, "module-mvpy.math.accuracy", false]], "mvpy.math.cosine": [[79, "module-mvpy.math.cosine", false]], "mvpy.math.crossvalidated": [[79, "module-mvpy.math.crossvalidated", false]], "mvpy.math.euclidean": [[79, "module-mvpy.math.euclidean", false]], "mvpy.math.kernel_linear": [[79, "module-mvpy.math.kernel_linear", false]], "mvpy.math.kernel_poly": [[79, "module-mvpy.math.kernel_poly", false]], "mvpy.math.kernel_rbf": [[79, "module-mvpy.math.kernel_rbf", false]], "mvpy.math.kernel_sigmoid": [[79, "module-mvpy.math.kernel_sigmoid", false]], "mvpy.math.mahalanobis": [[79, "module-mvpy.math.mahalanobis", false]], "mvpy.math.pearsonr": [[79, "module-mvpy.math.pearsonr", false]], "mvpy.math.r2": [[79, "module-mvpy.math.r2", false]], "mvpy.math.rank": [[79, "module-mvpy.math.rank", false]], "mvpy.math.roc_auc": [[79, "module-mvpy.math.roc_auc", false]], "mvpy.math.spearmanr": [[79, "module-mvpy.math.spearmanr", false]], "mvpy.metrics": [[6, "module-mvpy.metrics", false], [80, "module-mvpy.metrics", false]], "mvpy.metrics.accuracy": [[80, "module-mvpy.metrics.accuracy", false]], "mvpy.metrics.metric": [[80, "module-mvpy.metrics.metric", false]], "mvpy.metrics.pearsonr": [[80, "module-mvpy.metrics.pearsonr", false]], "mvpy.metrics.r2": [[80, "module-mvpy.metrics.r2", false]], "mvpy.metrics.roc_auc": [[80, "module-mvpy.metrics.roc_auc", false]], "mvpy.metrics.score": [[80, "module-mvpy.metrics.score", false]], "mvpy.metrics.spearmanr": [[80, "module-mvpy.metrics.spearmanr", false]], "mvpy.preprocessing": [[7, "module-mvpy.preprocessing", false], [81, "module-mvpy.preprocessing", false]], "mvpy.preprocessing.clamp": [[81, "module-mvpy.preprocessing.clamp", false]], "mvpy.preprocessing.labelbinariser": [[81, "module-mvpy.preprocessing.labelbinariser", false]], "mvpy.preprocessing.robustscaler": [[81, "module-mvpy.preprocessing.robustscaler", false]], "mvpy.preprocessing.scaler": [[81, "module-mvpy.preprocessing.scaler", false]], "mvpy.signal": [[8, "module-mvpy.signal", false], [82, "module-mvpy.signal", false]], "mvpy.signal.hammingwindow": [[82, "module-mvpy.signal.hammingwindow", false]], "mvpy.signal.hannwindow": [[82, "module-mvpy.signal.hannwindow", false]], "mvpy.signal.raisedcosinewindow": [[82, "module-mvpy.signal.raisedcosinewindow", false]], "mvpy.utilities": [[9, "module-mvpy.utilities", false], [83, "module-mvpy.utilities", false]], "mvpy.utilities.compile": [[83, "module-mvpy.utilities.compile", false]], "mvpy.utilities.env": [[83, "module-mvpy.utilities.env", false]], "mvpy.utilities.progressbar": [[83, "module-mvpy.utilities.progressbar", false]], "mvpy.utilities.version": [[83, "module-mvpy.utilities.version", false]], "name (mvpy.metrics.accuracy.accuracy attribute)": [[80, "mvpy.metrics.accuracy.Accuracy.name", false]], "name (mvpy.metrics.metric.metric attribute)": [[80, "mvpy.metrics.metric.Metric.name", false]], "name (mvpy.metrics.pearsonr.pearsonr attribute)": [[80, "mvpy.metrics.pearsonr.Pearsonr.name", false]], "name (mvpy.metrics.r2.r2 attribute)": [[80, "mvpy.metrics.r2.R2.name", false]], "name (mvpy.metrics.roc_auc.roc_auc attribute)": [[80, "mvpy.metrics.roc_auc.Roc_auc.name", false]], "name (mvpy.metrics.spearmanr.spearmanr attribute)": [[80, "mvpy.metrics.spearmanr.Spearmanr.name", false]], "numpy() (in module mvpy.utilities.compile)": [[68, "mvpy.utilities.compile.numpy", false], [83, "mvpy.utilities.compile.numpy", false]], "pearsonr (class in mvpy.metrics.pearsonr)": [[80, "mvpy.metrics.pearsonr.Pearsonr", false]], "pearsonr() (in module mvpy.math)": [[48, "mvpy.math.pearsonr", false]], "pearsonr() (in module mvpy.math.pearsonr)": [[79, "mvpy.math.pearsonr.pearsonr", false]], "pearsonr_d() (in module mvpy.math)": [[49, "mvpy.math.pearsonr_d", false]], "pearsonr_d() (in module mvpy.math.pearsonr)": [[79, "mvpy.math.pearsonr.pearsonr_d", false]], "predict() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.predict", false]], "predict() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.predict", false]], "predict() (mvpy.estimators.b2b method)": [[24, "mvpy.estimators.B2B.predict", false]], "predict() (mvpy.estimators.b2b.b2b method)": [[78, "mvpy.estimators.b2b.B2B.predict", false]], "predict() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.predict", false]], "predict() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.predict", false]], "predict() (mvpy.estimators.csp.csp method)": [[78, "mvpy.estimators.csp.CSP.predict", false]], "predict() (mvpy.estimators.kernelridgecv method)": [[27, "mvpy.estimators.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[78, "mvpy.estimators.kernelridgecv.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.receptivefield method)": [[29, "mvpy.estimators.ReceptiveField.predict", false]], "predict() (mvpy.estimators.receptivefield.receptivefield method)": [[78, "mvpy.estimators.receptivefield.ReceptiveField.predict", false]], "predict() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgecv method)": [[30, "mvpy.estimators.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgecv.ridgecv method)": [[78, "mvpy.estimators.ridgecv.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgedecoder method)": [[32, "mvpy.estimators.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[78, "mvpy.estimators.ridgedecoder.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder method)": [[33, "mvpy.estimators.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[78, "mvpy.estimators.ridgeencoder.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.predict", false]], "predict() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.predict", false]], "predict() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.predict", false]], "predict() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.predict", false]], "predict() (mvpy.estimators.timedelayed method)": [[36, "mvpy.estimators.TimeDelayed.predict", false]], "predict() (mvpy.estimators.timedelayed.timedelayed method)": [[78, "mvpy.estimators.timedelayed.TimeDelayed.predict", false]], "predict_proba() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.predict_proba", false]], "predict_proba() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.predict_proba", false]], "predict_proba() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.predict_proba", false]], "predict_proba() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.predict_proba", false]], "progressbar (class in mvpy.utilities)": [[67, "mvpy.utilities.Progressbar", false]], "progressbar (class in mvpy.utilities.progressbar)": [[83, "mvpy.utilities.progressbar.Progressbar", false]], "r2 (class in mvpy.metrics)": [[57, "mvpy.metrics.R2", false]], "r2 (class in mvpy.metrics.r2)": [[80, "mvpy.metrics.r2.R2", false]], "r2() (in module mvpy.math)": [[50, "mvpy.math.r2", false]], "r2() (in module mvpy.math.r2)": [[79, "mvpy.math.r2.r2", false]], "raised_cosine_window() (in module mvpy.signal)": [[66, "mvpy.signal.raised_cosine_window", false]], "raised_cosine_window() (in module mvpy.signal.raisedcosinewindow)": [[82, "mvpy.signal.raisedcosinewindow.raised_cosine_window", false]], "rank() (in module mvpy.math)": [[51, "mvpy.math.rank", false]], "rank() (in module mvpy.math.rank)": [[79, "mvpy.math.rank.rank", false]], "receptivefield (class in mvpy.estimators)": [[29, "mvpy.estimators.ReceptiveField", false]], "receptivefield (class in mvpy.estimators.receptivefield)": [[78, "mvpy.estimators.receptivefield.ReceptiveField", false]], "reduce (mvpy.metrics.accuracy.accuracy attribute)": [[80, "mvpy.metrics.accuracy.Accuracy.reduce", false]], "reduce (mvpy.metrics.metric.metric attribute)": [[80, "mvpy.metrics.metric.Metric.reduce", false]], "reduce (mvpy.metrics.pearsonr.pearsonr attribute)": [[80, "mvpy.metrics.pearsonr.Pearsonr.reduce", false]], "reduce (mvpy.metrics.r2.r2 attribute)": [[80, "mvpy.metrics.r2.R2.reduce", false]], "reduce (mvpy.metrics.roc_auc.roc_auc attribute)": [[80, "mvpy.metrics.roc_auc.Roc_auc.reduce", false]], "reduce (mvpy.metrics.spearmanr.spearmanr attribute)": [[80, "mvpy.metrics.spearmanr.Spearmanr.reduce", false]], "reduce_() (in module mvpy.metrics.score)": [[80, "mvpy.metrics.score.reduce_", false]], "repeatedkfold (class in mvpy.crossvalidation)": [[14, "mvpy.crossvalidation.RepeatedKFold", false]], "repeatedkfold (class in mvpy.crossvalidation.repeatedkfold)": [[76, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation)": [[15, "mvpy.crossvalidation.RepeatedStratifiedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation.repeatedstratifiedkfold)": [[76, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold", false]], "request (mvpy.metrics.accuracy.accuracy attribute)": [[80, "mvpy.metrics.accuracy.Accuracy.request", false]], "request (mvpy.metrics.metric.metric attribute)": [[80, "mvpy.metrics.metric.Metric.request", false]], "request (mvpy.metrics.pearsonr.pearsonr attribute)": [[80, "mvpy.metrics.pearsonr.Pearsonr.request", false]], "request (mvpy.metrics.r2.r2 attribute)": [[80, "mvpy.metrics.r2.R2.request", false]], "request (mvpy.metrics.roc_auc.roc_auc attribute)": [[80, "mvpy.metrics.roc_auc.Roc_auc.request", false]], "request (mvpy.metrics.spearmanr.spearmanr attribute)": [[80, "mvpy.metrics.spearmanr.Spearmanr.request", false]], "ridgeclassifier (class in mvpy.estimators)": [[31, "mvpy.estimators.RidgeClassifier", false]], "ridgeclassifier (class in mvpy.estimators.ridgeclassifier)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier", false]], "ridgecv (class in mvpy.estimators)": [[30, "mvpy.estimators.RidgeCV", false]], "ridgecv (class in mvpy.estimators.ridgecv)": [[78, "mvpy.estimators.ridgecv.RidgeCV", false]], "ridgedecoder (class in mvpy.estimators)": [[32, "mvpy.estimators.RidgeDecoder", false]], "ridgedecoder (class in mvpy.estimators.ridgedecoder)": [[78, "mvpy.estimators.ridgedecoder.RidgeDecoder", false]], "ridgeencoder (class in mvpy.estimators)": [[33, "mvpy.estimators.RidgeEncoder", false]], "ridgeencoder (class in mvpy.estimators.ridgeencoder)": [[78, "mvpy.estimators.ridgeencoder.RidgeEncoder", false]], "robustscaler (class in mvpy.preprocessing)": [[62, "mvpy.preprocessing.RobustScaler", false]], "robustscaler (class in mvpy.preprocessing.robustscaler)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler", false]], "roc_auc (class in mvpy.metrics)": [[58, "mvpy.metrics.Roc_auc", false]], "roc_auc (class in mvpy.metrics.roc_auc)": [[80, "mvpy.metrics.roc_auc.Roc_auc", false]], "roc_auc() (in module mvpy.math)": [[52, "mvpy.math.roc_auc", false]], "roc_auc() (in module mvpy.math.roc_auc)": [[79, "mvpy.math.roc_auc.roc_auc", false]], "rotmat() (in module mvpy.estimators.csp)": [[78, "mvpy.estimators.csp.rotmat", false]], "rsa (class in mvpy.estimators)": [[28, "mvpy.estimators.RSA", false]], "rsa (class in mvpy.estimators.rsa)": [[78, "mvpy.estimators.rsa.RSA", false]], "scaler (class in mvpy.preprocessing)": [[63, "mvpy.preprocessing.Scaler", false]], "scaler (class in mvpy.preprocessing.scaler)": [[81, "mvpy.preprocessing.scaler.Scaler", false]], "score() (in module mvpy.metrics)": [[59, "mvpy.metrics.score", false]], "score() (in module mvpy.metrics.score)": [[80, "mvpy.metrics.score.score", false]], "score() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.score", false]], "score() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.score", false]], "score() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.score", false]], "score() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.score", false]], "score() (mvpy.estimators.kernelridgecv method)": [[27, "mvpy.estimators.KernelRidgeCV.score", false]], "score() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[78, "mvpy.estimators.kernelridgecv.KernelRidgeCV.score", false]], "score() (mvpy.estimators.receptivefield method)": [[29, "mvpy.estimators.ReceptiveField.score", false]], "score() (mvpy.estimators.receptivefield.receptivefield method)": [[78, "mvpy.estimators.receptivefield.ReceptiveField.score", false]], "score() (mvpy.estimators.ridgeclassifier method)": [[31, "mvpy.estimators.RidgeClassifier.score", false]], "score() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[78, "mvpy.estimators.ridgeclassifier.RidgeClassifier.score", false]], "score() (mvpy.estimators.ridgecv method)": [[30, "mvpy.estimators.RidgeCV.score", false]], "score() (mvpy.estimators.ridgecv.ridgecv method)": [[78, "mvpy.estimators.ridgecv.RidgeCV.score", false]], "score() (mvpy.estimators.ridgedecoder method)": [[32, "mvpy.estimators.RidgeDecoder.score", false]], "score() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[78, "mvpy.estimators.ridgedecoder.RidgeDecoder.score", false]], "score() (mvpy.estimators.ridgeencoder method)": [[33, "mvpy.estimators.RidgeEncoder.score", false]], "score() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[78, "mvpy.estimators.ridgeencoder.RidgeEncoder.score", false]], "score() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.score", false]], "score() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.score", false]], "score() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.score", false]], "score() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.score", false]], "score() (mvpy.estimators.timedelayed method)": [[36, "mvpy.estimators.TimeDelayed.score", false]], "score() (mvpy.estimators.timedelayed.timedelayed method)": [[78, "mvpy.estimators.timedelayed.TimeDelayed.score", false]], "sliding (class in mvpy.estimators)": [[35, "mvpy.estimators.Sliding", false]], "sliding (class in mvpy.estimators.sliding)": [[78, "mvpy.estimators.sliding.Sliding", false]], "spearmanr (class in mvpy.metrics.spearmanr)": [[80, "mvpy.metrics.spearmanr.Spearmanr", false]], "spearmanr() (in module mvpy.math)": [[53, "mvpy.math.spearmanr", false]], "spearmanr() (in module mvpy.math.spearmanr)": [[79, "mvpy.math.spearmanr.spearmanr", false]], "spearmanr_d() (in module mvpy.math)": [[54, "mvpy.math.spearmanr_d", false]], "spearmanr_d() (in module mvpy.math.spearmanr)": [[79, "mvpy.math.spearmanr.spearmanr_d", false]], "split() (mvpy.crossvalidation.kfold method)": [[13, "mvpy.crossvalidation.KFold.split", false]], "split() (mvpy.crossvalidation.kfold.kfold method)": [[76, "mvpy.crossvalidation.kfold.KFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold method)": [[14, "mvpy.crossvalidation.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[76, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[15, "mvpy.crossvalidation.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[76, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold method)": [[16, "mvpy.crossvalidation.StratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[76, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.split", false]], "stratifiedkfold (class in mvpy.crossvalidation)": [[16, "mvpy.crossvalidation.StratifiedKFold", false]], "stratifiedkfold (class in mvpy.crossvalidation.stratifiedkfold)": [[76, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold", false]], "svc (class in mvpy.estimators)": [[34, "mvpy.estimators.SVC", false]], "svc (class in mvpy.estimators.svc)": [[78, "mvpy.estimators.svc.SVC", false]], "timedelayed (class in mvpy.estimators)": [[36, "mvpy.estimators.TimeDelayed", false]], "timedelayed (class in mvpy.estimators.timedelayed)": [[78, "mvpy.estimators.timedelayed.TimeDelayed", false]], "to_numpy() (mvpy.crossvalidation.kfold method)": [[13, "mvpy.crossvalidation.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.kfold.kfold method)": [[76, "mvpy.crossvalidation.kfold.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold method)": [[14, "mvpy.crossvalidation.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[76, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[15, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[76, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold method)": [[16, "mvpy.crossvalidation.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[76, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.to_numpy", false]], "to_numpy() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.to_numpy", false]], "to_torch() (mvpy.crossvalidation.kfold method)": [[13, "mvpy.crossvalidation.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.kfold.kfold method)": [[76, "mvpy.crossvalidation.kfold.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold method)": [[14, "mvpy.crossvalidation.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[76, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[15, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[76, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold method)": [[16, "mvpy.crossvalidation.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[76, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.estimators.classifier method)": [[25, "mvpy.estimators.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.classifier.classifier method)": [[78, "mvpy.estimators.classifier.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.to_torch", false]], "to_torch() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.to_torch", false]], "to_torch() (mvpy.estimators.svc method)": [[34, "mvpy.estimators.SVC.to_torch", false]], "to_torch() (mvpy.estimators.svc.svc method)": [[78, "mvpy.estimators.svc.SVC.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.to_torch", false]], "torch() (in module mvpy.utilities.compile)": [[69, "mvpy.utilities.compile.torch", false], [83, "mvpy.utilities.compile.torch", false]], "tqdm_joblib() (in module mvpy.utilities.progressbar)": [[83, "mvpy.utilities.progressbar.tqdm_joblib", false]], "transform() (mvpy.crossvalidation.validator method)": [[17, "mvpy.crossvalidation.Validator.transform", false]], "transform() (mvpy.crossvalidation.validator.validator method)": [[76, "mvpy.crossvalidation.validator.Validator.transform", false]], "transform() (mvpy.estimators.covariance method)": [[26, "mvpy.estimators.Covariance.transform", false]], "transform() (mvpy.estimators.covariance.covariance method)": [[78, "mvpy.estimators.covariance.Covariance.transform", false]], "transform() (mvpy.estimators.rsa method)": [[28, "mvpy.estimators.RSA.transform", false]], "transform() (mvpy.estimators.rsa.rsa method)": [[78, "mvpy.estimators.rsa.RSA.transform", false]], "transform() (mvpy.estimators.sliding method)": [[35, "mvpy.estimators.Sliding.transform", false]], "transform() (mvpy.estimators.sliding.sliding method)": [[78, "mvpy.estimators.sliding.Sliding.transform", false]], "transform() (mvpy.preprocessing.clamp method)": [[60, "mvpy.preprocessing.Clamp.transform", false]], "transform() (mvpy.preprocessing.clamp.clamp method)": [[81, "mvpy.preprocessing.clamp.Clamp.transform", false]], "transform() (mvpy.preprocessing.labelbinariser method)": [[61, "mvpy.preprocessing.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[81, "mvpy.preprocessing.labelbinariser.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.robustscaler method)": [[62, "mvpy.preprocessing.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[81, "mvpy.preprocessing.robustscaler.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.scaler method)": [[63, "mvpy.preprocessing.Scaler.transform", false]], "transform() (mvpy.preprocessing.scaler.scaler method)": [[81, "mvpy.preprocessing.scaler.Scaler.transform", false]], "validator (class in mvpy.crossvalidation)": [[17, "mvpy.crossvalidation.Validator", false]], "validator (class in mvpy.crossvalidation.validator)": [[76, "mvpy.crossvalidation.validator.Validator", false]]}, "objects": {"": [[75, 0, 0, "-", "mvpy"]], "mvpy": [[76, 0, 0, "-", "crossvalidation"], [77, 0, 0, "-", "dataset"], [78, 0, 0, "-", "estimators"], [79, 0, 0, "-", "math"], [80, 0, 0, "-", "metrics"], [81, 0, 0, "-", "preprocessing"], [82, 0, 0, "-", "signal"], [83, 0, 0, "-", "utilities"]], "mvpy.crossvalidation": [[13, 1, 1, "", "KFold"], [14, 1, 1, "", "RepeatedKFold"], [15, 1, 1, "", "RepeatedStratifiedKFold"], [16, 1, 1, "", "StratifiedKFold"], [17, 1, 1, "", "Validator"], [76, 0, 0, "-", "cross_val_score"], [76, 0, 0, "-", "kfold"], [76, 0, 0, "-", "repeatedkfold"], [76, 0, 0, "-", "repeatedstratifiedkfold"], [76, 0, 0, "-", "stratifiedkfold"], [76, 0, 0, "-", "validator"]], "mvpy.crossvalidation.KFold": [[13, 2, 1, "", "split"], [13, 2, 1, "", "to_numpy"], [13, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedKFold": [[14, 2, 1, "", "split"], [14, 2, 1, "", "to_numpy"], [14, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedStratifiedKFold": [[15, 2, 1, "", "split"], [15, 2, 1, "", "to_numpy"], [15, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.StratifiedKFold": [[16, 2, 1, "", "split"], [16, 2, 1, "", "to_numpy"], [16, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.Validator": [[17, 2, 1, "", "call"], [17, 2, 1, "", "collect"], [17, 2, 1, "", "decision_function"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "transform"]], "mvpy.crossvalidation.cross_val_score": [[76, 3, 1, "", "cross_val_score"]], "mvpy.crossvalidation.kfold": [[76, 1, 1, "", "KFold"]], "mvpy.crossvalidation.kfold.KFold": [[76, 2, 1, "", "split"], [76, 2, 1, "", "to_numpy"], [76, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedkfold": [[76, 1, 1, "", "RepeatedKFold"]], "mvpy.crossvalidation.repeatedkfold.RepeatedKFold": [[76, 2, 1, "", "split"], [76, 2, 1, "", "to_numpy"], [76, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[76, 1, 1, "", "RepeatedStratifiedKFold"]], "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold": [[76, 2, 1, "", "split"], [76, 2, 1, "", "to_numpy"], [76, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.stratifiedkfold": [[76, 1, 1, "", "StratifiedKFold"]], "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold": [[76, 2, 1, "", "split"], [76, 2, 1, "", "to_numpy"], [76, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.validator": [[76, 1, 1, "", "Validator"], [76, 3, 1, "", "fit_model_"]], "mvpy.crossvalidation.validator.Validator": [[76, 2, 1, "", "call"], [76, 2, 1, "", "collect"], [76, 2, 1, "", "decision_function"], [76, 2, 1, "", "fit"], [76, 2, 1, "", "predict"], [76, 2, 1, "", "predict_proba"], [76, 2, 1, "", "score"], [76, 2, 1, "", "transform"]], "mvpy.dataset": [[77, 0, 0, "-", "make_meeg_categorical"], [77, 0, 0, "-", "make_meeg_colours"], [77, 0, 0, "-", "make_meeg_continuous"], [77, 0, 0, "-", "make_meeg_discrete"], [77, 0, 0, "-", "make_meeg_layout"]], "mvpy.dataset.make_meeg_categorical": [[77, 3, 1, "", "make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours": [[77, 3, 1, "", "make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous": [[77, 3, 1, "", "make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete": [[77, 3, 1, "", "make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout": [[77, 3, 1, "", "make_meeg_layout"]], "mvpy.estimators": [[24, 1, 1, "", "B2B"], [25, 1, 1, "", "Classifier"], [26, 1, 1, "", "Covariance"], [27, 1, 1, "", "KernelRidgeCV"], [28, 1, 1, "", "RSA"], [29, 1, 1, "", "ReceptiveField"], [30, 1, 1, "", "RidgeCV"], [31, 1, 1, "", "RidgeClassifier"], [32, 1, 1, "", "RidgeDecoder"], [33, 1, 1, "", "RidgeEncoder"], [34, 1, 1, "", "SVC"], [35, 1, 1, "", "Sliding"], [36, 1, 1, "", "TimeDelayed"], [78, 0, 0, "-", "b2b"], [78, 0, 0, "-", "classifier"], [78, 0, 0, "-", "covariance"], [78, 0, 0, "-", "csp"], [78, 0, 0, "-", "kernelridgecv"], [78, 0, 0, "-", "receptivefield"], [78, 0, 0, "-", "ridgeclassifier"], [78, 0, 0, "-", "ridgecv"], [78, 0, 0, "-", "ridgedecoder"], [78, 0, 0, "-", "ridgeencoder"], [78, 0, 0, "-", "rsa"], [78, 0, 0, "-", "sliding"], [78, 0, 0, "-", "svc"], [78, 0, 0, "-", "timedelayed"]], "mvpy.estimators.B2B": [[24, 2, 1, "", "clone"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "predict"]], "mvpy.estimators.Classifier": [[25, 2, 1, "", "clone"], [25, 2, 1, "", "copy"], [25, 2, 1, "", "decision_function"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "predict_proba"], [25, 2, 1, "", "score"], [25, 2, 1, "", "to_numpy"], [25, 2, 1, "", "to_torch"]], "mvpy.estimators.Covariance": [[26, 2, 1, "", "clone"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "fit_transform"], [26, 2, 1, "", "to_numpy"], [26, 2, 1, "", "to_torch"], [26, 2, 1, "", "transform"]], "mvpy.estimators.KernelRidgeCV": [[27, 2, 1, "", "clone"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "score"]], "mvpy.estimators.RSA": [[28, 2, 1, "", "clone"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "fit_transform"], [28, 2, 1, "", "full_rdm"], [28, 2, 1, "", "to_numpy"], [28, 2, 1, "", "to_torch"], [28, 2, 1, "", "transform"]], "mvpy.estimators.ReceptiveField": [[29, 2, 1, "", "clone"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "score"]], "mvpy.estimators.RidgeCV": [[30, 2, 1, "", "clone"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "score"]], "mvpy.estimators.RidgeClassifier": [[31, 2, 1, "", "clone"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "decision_function"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "score"]], "mvpy.estimators.RidgeDecoder": [[32, 2, 1, "", "clone"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "score"]], "mvpy.estimators.RidgeEncoder": [[33, 2, 1, "", "clone"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "score"]], "mvpy.estimators.SVC": [[34, 2, 1, "", "clone"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "decision_function"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "predict_proba"], [34, 2, 1, "", "score"], [34, 2, 1, "", "to_numpy"], [34, 2, 1, "", "to_torch"]], "mvpy.estimators.Sliding": [[35, 2, 1, "", "clone"], [35, 2, 1, "", "collect"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "fit_transform"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_proba"], [35, 2, 1, "", "score"], [35, 2, 1, "", "transform"]], "mvpy.estimators.TimeDelayed": [[36, 2, 1, "", "clone"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "score"]], "mvpy.estimators.b2b": [[78, 1, 1, "", "B2B"]], "mvpy.estimators.b2b.B2B": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"]], "mvpy.estimators.classifier": [[78, 1, 1, "", "Classifier"]], "mvpy.estimators.classifier.Classifier": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "copy"], [78, 2, 1, "", "decision_function"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "score"], [78, 2, 1, "", "to_numpy"], [78, 2, 1, "", "to_torch"]], "mvpy.estimators.covariance": [[78, 1, 1, "", "Covariance"]], "mvpy.estimators.covariance.Covariance": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "fit_transform"], [78, 2, 1, "", "to_numpy"], [78, 2, 1, "", "to_torch"], [78, 2, 1, "", "transform"]], "mvpy.estimators.csp": [[78, 1, 1, "", "CSP"], [78, 3, 1, "", "loss"], [78, 3, 1, "", "mean_rotation"], [78, 3, 1, "", "rotmat"]], "mvpy.estimators.csp.CSP": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"]], "mvpy.estimators.kernelridgecv": [[78, 1, 1, "", "KernelRidgeCV"]], "mvpy.estimators.kernelridgecv.KernelRidgeCV": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.estimators.receptivefield": [[78, 1, 1, "", "ReceptiveField"]], "mvpy.estimators.receptivefield.ReceptiveField": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.estimators.ridgeclassifier": [[78, 1, 1, "", "RidgeClassifier"]], "mvpy.estimators.ridgeclassifier.RidgeClassifier": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "copy"], [78, 2, 1, "", "decision_function"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "score"]], "mvpy.estimators.ridgecv": [[78, 1, 1, "", "RidgeCV"]], "mvpy.estimators.ridgecv.RidgeCV": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.estimators.ridgedecoder": [[78, 1, 1, "", "RidgeDecoder"]], "mvpy.estimators.ridgedecoder.RidgeDecoder": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.estimators.ridgeencoder": [[78, 1, 1, "", "RidgeEncoder"]], "mvpy.estimators.ridgeencoder.RidgeEncoder": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.estimators.rsa": [[78, 1, 1, "", "RSA"]], "mvpy.estimators.rsa.RSA": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "fit_transform"], [78, 2, 1, "", "full_rdm"], [78, 2, 1, "", "to_numpy"], [78, 2, 1, "", "to_torch"], [78, 2, 1, "", "transform"]], "mvpy.estimators.sliding": [[78, 1, 1, "", "Sliding"]], "mvpy.estimators.sliding.Sliding": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "collect"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "fit_transform"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "score"], [78, 2, 1, "", "transform"]], "mvpy.estimators.svc": [[78, 1, 1, "", "SVC"]], "mvpy.estimators.svc.SVC": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "copy"], [78, 2, 1, "", "decision_function"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "score"], [78, 2, 1, "", "to_numpy"], [78, 2, 1, "", "to_torch"]], "mvpy.estimators.timedelayed": [[78, 1, 1, "", "TimeDelayed"]], "mvpy.estimators.timedelayed.TimeDelayed": [[78, 2, 1, "", "clone"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "score"]], "mvpy.math": [[79, 0, 0, "-", "accuracy"], [79, 0, 0, "-", "cosine"], [39, 3, 1, "", "cosine_d"], [79, 0, 0, "-", "crossvalidated"], [40, 3, 1, "", "cv_euclidean"], [41, 3, 1, "", "cv_mahalanobis"], [79, 0, 0, "-", "euclidean"], [79, 0, 0, "-", "kernel_linear"], [79, 0, 0, "-", "kernel_poly"], [79, 0, 0, "-", "kernel_rbf"], [79, 0, 0, "-", "kernel_sigmoid"], [79, 0, 0, "-", "mahalanobis"], [79, 0, 0, "-", "pearsonr"], [49, 3, 1, "", "pearsonr_d"], [79, 0, 0, "-", "r2"], [79, 0, 0, "-", "rank"], [79, 0, 0, "-", "roc_auc"], [79, 0, 0, "-", "spearmanr"], [54, 3, 1, "", "spearmanr_d"]], "mvpy.math.accuracy": [[79, 3, 1, "", "accuracy"]], "mvpy.math.cosine": [[79, 3, 1, "", "cosine"], [79, 3, 1, "", "cosine_d"]], "mvpy.math.crossvalidated": [[79, 3, 1, "", "cv_euclidean"], [79, 3, 1, "", "cv_mahalanobis"]], "mvpy.math.euclidean": [[79, 3, 1, "", "euclidean"]], "mvpy.math.kernel_linear": [[79, 3, 1, "", "kernel_linear"]], "mvpy.math.kernel_poly": [[79, 3, 1, "", "kernel_poly"]], "mvpy.math.kernel_rbf": [[79, 3, 1, "", "kernel_rbf"]], "mvpy.math.kernel_sigmoid": [[79, 3, 1, "", "kernel_sigmoid"]], "mvpy.math.mahalanobis": [[79, 3, 1, "", "mahalanobis"]], "mvpy.math.pearsonr": [[79, 3, 1, "", "pearsonr"], [79, 3, 1, "", "pearsonr_d"]], "mvpy.math.r2": [[79, 3, 1, "", "r2"]], "mvpy.math.rank": [[79, 3, 1, "", "rank"]], "mvpy.math.roc_auc": [[79, 3, 1, "", "roc_auc"]], "mvpy.math.spearmanr": [[79, 3, 1, "", "spearmanr"], [79, 3, 1, "", "spearmanr_d"]], "mvpy.metrics": [[55, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Metric"], [57, 1, 1, "", "R2"], [58, 1, 1, "", "Roc_auc"], [80, 0, 0, "-", "accuracy"], [80, 0, 0, "-", "metric"], [80, 0, 0, "-", "pearsonr"], [80, 0, 0, "-", "r2"], [80, 0, 0, "-", "roc_auc"], [80, 0, 0, "-", "score"], [80, 0, 0, "-", "spearmanr"]], "mvpy.metrics.Metric": [[56, 2, 1, "", "__call__"], [56, 2, 1, "", "mutate"]], "mvpy.metrics.Roc_auc": [[58, 2, 1, "", "__call__"]], "mvpy.metrics.accuracy": [[80, 1, 1, "", "Accuracy"]], "mvpy.metrics.accuracy.Accuracy": [[80, 2, 1, "", "f"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.metrics.metric": [[80, 1, 1, "", "Metric"]], "mvpy.metrics.metric.Metric": [[80, 2, 1, "", "f"], [80, 2, 1, "", "mutate"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.metrics.pearsonr": [[80, 1, 1, "", "Pearsonr"]], "mvpy.metrics.pearsonr.Pearsonr": [[80, 2, 1, "", "f"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.metrics.r2": [[80, 1, 1, "", "R2"]], "mvpy.metrics.r2.R2": [[80, 2, 1, "", "f"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.metrics.roc_auc": [[80, 1, 1, "", "Roc_auc"]], "mvpy.metrics.roc_auc.Roc_auc": [[80, 2, 1, "", "f"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.metrics.score": [[80, 3, 1, "", "reduce_"], [80, 3, 1, "", "score"]], "mvpy.metrics.spearmanr": [[80, 1, 1, "", "Spearmanr"]], "mvpy.metrics.spearmanr.Spearmanr": [[80, 2, 1, "", "f"], [80, 4, 1, "", "name"], [80, 4, 1, "", "reduce"], [80, 4, 1, "", "request"]], "mvpy.preprocessing": [[60, 1, 1, "", "Clamp"], [61, 1, 1, "", "LabelBinariser"], [62, 1, 1, "", "RobustScaler"], [63, 1, 1, "", "Scaler"], [81, 0, 0, "-", "clamp"], [81, 0, 0, "-", "labelbinariser"], [81, 0, 0, "-", "robustscaler"], [81, 0, 0, "-", "scaler"]], "mvpy.preprocessing.Clamp": [[60, 2, 1, "", "clone"], [60, 2, 1, "", "copy"], [60, 2, 1, "", "fit"], [60, 2, 1, "", "fit_transform"], [60, 2, 1, "", "inverse_transform"], [60, 2, 1, "", "to_numpy"], [60, 2, 1, "", "to_torch"], [60, 2, 1, "", "transform"]], "mvpy.preprocessing.LabelBinariser": [[61, 2, 1, "", "clone"], [61, 2, 1, "", "copy"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "fit_transform"], [61, 2, 1, "", "inverse_transform"], [61, 2, 1, "", "to_numpy"], [61, 2, 1, "", "to_torch"], [61, 2, 1, "", "transform"]], "mvpy.preprocessing.RobustScaler": [[62, 2, 1, "", "clone"], [62, 2, 1, "", "copy"], [62, 2, 1, "", "fit"], [62, 2, 1, "", "fit_transform"], [62, 2, 1, "", "inverse_transform"], [62, 2, 1, "", "to_numpy"], [62, 2, 1, "", "to_torch"], [62, 2, 1, "", "transform"]], "mvpy.preprocessing.Scaler": [[63, 2, 1, "", "clone"], [63, 2, 1, "", "copy"], [63, 2, 1, "", "fit"], [63, 2, 1, "", "fit_transform"], [63, 2, 1, "", "inverse_transform"], [63, 2, 1, "", "to_numpy"], [63, 2, 1, "", "to_torch"], [63, 2, 1, "", "transform"]], "mvpy.preprocessing.clamp": [[81, 1, 1, "", "Clamp"]], "mvpy.preprocessing.clamp.Clamp": [[81, 2, 1, "", "clone"], [81, 2, 1, "", "copy"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "fit_transform"], [81, 2, 1, "", "inverse_transform"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"], [81, 2, 1, "", "transform"]], "mvpy.preprocessing.labelbinariser": [[81, 1, 1, "", "LabelBinariser"]], "mvpy.preprocessing.labelbinariser.LabelBinariser": [[81, 2, 1, "", "clone"], [81, 2, 1, "", "copy"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "fit_transform"], [81, 2, 1, "", "inverse_transform"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"], [81, 2, 1, "", "transform"]], "mvpy.preprocessing.robustscaler": [[81, 1, 1, "", "RobustScaler"]], "mvpy.preprocessing.robustscaler.RobustScaler": [[81, 2, 1, "", "clone"], [81, 2, 1, "", "copy"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "fit_transform"], [81, 2, 1, "", "inverse_transform"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"], [81, 2, 1, "", "transform"]], "mvpy.preprocessing.scaler": [[81, 1, 1, "", "Scaler"]], "mvpy.preprocessing.scaler.Scaler": [[81, 2, 1, "", "clone"], [81, 2, 1, "", "copy"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "fit_transform"], [81, 2, 1, "", "inverse_transform"], [81, 2, 1, "", "to_numpy"], [81, 2, 1, "", "to_torch"], [81, 2, 1, "", "transform"]], "mvpy.signal": [[64, 3, 1, "", "hamming_window"], [82, 0, 0, "-", "hammingwindow"], [65, 3, 1, "", "hann_window"], [82, 0, 0, "-", "hannwindow"], [66, 3, 1, "", "raised_cosine_window"], [82, 0, 0, "-", "raisedcosinewindow"]], "mvpy.signal.hammingwindow": [[82, 3, 1, "", "hamming_window"]], "mvpy.signal.hannwindow": [[82, 3, 1, "", "hann_window"]], "mvpy.signal.raisedcosinewindow": [[82, 3, 1, "", "raised_cosine_window"]], "mvpy.utilities": [[67, 1, 1, "", "Progressbar"], [83, 0, 0, "-", "compile"], [83, 0, 0, "-", "env"], [83, 0, 0, "-", "progressbar"], [83, 0, 0, "-", "version"]], "mvpy.utilities.compile": [[83, 3, 1, "", "numpy"], [83, 3, 1, "", "torch"]], "mvpy.utilities.env": [[83, 3, 1, "", "get_var"], [83, 3, 1, "", "is_enabled"]], "mvpy.utilities.progressbar": [[83, 1, 1, "", "Progressbar"], [83, 3, 1, "", "tqdm_joblib"]], "mvpy.utilities.version": [[83, 3, 1, "", "compare"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "terms": {"": [13, 16, 19, 21, 22, 24, 26, 28, 29, 31, 32, 33, 34, 36, 41, 55, 57, 58, 61, 68, 69, 76, 77, 78, 79, 80, 81, 83], "0": [11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 73, 76, 77, 78, 79, 80, 81], "00": [11, 73], "000": [11, 34, 73, 78], "0000": [51, 60, 63, 79, 81], "00096": [26, 78], "001": [22, 34, 77, 78], "004": [28, 78], "0055": [29, 78], "0060": [24, 78], "00604": [29, 36, 78], "00809": [26, 78], "0085": [36, 78], "012": [40, 79], "01371": [28, 41, 78, 79], "0165": [60, 81], "0251": [29, 78], "0297": [29, 78], "03": [26, 78], "0325": [29, 78], "0347": [36, 78], "05": [60, 81], "0591": [60, 81], "06": [28, 78], "067": [24, 29, 31, 32, 34, 36, 78], "0678": [29, 78], "0728": [36, 78], "0827": [29, 78], "0828": [36, 78], "0847": [29, 78], "09": [60, 81], "0907": [26, 78], "0924": [29, 78], "0954": [29, 78], "1": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 63, 76, 77, 78, 79, 80, 81], "10": [13, 15, 16, 17, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 40, 41, 42, 47, 60, 61, 62, 63, 76, 78, 79, 81], "100": [17, 18, 24, 26, 28, 29, 30, 32, 33, 35, 36, 40, 41, 61, 76, 78, 79, 81], "1000": [34, 60, 62, 63, 78, 81], "1002": [30, 78], "1005508": [28, 78], "1007": [34, 78], "1016": [24, 26, 29, 31, 32, 34, 36, 40, 78, 79], "1058": [62, 81], "1080": [29, 78], "1088": [29, 78], "11": [29, 36, 61, 78, 81], "110": [24, 29, 31, 32, 34, 36, 78], "1109020": [27, 78], "1136": 78, "1137": [27, 78], "1152": 78, "117028": [24, 78], "12": [15, 16, 19, 29, 30, 34, 36, 40, 61, 76, 77, 78, 79, 81], "120": [19, 21, 22, 77], "1274": [63, 81], "13": [15, 28, 29, 36, 61, 76, 78, 81], "137": [40, 79], "1371": [28, 78], "14": [29, 30, 36, 78], "1400": [36, 78], "141": [27, 78], "1410": [29, 78], "142": [27, 78], "1452": [36, 78], "1481": [62, 81], "15": [16, 29, 36, 76, 78], "1512": [26, 78], "1548": [29, 78], "16": [29, 36, 78], "1607": [28, 41, 78, 79], "17": [29, 36, 78], "1793": [36, 78], "18": [29, 36, 78], "188": [40, 79], "19": [29, 36, 78], "1964": [27, 78], "1e": [17, 18, 22, 29, 34, 36, 60, 76, 77, 78, 81], "1e3": [60, 62, 81], "2": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 41, 42, 45, 48, 49, 50, 51, 52, 60, 61, 62, 76, 77, 78, 79, 80, 81], "20": [15, 16, 26, 29, 31, 32, 35, 36, 61, 76, 78, 81], "200": [19, 21, 22, 40, 77, 79], "2001": [29, 78], "2004": [26, 78], "2008": [28, 78], "2009": [26, 29, 30, 78], "2011": [30, 78], "2012": [27, 78], "2013": [24, 29, 31, 32, 34, 36, 63, 78, 81], "2014": [24, 29, 31, 32, 34, 36, 78], "2015": [34, 40, 78, 79], "2016": [26, 28, 29, 36, 40, 41, 78, 79], "2017": [28, 78], "2020": [24, 30, 78], "2047": [36, 78], "2070": [60, 81], "21": [29, 36, 61, 78, 81], "2115": [29, 78], "2148": [29, 78], "22": [29, 36, 61, 78, 81], "220": [24, 78], "2251": [36, 78], "23": [29, 36, 78], "2332": [36, 78], "24": [29, 36, 78], "240": [27, 30, 33, 35, 78], "2483": [63, 81], "25": [15, 16, 19, 21, 22, 29, 60, 62, 76, 77, 78, 81], "250": [19, 21, 22, 77], "2510": [63, 81], "2549": [36, 78], "259x": [26, 78], "26": [29, 36, 78], "27": [29, 36, 78], "2717": [36, 78], "28": [29, 36, 78], "2825": [30, 78], "2830": [30, 78], "2861": [29, 78], "289": [29, 78], "29": [29, 36, 78], "2945": [36, 78], "2d": [43, 44, 45, 46, 79], "3": [13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 27, 28, 29, 30, 31, 34, 35, 36, 48, 49, 50, 60, 61, 76, 77, 78, 79, 80, 81], "30": [29, 36, 78], "31": [29, 36, 78], "316": [29, 78], "32": [16, 29, 36, 62, 76, 78, 81], "33": [29, 36, 78], "3389": [28, 29, 36, 78], "34": [29, 36, 78], "343": 83, "3440": [36, 78], "3491": [36, 78], "35": [36, 78], "3544": [36, 78], "3591": [36, 78], "36": [16, 29, 36, 76, 78], "365": [26, 78], "3683": [36, 78], "37": [29, 36, 78], "38": [29, 36, 78], "3800": [36, 78], "3817": [36, 78], "39": [29, 34, 36, 78], "3925": [29, 78], "3962": [36, 78], "4": [13, 14, 16, 19, 21, 22, 26, 29, 31, 34, 35, 36, 48, 51, 76, 77, 78, 79, 80], "40": [15, 16, 29, 36, 76, 78], "400": [17, 19, 21, 22, 76, 77], "4021": [29, 78], "4022": [29, 78], "4097": [36, 78], "41": [29, 36, 78], "411": [26, 78], "42": [13, 29, 36, 76, 78], "43": [29, 36, 78], "4302": [34, 78], "44": [29, 36, 78], "4418": [36, 78], "4449": [36, 78], "4454": [36, 78], "4470": [24, 78], "4489": [36, 78], "45": [16, 29, 36, 76, 78], "4594": [24, 78], "46": [36, 78], "4690": [29, 78], "4698": [26, 78], "47": [36, 78], "4741": [29, 78], "4759": [29, 78], "48": [36, 78], "4854": [36, 78], "48550": [26, 28, 41, 78, 79], "4915": [29, 78], "4950": [28, 78], "4965": [36, 78], "4978": [36, 78], "5": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 48, 51, 53, 54, 60, 61, 62, 63, 76, 77, 78, 79, 80, 81], "50": [17, 18, 19, 21, 22, 28, 29, 33, 36, 41, 42, 47, 53, 54, 61, 76, 77, 78, 79, 80, 81], "500": [60, 62, 81], "5000": [51, 79], "5046": [29, 78], "5186": [29, 78], "5206": [36, 78], "5346": [36, 78], "5374": [36, 78], "5378": [60, 81], "553": [29, 78], "5530": [29, 78], "5662": [36, 78], "5716": [36, 78], "577": [29, 78], "5841": [36, 78], "5862": [29, 78], "5872": [29, 78], "5990": [34, 78], "6": [13, 14, 29, 31, 34, 36, 48, 76, 78, 79, 80], "60": [24, 32, 33, 41, 53, 54, 78, 79, 80], "6014": [29, 78], "604": [29, 36, 78], "6102": [36, 78], "6197": [29, 78], "6254": [36, 78], "6343": [60, 81], "64": [17, 19, 21, 22, 35, 76, 77, 78], "6523": [29, 78], "66": [34, 78], "6616": [60, 81], "6622": [29, 78], "6700": [34, 78], "6765": [29, 78], "6769": [29, 78], "6926": [60, 81], "6932": [36, 78], "6939": [36, 78], "7": [13, 29, 36, 76, 78], "7017": [29, 78], "7023": [29, 78], "7033": [63, 81], "7117": [29, 78], "7154": [62, 81], "7168": [36, 78], "7172": [29, 78], "7263": [60, 81], "7301": [36, 78], "7348": [62, 81], "7351": [62, 81], "7464": [62, 81], "7468": [62, 81], "75": [15, 16, 19, 21, 22, 31, 60, 62, 76, 77, 78, 81], "76": [29, 78], "7609": [62, 81], "7619": [36, 78], "7849": [29, 78], "7885": [29, 78], "7994": [29, 78], "8": [13, 16, 21, 22, 29, 31, 34, 36, 76, 77, 78], "8130": [36, 78], "8182": [36, 78], "82": [31, 78], "8434": [29, 78], "8523": [29, 78], "8533": [31, 78], "8687": [36, 78], "8697": [29, 78], "87": [24, 29, 31, 32, 34, 36, 78], "8705": [29, 78], "8793": [36, 78], "88": [26, 78], "8802": [36, 78], "8854": [36, 78], "898x_14_3_309": [29, 78], "9": [13, 16, 27, 29, 36, 53, 54, 60, 62, 63, 76, 78, 79, 80, 81], "9028": [29, 78], "9101": [36, 78], "9122": [62, 81], "9270": [36, 78], "9290": [36, 78], "93": [30, 78], "9310": [36, 78], "9342": [29, 78], "9375": [60, 81], "9401": [29, 78], "9428": [29, 78], "9432": [18, 76], "9453": [36, 78], "9482": [29, 78], "9511": [29, 78], "96": [24, 29, 31, 32, 34, 36, 78], "9615": [62, 81], "9704": [29, 78], "9729": [29, 78], "9733": [34, 78], "9790": [36, 78], "9800": [34, 78], "9808": [36, 78], "9842": [29, 78], "9847": [29, 78], "9912": [29, 78], "9930": [29, 78], "9974": [29, 78], "9_3": [34, 78], "A": [0, 11, 17, 26, 27, 28, 29, 30, 34, 36, 40, 62, 63, 73, 76, 78, 79, 81], "As": [13, 27, 30, 34, 76, 78], "By": [31, 60, 62, 78, 81], "For": [13, 14, 15, 16, 18, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 40, 41, 55, 57, 58, 60, 61, 76, 78, 79, 80, 81], "If": [13, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 57, 58, 60, 62, 63, 70, 71, 76, 77, 78, 80, 81, 83], "In": [13, 14, 17, 19, 21, 22, 24, 25, 26, 27, 31, 34, 35, 36, 52, 76, 77, 78, 79, 80], "Its": [27, 78], "On": [24, 27, 28, 29, 31, 32, 34, 36, 41, 78, 79], "One": [25, 34, 78], "Or": [31, 78], "The": [13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 46, 55, 57, 58, 60, 61, 62, 63, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83], "There": [60, 81], "To": [28, 61, 78, 81], "_": [15, 16, 76], "_0": [19, 77], "_1": [19, 77], "__call__": [56, 58], "__version__": 0, "_c": [13, 14, 15, 16, 76], "_channel": [27, 78], "_clamp_numpi": [60, 81], "_clamp_torch": [60, 81], "_classifier_numpi": [25, 78], "_classifier_torch": [25, 78], "_gener": [13, 14, 15, 16, 76], "_kfold_numpi": [13, 76], "_kfold_torch": [13, 76], "_labelbinariser_numpi": [61, 81], "_labelbinariser_torch": [61, 81], "_receptivefield_numpi": [29, 78], "_receptivefield_torch": [29, 78], "_repeatedkfold_numpi": [14, 15, 76], "_repeatedkfold_torch": [14, 15, 76], "_repeatedstratifiedkfold_numpi": [15, 76], "_repeatedstratifiedkfold_torch": [15, 76], "_robustscaler_numpi": [62, 81], "_robustscaler_torch": [62, 81], "_sampl": [27, 78], "_scaler_numpi": [63, 81], "_scaler_torch": [63, 81], "_stratifiedkfold_numpi": [16, 76], "_stratifiedkfold_torch": [16, 76], "_svc_numpi": [34, 78], "_svc_torch": [34, 78], "_timedelayed_numpi": [36, 78], "_timedelayed_torch": [36, 78], "a_": [34, 78], "a_dual_": [27, 78], "abc": [13, 14, 15, 16, 76], "about": [19, 28, 76, 77, 78, 80, 81], "absolut": [60, 81], "access": [17, 76, 77, 78, 81], "accord": [17, 62, 76, 78, 81], "account": [27, 78], "accur": [25, 78], "accuraci": [0, 17, 25, 31, 34, 52, 74, 75, 76, 78], "achiev": [13, 32, 76, 78], "across": [13, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 61, 76, 78, 81], "act": [18, 76], "actual": [29, 36, 78], "addit": [17, 26, 28, 33, 35, 36, 58, 60, 61, 62, 63, 67, 76, 78, 81, 83], "addition": [32, 78], "affect": [62, 81], "after": 78, "against": [25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 78], "aggreg": [25, 78], "aggress": [26, 78], "akin": [0, 63, 81], "algorithm": [26, 78], "alink": [40, 79], "all": [10, 17, 24, 25, 27, 30, 32, 33, 35, 61, 73, 76, 78, 81], "allow": [0, 17, 19, 21, 22, 24, 27, 28, 31, 35, 68, 76, 77, 78, 83], "along": [0, 50, 51, 79, 80], "alpha": [17, 18, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 66, 76, 78, 82], "alpha_": [27, 30, 31, 32, 33, 36, 78], "alpha_i": [24, 34, 78], "alpha_per_target": [24, 27, 30, 31, 32, 78], "alpha_x": [24, 78], "alreadi": [27, 78, 79], "also": [0, 13, 14, 15, 16, 17, 24, 27, 29, 31, 32, 33, 36, 41, 76, 78, 79], "altern": [27, 29, 32, 33, 36, 62, 78, 81], "alwai": [0, 37, 38, 39, 48, 49, 52, 53, 54, 61, 79, 80, 81], "among": [32, 78], "amplitud": [19, 21, 22, 77], "an": [0, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 29, 30, 31, 32, 34, 35, 36, 58, 62, 76, 77, 78, 81], "analaysi": [28, 78], "analys": [61, 81], "analysi": [0, 10, 26, 28, 40, 78, 79], "anh": [46, 79], "ani": [13, 14, 15, 16, 17, 18, 19, 25, 26, 28, 29, 33, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 56, 60, 61, 62, 63, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 83], "appear": [27, 78], "appli": [19, 21, 22, 24, 26, 28, 29, 55, 57, 58, 60, 77, 78, 80, 81], "applic": [27, 78], "approach": [29, 31, 78], "appropri": [35, 58, 78], "approxim": [26, 78], "ar": [0, 13, 17, 18, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 76, 77, 78, 79, 80, 81], "ar1": [19, 21, 22, 77], "arang": [13, 14, 19, 21, 22, 29, 36, 76, 77, 78], "arbitrari": [17, 18, 25, 32, 35, 60, 62, 76, 78, 81], "arg": [17, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 56, 60, 61, 62, 63, 68, 69, 76, 78, 79, 80, 81, 83], "argument": [17, 25, 26, 28, 33, 35, 36, 60, 61, 62, 63, 67, 68, 69, 76, 78, 81, 83], "aris": [61, 81], "around": [13, 76], "arrai": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "artifact": [60, 81], "arxiv": [26, 28, 41, 78, 79], "ascent": [27, 34, 78], "assert": [29, 78], "assign": [25, 78], "associ": [27, 78], "assum": [13, 16, 26, 28, 33, 76, 78], "attr": [17, 35, 76, 78], "attribut": [13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 60, 61, 62, 63, 76, 78, 81], "auc": [0, 52, 58, 79, 80], "auditori": [29, 78], "auto": [19, 21, 22, 27, 29, 34, 36, 77, 78], "auto_exampl": 11, "auto_examples_python": 10, "autom": [0, 17, 18, 34, 76, 78], "automat": [13, 14, 18, 26, 27, 29, 30, 35, 76, 78], "avail": [0, 13, 14, 15, 16, 25, 26, 27, 28, 29, 34, 68, 69, 76, 78, 83], "averag": [0, 50, 51, 52, 79, 80], "avoid": [29, 33, 61, 78, 81], "awad": [34, 78], "awar": 78, "ax": [19, 21, 22, 77], "axi": [19, 21, 22, 31, 34, 77, 78], "b": [19, 21, 22, 24, 29, 30, 31, 32, 34, 36, 72, 77, 78, 83], "b2b": [0, 32, 74, 75], "back": [0, 24, 30, 78], "back2back": 78, "backend": [13, 14, 15, 16, 19, 21, 22, 23, 25, 27, 28, 34, 60, 61, 62, 64, 65, 66, 76, 77, 78, 81, 82], "background": [19, 21, 22, 77], "bar": [0, 48, 67, 79, 80, 83], "base": [0, 17, 18, 19, 21, 22, 25, 26, 27, 28, 34, 35, 60, 61, 62, 76, 77, 78, 80, 81, 83], "baseestim": [17, 18, 25, 26, 28, 31, 34, 35, 59, 60, 61, 62, 76, 78, 80, 81], "basi": [0, 19, 21, 22, 45, 77, 79], "becaus": [13, 14, 24, 27, 30, 31, 61, 62, 76, 78, 81], "becom": [13, 76], "bednar": [29, 36, 78], "befor": [13, 16, 19, 21, 22, 28, 29, 62, 63, 76, 77, 78, 81], "behaviour": [29, 34, 36, 58, 78], "benefici": [29, 78], "benefit": [27, 78], "beta": [27, 30, 31, 32, 33, 36, 78], "beta_": [27, 30, 78], "between": [0, 28, 31, 37, 38, 39, 40, 41, 42, 47, 48, 49, 52, 53, 54, 78, 79, 80], "beyond": [32, 78], "biass": [28, 78], "bie\u00dfmann": [24, 29, 31, 32, 34, 36, 78], "binari": [25, 52, 78, 79, 80], "binaris": [25, 31, 34, 61, 78, 81], "binariser_": [25, 31, 34, 78], "biologi": [28, 78], "blankertz": [24, 29, 31, 32, 34, 36, 78], "bool": [13, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 62, 63, 67, 68, 71, 72, 76, 77, 78, 81, 83], "both": [18, 29, 36, 60, 62, 76, 78, 81], "bound": [60, 81], "boundari": [34, 78], "brain": [19, 21, 22, 77], "branch": [28, 78], "c": [19, 21, 22, 26, 29, 30, 34, 36, 77, 78], "c_": [36, 61, 78, 81], "c_0": [25, 44, 46, 78, 79], "c_1": [25, 78], "c_2": [25, 78], "cach": [68, 83], "calibr": [25, 31, 34, 78], "calibratedclassifi": [25, 78], "call": [13, 14, 15, 16, 17, 25, 26, 55, 57, 58, 60, 61, 62, 63, 70, 71, 75, 76, 78, 80, 81, 83], "callabl": [28, 35, 55, 56, 57, 58, 68, 69, 78, 80, 83], "callibr": [25, 78], "can": [0, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 31, 34, 35, 36, 60, 61, 62, 67, 76, 78, 81, 83], "cannot": [13, 26, 27, 32, 34, 60, 61, 62, 63, 76, 78, 81], "captur": [27, 78], "care": [17, 18, 76], "carefulli": [31, 78], "case": [17, 18, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 52, 60, 76, 78, 79, 80, 81], "cat": [24, 41, 47, 78, 79], "categor": 77, "causal": [0, 24, 29, 78], "causal_": [24, 78], "cdot": [27, 34, 38, 78, 79], "cell": [29, 78], "center": [62, 63, 81], "centr": [62, 81], "centre_": [62, 81], "certain": [31, 61, 78, 81], "ch_col": [19, 21, 22, 77], "ch_po": [19, 20, 21, 22, 77], "challeng": [26, 78], "channel": [0, 19, 20, 21, 22, 23, 28, 29, 36, 77, 78], "charton": [24, 78], "check": [0, 60, 71, 81, 83], "chen": [26, 78], "choos": [27, 78], "chose": [30, 78], "chosen": [27, 78], "clamp": [0, 62, 74, 75], "clariti": [16, 76], "class": [0, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 55, 56, 57, 58, 60, 61, 62, 63, 67, 76, 77, 78, 79, 80, 81, 83], "classes_": [61, 81], "classif": [0, 25, 31, 34, 78], "classifi": [0, 31, 34, 35, 74, 75], "clf": [17, 25, 31, 34, 55, 57, 58, 76, 78, 80], "clone": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 60, 61, 62, 63, 75, 78, 81], "close": [27, 30, 78], "cmap": [28, 78], "code": [10, 17, 76], "coef0": [27, 34, 44, 46, 78, 79], "coef_": [17, 25, 27, 29, 30, 31, 32, 33, 34, 36, 76, 78], "coefficeint": [32, 78], "coeffici": [25, 27, 29, 30, 31, 33, 34, 36, 44, 46, 78, 79], "collect": [13, 14, 15, 16, 17, 28, 35, 75, 76, 78, 81], "colour": [0, 20, 77], "common": [17, 28, 76, 78], "compar": [0, 28, 34, 75, 78, 83], "comparison": [28, 72, 78, 83], "compil": [0, 68, 69, 74, 75, 78], "complementari": [60, 62, 81], "complic": [17, 76], "compon": [28, 78], "comput": [0, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 77, 78, 79, 80, 81], "computation": [26, 78], "concaten": [31, 34, 78], "concentr": [0, 23, 77], "condit": [26, 28, 78], "configur": [76, 78, 80, 81], "connect": [28, 78], "consequ": [24, 25, 28, 29, 31, 32, 33, 34, 36, 60, 78, 81], "consid": [24, 25, 26, 27, 34, 61, 78, 81], "consist": [13, 14, 15, 16, 17, 18, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "constitut": [60, 81], "construct": [36, 78], "consult": [55, 57, 58, 80], "contain": [24, 61, 76, 77, 78, 79, 80, 81, 82], "content": 74, "context": 83, "continu": [0, 19, 21, 29, 36, 77, 78], "contrari": [26, 34, 78], "contribut": [0, 24, 78], "control": [32, 60, 78, 81], "conv1d": [17, 18, 29, 36, 76, 78], "conveni": [27, 30, 31, 34, 78], "convers": [26, 28, 60, 61, 62, 63, 78, 81], "convert": [13, 14, 15, 16, 29, 76, 78], "convolut": [29, 78], "copi": [25, 31, 34, 60, 61, 62, 63, 74, 75, 81], "correct": [29, 60, 78, 81], "correl": [0, 19, 21, 22, 24, 29, 32, 36, 48, 53, 77, 78, 79, 80], "correspond": [23, 33, 77, 78], "cosin": [0, 28, 39, 74, 75, 78], "cosine_d": [0, 28, 75, 78, 79], "cost": [34, 78], "could": [13, 76], "coupl": [25, 78], "cours": [33, 78], "cov": [26, 78], "cov_": [29, 78], "covari": [0, 19, 21, 22, 29, 41, 47, 74, 75, 77, 79], "covariance_": [26, 41, 47, 78, 79], "cpu": [19, 21, 22, 23, 64, 65, 66, 77, 82], "creat": [0, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 29, 52, 61, 76, 77, 78, 79, 80, 81], "cross": [0, 13, 14, 15, 16, 17, 18, 27, 28, 29, 30, 34, 36, 40, 41, 76, 78, 79], "cross_val_scor": [0, 17, 55, 57, 58, 74, 75, 80], "crossnobi": [0, 41, 79], "crossvalid": [0, 13, 14, 15, 16, 17, 18, 29, 55, 57, 58, 74, 75, 78, 80], "csp": [74, 75], "curb": [60, 81], "current": [26, 34, 78], "cut": [19, 21, 22, 77], "cv": [17, 18, 27, 29, 30, 31, 32, 33, 34, 36, 76, 78], "cv_": [17, 76], "cv_euclidean": [0, 28, 75, 78, 79], "cv_mahalanobi": [0, 28, 75, 78, 79], "cv_n_": [17, 76], "cx_": [28, 78], "cy_": [28, 78], "cycl": [19, 21, 22, 77], "d": [24, 29, 31, 32, 34, 36, 40, 41, 42, 44, 47, 78, 79], "data": [0, 10, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 50, 51, 60, 61, 62, 63, 76, 77, 78, 79, 80, 81, 82], "dataset": [0, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 31, 34, 55, 57, 58, 74, 75, 76, 78, 80], "david": [29, 78], "de": [29, 78], "deal": [60, 81], "debug": [68, 83], "decai": [19, 21, 22, 77], "decid": [25, 29, 78], "decis": [17, 25, 34, 58, 76, 78], "decision_funct": [17, 25, 31, 34, 58, 75, 76, 78, 80], "decod": [0, 24, 29, 31, 32, 35, 78], "decoder_": [24, 78], "decor": [0, 68, 69, 78, 83], "decorrel": [26, 78], "decreas": [27, 78], "def": [68, 69, 83], "default": [0, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 57, 58, 60, 61, 62, 63, 67, 68, 70, 71, 76, 77, 78, 80, 81, 83], "defici": [27, 78], "defin": [0, 19, 21, 22, 27, 34, 37, 38, 40, 41, 42, 47, 48, 49, 53, 54, 60, 77, 78, 79, 80, 81], "definit": [26, 34, 78], "degrad": [34, 78], "degre": [27, 34, 44, 78, 79], "delai": [0, 29, 36, 78], "delta": [26, 34, 78], "demonstr": [13, 16, 76], "depend": [24, 78, 83], "deriv": [13, 16, 76], "describ": [29, 36, 62, 78, 81], "descript": 0, "design": [29, 36, 78], "desir": [13, 14, 24, 25, 31, 32, 60, 76, 78, 81], "detail": [0, 78], "determin": [19, 21, 22, 77], "deviat": [19, 60, 63, 77, 81], "devic": [13, 14, 19, 21, 22, 23, 64, 65, 66, 76, 77, 82], "df": [17, 25, 31, 34, 58, 76, 78], "di": [28, 29, 36, 78, 79], "diag": [26, 27, 30, 78], "diagon": [24, 78], "dict": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 61, 68, 69, 76, 78, 81, 83], "dictionari": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "diedrichsen": [28, 40, 41, 78, 79], "differ": [0, 16, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 60, 61, 63, 76, 77, 78, 81], "dim": [16, 17, 35, 60, 61, 62, 63, 76, 78, 80, 81], "dimens": [0, 26, 33, 35, 37, 38, 39, 41, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 78, 79, 80, 81], "dimension": [26, 76, 77, 78, 79, 80, 81, 82], "dims_": [60, 62, 81], "direct": [25, 60, 78, 81], "directli": [60, 81], "disabl": [0, 29, 34, 67, 68, 69, 78, 83], "discret": [0, 22, 77], "disentangl": [0, 24, 32, 78], "dissimilar": [40, 79], "distanc": [0, 28, 39, 40, 41, 42, 47, 49, 54, 78, 79], "distort": [24, 78], "distribut": [22, 28, 41, 77, 78, 79], "diverg": [34, 78], "do": [13, 17, 28, 29, 31, 33, 35, 36, 76, 78], "document": [55, 57, 58, 80], "doe": [28, 61, 78, 81], "doi": [30, 78], "domain": [29, 36, 78], "done": [28, 78], "download": 10, "draw": [28, 78], "drawn": 77, "driven": [26, 78], "dtype": [48, 49, 53, 54, 79, 80], "dual": [27, 34, 78], "dure": [17, 41, 76, 79], "d\u00e4hne": [24, 29, 31, 32, 34, 36, 78], "e": [19, 21, 22, 23, 25, 26, 27, 29, 34, 36, 77, 78], "e1005508": [28, 78], "each": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 30, 32, 35, 61, 62, 76, 77, 78, 81], "earli": [34, 78], "easi": [17, 76], "easier": [61, 81], "easili": [13, 60, 76, 81], "edg": [29, 78], "edge_correct": [29, 78], "eeg": [0, 19, 21, 22, 23, 77], "effect": [24, 31, 78], "effici": [26, 29, 31, 34, 78], "egg": [60, 81], "eigendecomposit": [26, 78], "eigenvalu": [26, 78], "either": [13, 14, 15, 16, 17, 18, 25, 29, 31, 60, 67, 76, 78, 79, 81, 83], "ejaz": [40, 79], "eldar": [26, 78], "element": [42, 48, 79, 80], "elimin": [41, 79], "embed": [33, 78], "empir": [26, 78], "emploi": [29, 78], "enabl": [0, 22, 31, 67, 71, 77, 78, 83], "encod": [0, 24, 25, 28, 33, 52, 61, 78, 79, 80, 81], "encoder_": [24, 78], "end": [13, 76], "enough": [33, 78], "entri": [17, 76], "enumer": [13, 14, 15, 16, 76], "env": [0, 70, 71, 74, 75], "environ": [0, 70, 71, 76, 78, 80, 81, 83], "eog": [60, 81], "ep": [60, 81], "eps_": [34, 78], "epsilon": [60, 81], "equival": [36, 78], "error": [27, 29, 34, 36, 78], "estim": [0, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 47, 55, 57, 58, 61, 63, 74, 75, 76, 79, 80, 81], "estimator_": [32, 78], "estimators_": [25, 35, 78], "euclidean": [0, 28, 40, 74, 75, 78], "evalu": [17, 27, 30, 31, 76, 78], "even": [58, 61, 81], "event": [0, 22, 77], "exampl": [0, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 68, 69, 73, 76, 77, 78, 79, 80, 81, 83], "exceed": [60, 81], "execut": [11, 73], "exist": [24, 25, 78], "expand": [29, 33, 35, 36, 78], "expect": [26, 29, 78], "experiment": [34, 78], "expit": [25, 31, 34, 78], "explicit": [13, 33, 76, 78], "explicitli": [13, 17, 29, 32, 33, 61, 76, 78, 81], "expos": [17, 18, 25, 29, 35, 55, 57, 58, 76, 78, 80, 83], "extend": [55, 57, 58, 80], "extern": [13, 76], "extrem": [0, 29, 31, 60, 78, 81], "f": [13, 14, 15, 16, 19, 21, 22, 24, 28, 29, 30, 31, 32, 34, 36, 55, 56, 57, 58, 75, 76, 77, 78, 80], "f978": [34, 78], "f_": [36, 78], "f_i": [13, 14, 15, 16, 76], "facilit": [31, 78], "fact": [29, 78], "factor": [24, 78], "fall": [30, 78], "fals": [13, 16, 17, 18, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 63, 68, 71, 76, 77, 78, 81, 83], "faster": [27, 30, 78], "fastmath": [68, 83], "featur": [0, 16, 19, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 40, 41, 42, 47, 48, 50, 51, 58, 61, 62, 76, 77, 78, 79, 80, 81], "few": [25, 78], "field": [0, 29, 78], "fig": [19, 21, 22, 77], "figsiz": [19, 21, 22, 77], "file": [11, 73], "filter": [31, 32, 78], "final": [0, 28, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 78, 79, 80], "find": [33, 78], "fine": [27, 30, 78], "first": [16, 29, 34, 60, 61, 62, 63, 76, 78, 81], "fit": [0, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 47, 60, 61, 62, 63, 75, 76, 78, 79, 81], "fit_intercept": [24, 29, 30, 31, 32, 78], "fit_model_": [75, 76], "fit_transform": [26, 28, 35, 60, 61, 62, 63, 75, 78, 81], "flag": [0, 68, 70, 71, 83], "float": [19, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 44, 45, 46, 60, 62, 66, 77, 78, 79, 81, 82], "float64": [48, 49, 53, 54, 79, 80], "fnhum": [29, 36, 78], "fold": [0, 13, 14, 15, 16, 17, 18, 24, 40, 41, 76, 78, 79], "fold0": [13, 14, 76], "fold1": [13, 14, 76], "fold2": [13, 14, 76], "fold3": [13, 14, 76], "fold4": [13, 76], "follow": [17, 18, 26, 30, 32, 76, 78], "form": [27, 30, 34, 78], "formula": [27, 52, 78, 79, 80], "forward": [33, 78], "fourier": [29, 36, 78], "fr": [19, 21, 22, 77], "frac": [19, 21, 22, 26, 27, 30, 34, 37, 38, 48, 52, 77, 78, 79, 80], "frame": [31, 34, 78], "framework": [28, 78], "frequenc": [19, 21, 22, 29, 36, 77, 78], "frobeniu": [26, 78], "from": [0, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 68, 69, 70, 73, 76, 77, 78, 79, 80, 81, 83], "from_numpi": [31, 34, 78], "from_step": [17, 76], "frontier": [28, 29, 36, 78], "full": [28, 29, 33, 78], "full_rdm": [28, 75, 78], "function": [0, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 55, 56, 57, 58, 68, 69, 76, 77, 78, 79, 80, 81, 83], "fundament": [29, 78], "further": 0, "futur": [34, 78], "g": [24, 25, 29, 30, 36, 78], "gallant": [29, 78], "galleri": [10, 73], "gamma": [19, 21, 22, 27, 34, 44, 45, 46, 77, 78, 79], "gamma_": [34, 78], "ge": [34, 78], "gener": [10, 13, 14, 15, 16, 19, 21, 22, 25, 28, 29, 36, 60, 76, 77, 78, 81], "generalis": [26, 78], "geometri": [28, 78], "geq": [26, 27, 78], "get": [70, 71, 76, 78, 80, 81, 83], "get_var": [0, 75, 83], "given": [26, 27, 28, 60, 78, 81, 83], "global": [76, 78, 80, 81], "good": [33, 78], "grab": [0, 70, 83], "grad": [34, 78], "gradient": [27, 34, 78], "gram": [27, 34, 78], "gramfort": [30, 78], "greater": [29, 78], "grisel": [30, 78], "group": [0, 19, 28, 77, 78], "g\u00f6rgen": [24, 29, 31, 32, 34, 36, 78], "h": [24, 28, 40, 41, 61, 62, 78, 79, 81], "h_": [27, 30, 78], "ha": [27, 30, 34, 61, 78, 81], "hamming_window": [0, 75, 82], "hammingwindow": [74, 75], "handl": [0, 25, 60, 61, 78, 81], "hann_window": [0, 75, 82], "hannwindow": [74, 75], "hat": [24, 25, 26, 52, 78, 79, 80], "hauf": [24, 29, 31, 32, 34, 36, 78], "have": [16, 17, 27, 28, 33, 34, 35, 61, 76, 78, 81], "hayn": [24, 29, 31, 32, 34, 36, 78], "here": [13, 16, 17, 18, 19, 21, 22, 24, 27, 30, 31, 34, 35, 41, 76, 77, 78, 79], "hermitian": 78, "hero": [26, 78], "higher": [29, 34, 78], "hing": [27, 34, 78], "hot": [0, 25, 52, 61, 78, 79, 80, 81], "how": [17, 18, 19, 21, 22, 28, 76, 77, 78], "howev": [13, 14, 24, 29, 31, 34, 76, 78], "hsu": [29, 78], "html": [29, 78], "http": [29, 78], "human": [29, 36, 78], "hurt": [17, 18, 26, 31, 76, 78], "hyperparamet": [34, 78], "hypothet": [28, 78], "hz": [19, 21, 22, 77], "i": [0, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 58, 60, 61, 62, 63, 70, 71, 76, 77, 78, 79, 80, 81, 83], "i_p": [26, 78], "idea": [24, 78], "ident": [61, 81], "ii": [27, 30, 78], "ill": [25, 26, 78], "immedi": [13, 14, 15, 16, 76], "implement": [0, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 57, 58, 60, 62, 76, 78, 80, 81], "import": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 68, 69, 76, 77, 78, 79, 80, 81, 83], "impuls": [22, 77], "imshow": [28, 78], "inclin": [13, 76], "includ": [19, 21, 22, 33, 61, 77, 78, 81], "independ": [27, 78], "indic": [13, 14, 16, 17, 28, 36, 40, 76, 78, 79], "indici": 76, "individu": [17, 18, 19, 25, 31, 32, 76, 77, 78], "infer": [13, 35, 76, 78], "influenc": [24, 29, 78], "inform": [18, 24, 26, 27, 28, 29, 30, 31, 34, 36, 40, 41, 55, 57, 58, 76, 78, 79, 80, 81], "inher": [28, 78], "inherit": [25, 78], "initialis": [17, 18, 25, 76, 78], "inner": [27, 29, 30, 78], "input": [0, 13, 14, 15, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 49, 53, 54, 61, 76, 78, 79, 80, 81], "inspect": [17, 76], "instanc": [25, 55, 57, 58, 78, 80], "instanti": [13, 14, 15, 16, 17, 76], "instead": [28, 29, 32, 33, 60, 78, 81], "int": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 76, 77, 78, 80, 81, 82, 83], "integ": [13, 14, 15, 16, 17, 18, 29, 76, 78], "intens": [26, 78], "inter": [60, 81], "intercept": [24, 25, 29, 30, 31, 32, 33, 34, 36, 78], "intercept_": [25, 29, 30, 31, 32, 33, 34, 36, 78], "interdisciplinari": [30, 78], "interest": [29, 78], "interfac": [77, 79, 81, 83], "intern": [25, 31, 34, 78], "interpet": [29, 78], "interpret": [24, 27, 29, 31, 32, 34, 36, 60, 78, 81], "interquartil": [62, 81], "inv": [41, 47, 79], "invari": [0, 62, 81], "invers": [0, 26, 34, 47, 60, 62, 63, 78, 79, 81], "inverse_transform": [60, 61, 62, 63, 75, 81], "invert": [60, 62, 63, 81], "investig": [27, 78], "iqr": [60, 81], "irrelev": [28, 78], "is_en": [0, 75, 83], "issu": [27, 34, 61, 78, 81], "iter": [0, 13, 14, 15, 16, 34, 35, 76, 78], "its": [0, 18, 27, 50, 51, 76, 78, 79, 80], "j": [24, 28, 29, 30, 31, 32, 33, 34, 36, 40, 41, 78, 79], "jan": 78, "jit": [0, 68, 83], "jitter": [60, 81], "job": [17, 18, 28, 35, 76, 78], "joblib": 83, "joint": 78, "journal": [26, 28, 30, 78], "just": [16, 27, 76, 78], "k": [0, 13, 14, 15, 16, 24, 26, 27, 29, 31, 32, 34, 36, 43, 44, 45, 46, 60, 76, 78, 79, 81], "kappa": [27, 34, 43, 44, 46, 78, 79], "kei": [27, 78], "kernel": [0, 19, 21, 22, 27, 29, 34, 43, 44, 45, 46, 77, 78, 79], "kernel_linear": [0, 27, 34, 74, 75, 78], "kernel_poli": [0, 27, 34, 74, 75, 78], "kernel_rbf": [0, 27, 34, 74, 75, 78], "kernel_sigmoid": [0, 27, 34, 74, 75, 78], "kernelridgeclassifi": [34, 78], "kernelridgecv": [0, 74, 75], "kessi": [26, 78], "keyword": [17, 25, 68, 69, 76, 78, 83], "kf": [13, 14, 15, 16, 76], "kfold": [0, 17, 18, 29, 74, 75, 78], "khanna": [34, 78], "king": [24, 30, 78], "kingjr": [30, 78], "kriegeskort": [28, 40, 78, 79], "kwarg": [17, 24, 32, 33, 36, 56, 67, 68, 69, 76, 78, 83], "kwargument": [25, 78], "l": [29, 60, 61, 78, 81], "l2": [27, 78], "label": [19, 25, 31, 34, 35, 52, 58, 61, 77, 78, 79, 80, 81], "labelbinaris": [0, 25, 31, 34, 74, 75, 78], "labels_": [61, 81], "lag": [29, 36, 78], "lalor": [29, 36, 78], "lambda": [26, 56, 78, 80], "lambda_1": [26, 78], "lambda_max": [22, 77], "lambda_min": [22, 77], "lambda_p": [26, 78], "laplacian": [29, 78], "larg": [26, 78], "largest": [34, 78], "last": [26, 78], "layout": [0, 20, 23, 77], "lead": [17, 18, 25, 27, 76, 78], "learn": [27, 30, 34, 78], "least": [27, 78], "ledoit": [26, 78], "ledoitwolf": [26, 78], "left": [26, 27, 30, 34, 78], "less": [24, 27, 78], "let": [13, 16, 28, 33, 34, 61, 68, 69, 76, 78, 81, 83], "level": [17, 18, 35, 76, 78], "lewin": [26, 78], "liberto": [29, 36, 78], "lightweight": 83, "like": [13, 14, 15, 16, 25, 26, 27, 28, 29, 31, 34, 55, 57, 58, 76, 78, 80], "lin": [25, 78], "linalg": [41, 47, 79], "line": [29, 78], "linear": [0, 24, 27, 29, 31, 32, 33, 34, 36, 43, 78, 79], "linear_model": [30, 78], "linearli": [34, 78], "list": [17, 25, 27, 29, 30, 35, 59, 60, 61, 62, 63, 68, 69, 76, 78, 80, 81, 83], "live": [24, 78], "load_iri": [31, 34, 78], "logspac": [17, 31, 32, 35, 76, 78], "longer": [27, 78], "loo": [27, 29, 30, 31, 32, 33, 34, 36, 78], "look": [34, 61, 68, 69, 78, 81, 83], "lopez": [24, 78], "loss": [27, 30, 34, 75, 78], "low": [17, 18, 76], "lower": [60, 81], "lower_": [60, 81], "lr": [34, 78], "lvert": [26, 27, 30, 31, 32, 33, 34, 36, 78], "m": [0, 19, 21, 22, 23, 24, 26, 29, 34, 36, 60, 77, 78, 81], "machin": [27, 30, 34, 78], "macro": [52, 79, 80], "mad": [60, 81], "magnitud": [27, 78], "mahalanobi": [0, 28, 41, 74, 75, 78], "mai": [17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 60, 76, 78, 81], "make": [13, 14, 15, 16, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 58, 76, 78], "make_circl": [34, 78], "make_classif": [31, 34, 78], "make_meeg_categor": [0, 17, 55, 57, 58, 74, 75, 76, 80], "make_meeg_colour": [0, 19, 21, 22, 74, 75], "make_meeg_continu": [0, 74, 75, 80], "make_meeg_discret": [0, 74, 75], "make_meeg_layout": [0, 19, 21, 22, 74, 75], "make_pipelin": [17, 76], "manag": 83, "mani": [17, 18, 19, 21, 22, 27, 28, 31, 76, 77, 78], "mann": [52, 79, 80], "manner": 79, "manual_se": [13, 76], "map": [27, 30, 31, 32, 33, 34, 61, 78, 81], "map_l_to_c_": [61, 81], "margin": [27, 34, 78], "marker": [19, 21, 22, 77], "mask_0": [19, 77], "mask_1": [19, 77], "math": [0, 27, 28, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 74, 75, 78, 80], "mathbb": [26, 78], "mathbf": [38, 79], "mathcal": [27, 34, 78], "mathemat": [77, 78, 81], "maths_a": [68, 69, 83], "maths_b": [68, 69, 83], "matlab": [29, 36, 78], "matplotlib": [19, 21, 22, 28, 77, 78], "matric": [26, 27, 28, 41, 47, 78, 79], "matrix": [0, 26, 27, 28, 29, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 61, 78, 79, 80, 81], "max": [26, 34, 60, 78, 81], "max_it": [34, 78], "maxim": [34, 78], "maximum": [22, 25, 26, 29, 34, 36, 77, 78], "mb": [11, 73], "mcdonald": [30, 78], "mean": [13, 18, 19, 21, 22, 24, 27, 29, 30, 36, 60, 62, 63, 76, 77, 78, 81], "mean_": [63, 81], "mean_rot": [75, 78], "measur": [26, 28, 40, 41, 78, 79], "median": [60, 62, 81], "meineck": [24, 29, 31, 32, 34, 36, 78], "mem": [11, 73], "membership": [19, 77], "method": [17, 18, 25, 26, 28, 29, 31, 34, 35, 60, 76, 78, 81, 83], "metric": [0, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 55, 57, 58, 59, 74, 75, 76, 78, 79], "metric_": [25, 27, 29, 30, 31, 32, 33, 34, 36, 78], "michel": [30, 78], "might": [13, 33, 62, 76, 78, 81], "min": [26, 78], "min_": [27, 30, 31, 32, 33, 34, 36, 78], "minim": [27, 60, 78, 81], "minimis": [26, 27, 30, 34, 78], "minimum": [22, 26, 29, 36, 77, 78], "mirror": [27, 78], "mistak": [17, 76], "mit": [27, 78], "mmse": [26, 78], "mne": [29, 36, 78], "model": [17, 18, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 59, 76, 78, 80], "model_": [17, 76], "model_select": [13, 14, 76], "modul": 74, "more": [17, 18, 24, 26, 27, 28, 29, 30, 31, 33, 34, 36, 40, 41, 55, 57, 58, 76, 78, 79, 80], "most": [25, 78], "mtrf": [29, 36, 78], "mu": [26, 63, 78, 81], "much": [19, 21, 22, 27, 30, 77, 78], "multi": [25, 31, 40, 76, 77, 78, 79, 80, 81, 82], "multiclass": [0, 25, 34, 61, 78, 81], "multifeatur": [0, 61, 81], "multipl": [16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "multivari": [0, 10, 24, 26, 29, 31, 32, 34, 36, 78], "murphi": [27, 78], "must": [29, 35, 78], "mutat": [56, 75, 80], "mv": [31, 34, 42, 78, 79], "mvpy": [0, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "n": [11, 15, 16, 26, 27, 28, 29, 30, 36, 37, 40, 42, 52, 64, 65, 66, 73, 76, 78, 79, 80, 82], "n_": [61, 81], "n_background": [19, 21, 22, 77], "n_channel": [19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 77, 78], "n_channels_": [29, 78], "n_class": [19, 25, 31, 34, 58, 61, 77, 78, 81], "n_classes_": [61, 81], "n_classifi": [25, 78], "n_cycl": [19, 21, 22, 77], "n_dim": [20, 77], "n_direct": [23, 77], "n_featur": [16, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 50, 58, 61, 76, 77, 78, 79, 80, 81], "n_features_": [29, 61, 78, 81], "n_frequenc": [35, 78], "n_group": [28, 78], "n_inform": [31, 34, 78], "n_job": [17, 18, 28, 35, 76, 78], "n_penalti": [29, 78], "n_repeat": [14, 15, 76], "n_sampl": [13, 14, 15, 16, 25, 27, 29, 30, 31, 32, 34, 36, 43, 44, 45, 46, 50, 58, 61, 76, 78, 79, 80, 81], "n_split": [13, 14, 15, 16, 29, 76, 78], "n_timepoint": [16, 19, 21, 22, 26, 28, 29, 33, 35, 36, 58, 76, 77, 78], "n_trf": [21, 22, 29, 77, 78], "n_trf_": [29, 78], "n_trial": [19, 21, 22, 24, 26, 28, 32, 33, 35, 61, 77, 78, 81], "n_triu_indic": [28, 78], "nadaraya": [27, 78], "name": [16, 17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 75, 76, 78, 80], "natur": [29, 78], "ndarrai": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 76, 77, 78, 79, 80, 81, 82, 83], "neg": [52, 61, 79, 80, 81], "neg_label": [61, 81], "net": [29, 78], "network": [29, 78], "neural": [19, 21, 22, 24, 28, 29, 31, 32, 33, 34, 35, 36, 77, 78], "neuro": [28, 78], "neuroimag": [10, 24, 29, 31, 32, 34, 36, 40, 78, 79], "neuron": [29, 78], "neurosci": [28, 29, 36, 78], "never": [28, 78], "new": [13, 14, 15, 16, 17, 76], "next": [33, 78], "nice": 79, "nili": [40, 79], "nn": [17, 18, 29, 36, 76, 78], "nogil": [68, 83], "nois": [19, 21, 22, 28, 34, 77, 78], "noisi": [26, 78], "non": [27, 34, 78], "none": [13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 59, 60, 62, 63, 70, 71, 76, 78, 80, 81, 83], "nopython": [68, 83], "norm": [26, 78], "normal": [17, 18, 24, 26, 27, 28, 29, 30, 32, 33, 35, 36, 41, 42, 47, 60, 62, 63, 76, 78, 79, 81], "normalis": [24, 30, 31, 32, 62, 78, 81], "normalise_decod": [24, 78], "note": [0, 13, 14, 15, 16, 17, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 60, 61, 62, 63, 76, 78, 79, 80, 81], "notin": [60, 81], "now": [13, 17, 76], "np": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 68, 76, 77, 78, 79, 80, 81, 83], "nt": 83, "numba": [0, 68, 83], "number": [13, 14, 15, 16, 17, 18, 23, 25, 28, 29, 32, 34, 35, 36, 52, 61, 76, 77, 78, 79, 80, 81], "numer": [25, 61, 78, 81], "numpi": [0, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 30, 34, 35, 60, 61, 62, 63, 75, 76, 77, 78, 79, 81, 83], "o": [19, 21, 22, 26, 30, 77, 78, 83], "oa": [26, 78], "object": [0, 13, 14, 15, 16, 17, 18, 25, 26, 29, 31, 32, 33, 34, 35, 36, 76, 78, 80, 83], "observ": [24, 28, 78], "obtain": [24, 25, 26, 28, 34, 60, 61, 62, 63, 78, 81], "occur": [13, 76], "off": [19, 21, 22, 62, 77, 81], "offer": [61, 81], "offset": [16, 25, 34, 61, 76, 78, 81], "offsets_": [25, 78], "often": [26, 34, 78], "onc": [32, 33, 78], "one": [0, 16, 17, 22, 25, 27, 29, 33, 34, 52, 60, 61, 62, 63, 76, 77, 78, 79, 80, 81], "ones": [29, 36, 78], "onli": [13, 17, 18, 19, 22, 25, 26, 27, 29, 34, 36, 60, 61, 76, 77, 78, 81], "onset": [22, 77], "op": [72, 83], "oper": [13, 72, 76, 81, 83], "optim": [26, 78], "optimis": [27, 34, 78], "option": [13, 14, 15, 16, 17, 18, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 60, 62, 70, 71, 76, 77, 78, 81, 83], "oquab": [24, 78], "oracl": [26, 78], "order": [27, 28, 29, 78], "org": [30, 78], "origin": [61, 81], "other": [25, 27, 31, 43, 44, 45, 46, 78, 79], "otherwis": [13, 14, 15, 16, 17, 18, 24, 28, 60, 76, 78, 81], "ouput": [24, 78], "our": [24, 35, 78], "out": [17, 26, 33, 76, 78], "outcom": [18, 29, 36, 50, 76, 78, 79, 80], "outlier": [0, 60, 62, 81], "output": [17, 18, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 76, 78, 79], "outsid": [60, 81], "over": [0, 17, 18, 19, 21, 22, 25, 27, 28, 29, 31, 33, 34, 35, 37, 38, 39, 48, 49, 52, 53, 54, 55, 57, 58, 60, 62, 63, 76, 77, 78, 79, 80, 81], "overlap": [16, 76], "overrid": [70, 71, 83], "overriden": [71, 83], "overwrit": 58, "ovo": [0, 25, 34, 78], "ovr": [0, 25, 31, 34, 78], "own": [19, 77], "p": [17, 19, 21, 22, 25, 26, 27, 31, 34, 35, 52, 76, 77, 78, 79, 80], "p_": [19, 21, 22, 34, 77, 78], "packag": 74, "pad": [17, 18, 19, 21, 22, 29, 35, 36, 76, 77, 78], "pair": [13, 14, 15, 16, 76], "parallel": [28, 35, 78], "parallelis": [17, 18, 76], "paramet": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 83], "parametr": [27, 78], "part": [77, 78, 83], "particularli": [27, 34, 35, 78], "pass": [13, 17, 19, 21, 22, 25, 26, 35, 36, 68, 69, 76, 77, 78, 83], "patch": 83, "pattern": [24, 25, 28, 29, 31, 32, 34, 35, 36, 40, 78, 79], "pattern_": [17, 24, 25, 29, 31, 32, 34, 35, 36, 76, 78], "paz": [24, 78], "pcbi": [28, 78], "pearson": [0, 48, 49, 53, 79, 80], "pearsonr": [0, 28, 49, 53, 54, 74, 75, 78], "pearsonr_d": [0, 28, 75, 78, 79], "pedregosa": [30, 78], "penalis": [24, 34, 78], "penalti": [24, 27, 29, 30, 31, 32, 33, 34, 36, 78], "pep": 83, "per": [19, 21, 22, 24, 27, 28, 31, 34, 58, 61, 77, 78, 81], "perfectli": [13, 76], "perform": [17, 18, 27, 28, 29, 30, 31, 34, 76, 78], "perspect": [27, 78], "pham": 78, "phi": [19, 21, 22, 77], "pi": [26, 78], "pipelin": [0, 17, 18, 59, 76, 80, 83], "place": [22, 67, 77, 83], "pleas": [0, 13, 14, 15, 16, 18, 24, 25, 26, 27, 28, 31, 35, 55, 57, 58, 76, 78, 80], "plo": [28, 78], "plot": [19, 21, 22, 28, 77, 78], "plt": [19, 21, 22, 28, 77, 78], "pm": [60, 81], "point": [28, 29, 33, 60, 78, 81], "poisson": [22, 77], "poli": [27, 34, 78], "polynomi": [0, 34, 44, 78, 79], "poor": [27, 78], "poorli": [29, 62, 78, 81], "pos_label": [61, 81], "posit": [19, 21, 22, 26, 27, 29, 34, 36, 52, 61, 67, 77, 78, 79, 80, 81, 83], "positon": [20, 77], "posix": 83, "possibl": [34, 78], "potenti": [24, 78], "power": [19, 21, 22, 77], "pp": 78, "practic": [24, 26, 27, 78], "pre": 78, "precis": [0, 26, 41, 47, 78, 79], "precision_": [26, 78], "predict": [17, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 50, 55, 56, 57, 75, 76, 78, 79, 80], "predict_proba": [17, 25, 31, 34, 35, 75, 76, 78], "predictor": [24, 29, 32, 77, 78], "preprocess": [0, 17, 24, 25, 31, 34, 60, 61, 62, 63, 74, 75, 76, 78], "prespecifi": [60, 81], "press": [27, 78], "preval": [27, 78], "primal": [27, 78], "princip": [33, 41, 78, 79], "principl": [13, 14, 25, 76, 78], "print": [13, 14, 15, 16, 19, 21, 22, 28, 61, 63, 76, 77, 78, 81], "prior": [27, 78], "probabilist": [27, 78], "probabl": [17, 25, 27, 31, 34, 35, 76, 78], "problem": [25, 29, 31, 34, 36, 78], "procedur": [17, 18, 24, 26, 76, 78], "process": [19, 21, 22, 77], "produc": [26, 27, 34, 61, 78, 81], "progress": [0, 17, 18, 28, 35, 67, 76, 78, 83], "progressbar": [0, 74, 75], "properti": [28, 78], "provid": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 77, 78, 81, 83], "provost": [28, 41, 78, 79], "public": [25, 78], "push": [26, 78], "put": [27, 78], "pyplot": [19, 21, 22, 28, 77, 78], "python": [10, 30, 77, 78, 83], "q": [26, 78], "qquad": [26, 27, 30, 78], "quad": [31, 78], "quantil": [60, 62, 81], "quantile_rang": [62, 81], "quartil": [60, 81], "r": [24, 29, 30, 34, 36, 48, 50, 51, 78, 79, 80], "r2": [0, 27, 29, 30, 32, 33, 36, 74, 75, 78], "r_": [52, 79, 80], "rac": [63, 81], "radial": [0, 19, 21, 22, 45, 77, 79], "raised_cosine_window": [0, 75, 82], "raisedcosinewindow": [74, 75], "randint": [61, 81], "randn": [15, 16, 40, 76, 79], "random": [13, 14, 15, 16, 76], "random_st": [13, 14, 15, 16, 76], "randomis": [13, 76], "rang": [19, 21, 22, 29, 33, 60, 62, 77, 78, 81], "rank": [0, 27, 50, 52, 53, 54, 74, 75, 78, 80], "rate": [22, 34, 77, 78], "rather": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "ratio": [19, 21, 22, 77], "rbf": [27, 34, 78, 79], "rdbu_r": [28, 78], "rdm": [28, 78], "rdm_": [28, 78], "re": [13, 76, 83], "realist": [29, 78], "recept": [0, 29, 78], "receptivefield": [0, 17, 18, 33, 36, 74, 75, 76], "recommend": [25, 29, 36, 78], "reconstruct": [0, 29, 36, 78], "record": [25, 28, 78], "recurs": [35, 78], "reduc": [55, 56, 57, 58, 75, 80], "reduce_": [75, 80], "redund": [13, 14, 76], "refer": [19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 40, 41, 77, 78, 79], "reg_cv": [29, 78], "reg_typ": [29, 78], "regress": [0, 24, 27, 30, 31, 32, 33, 36, 78], "regularis": [24, 27, 29, 34, 78], "reinstanti": [13, 76], "rel": [29, 36, 78], "relat": [29, 34, 36, 78], "reliabl": [40, 79], "remov": [60, 62, 81], "repeat": [0, 14, 15, 76], "repeatedkfold": [0, 29, 74, 75, 78], "repeatedli": [14, 15, 76], "repeatedstratifiedkfold": [0, 29, 74, 75, 78], "report": [17, 18, 35, 76, 78, 83], "repres": [61, 81], "represent": [0, 28, 78], "reproduc": [13, 14, 15, 16, 76], "request": [55, 56, 57, 58, 75, 80], "requir": [28, 78], "research": [30, 78], "resolv": [34, 78], "resort": [27, 78], "respect": [0, 19, 21, 22, 42, 48, 70, 77, 79, 80, 83], "respons": [0, 19, 21, 22, 28, 29, 33, 36, 77, 78], "rest": [0, 25, 34, 78], "result": [13, 72, 76, 83], "return": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 83], "return_count": [15, 16, 76], "return_valid": [18, 76], "return_x_i": [31, 34, 78], "return_xy\u00df": [21, 22, 77], "review": [30, 78], "rf": [29, 78], "rgb": [20, 77], "rho": [26, 78], "ridg": [0, 24, 27, 29, 30, 31, 32, 33, 36, 78], "ridgeclassifi": [0, 17, 25, 34, 55, 57, 58, 74, 75, 76, 80], "ridgecv": [0, 27, 29, 32, 33, 36, 74, 75], "ridgedecod": [0, 24, 31, 35, 74, 75, 80], "ridgeencod": [0, 74, 75], "right": [26, 27, 30, 34, 78], "risk": [26, 78], "rng": [13, 76], "rng_": [13, 16, 76], "robust": [0, 27, 62, 78, 81], "robustli": 81, "robustscal": [0, 60, 74, 75], "roc": [0, 52, 58, 79, 80], "roc_auc": [0, 17, 74, 75, 76], "rocauc": [52, 79, 80], "rotmat": [75, 78], "routin": [34, 78, 83], "rsa": [0, 74, 75], "run": [13, 28, 35, 61, 76, 78, 81], "rvert": [26, 27, 30, 31, 32, 33, 34, 36, 78], "rvert_": [27, 78], "rvert_2": [27, 78], "rvert_f": [26, 78], "s0047": [26, 78], "s_max": [26, 29, 78], "s_min": [26, 29, 78], "sai": [33, 78], "same": [13, 14, 15, 16, 17, 18, 29, 35, 36, 76, 78], "sampl": [19, 21, 22, 26, 29, 36, 40, 41, 42, 47, 48, 51, 52, 63, 77, 78, 79, 80, 81], "sample_weight": [63, 81], "scale": [24, 25, 27, 29, 31, 34, 60, 62, 63, 78, 81], "scale_": [62, 63, 81], "scaler": [0, 17, 24, 34, 60, 62, 74, 75, 76, 78], "scaler_": [24, 34, 78], "scatter": [19, 21, 22, 77], "scene": [29, 78], "scheme": [0, 25, 29, 78], "scikit": [30, 78], "score": [0, 17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 50, 52, 55, 57, 58, 74, 75, 76, 78, 79], "score_": [17, 76], "second": [16, 19, 21, 22, 26, 28, 34, 61, 76, 77, 78, 81], "see": [0, 13, 16, 18, 24, 26, 27, 28, 29, 30, 31, 33, 34, 36, 40, 41, 63, 76, 78, 79, 81, 83], "seed": [13, 14, 15, 16, 76], "select": [34, 60, 61, 62, 78, 81], "selet": [63, 81], "self": [26, 78], "semant": [33, 78], "semidefinit": [27, 78], "sens": [28, 78], "sensit": [19, 77], "sensor": [0, 20, 23, 77], "separ": [34, 35, 78], "sequenti": [27, 78], "set": [0, 13, 14, 15, 16, 24, 28, 29, 33, 35, 71, 76, 78, 80, 81, 83], "set_titl": [19, 21, 22, 77], "set_xlabel": [19, 21, 22, 77], "set_ylabel": [19, 21, 22, 77], "sever": [17, 18, 76], "shape": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 50, 58, 60, 61, 62, 63, 76, 77, 78, 79, 80, 81], "shape_": [17, 63, 76, 81], "share": [28, 78], "shorthand": [0, 17, 18, 76], "should": [13, 16, 17, 18, 19, 21, 22, 25, 26, 27, 29, 31, 34, 35, 36, 76, 77, 78], "shrinkag": [26, 78], "shrinkage_": [26, 78], "shuffl": [13, 14, 15, 16, 76], "siam": 78, "sigma": [19, 26, 63, 77, 78, 81], "sigmoid": [0, 27, 34, 46, 78, 79], "signal": [0, 19, 21, 22, 29, 36, 64, 65, 66, 74, 75, 77, 78], "silli": [68, 69, 83], "sim": [27, 78], "similar": [0, 28, 38, 78, 79], "similartii": [28, 78], "simpl": [0, 29, 31, 33, 61, 67, 78, 81, 83], "simplest": [17, 76], "simpli": [13, 76], "simul": [19, 21, 22, 28, 77, 78], "singh": [29, 78], "singl": [31, 33, 76, 78], "situat": [17, 18, 31, 61, 76, 78, 81], "size": [17, 19, 21, 22, 26, 27, 28, 30, 32, 33, 35, 40, 41, 42, 47, 76, 77, 78, 79], "sklearn": [0, 13, 14, 16, 17, 18, 25, 27, 28, 30, 31, 34, 35, 60, 61, 62, 63, 76, 78, 81], "slide": [0, 17, 33, 74, 75, 76], "slightli": [34, 78], "small": [26, 27, 29, 78], "smaller": [34, 78], "smo": [34, 78], "smyth": [29, 78], "snr": [19, 21, 22, 77], "so": [31, 78], "softmax": [19, 77], "solut": [27, 30, 78], "solv": [27, 29, 30, 31, 32, 33, 36, 78], "some": [0, 27, 28, 34, 61, 63, 78, 81], "sometim": [0, 41, 79], "sourc": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83], "space": [27, 28, 34, 78], "span": [60, 81], "spars": [27, 78], "spatial": [0, 20, 31, 32, 77, 78], "spatio": [29, 78], "spearman": [0, 53, 54, 79, 80], "spearmanr": [0, 28, 54, 74, 75, 78], "spearmanr_d": [0, 28, 75, 78, 79], "special": [60, 81], "specif": [17, 43, 44, 45, 46, 62, 76, 79, 81], "specifi": [17, 18, 25, 27, 35, 58, 60, 62, 76, 78, 81], "speed": [27, 78], "sphinx": 10, "split": [13, 14, 15, 16, 17, 18, 24, 29, 75, 76, 78], "sqrt": [42, 47, 48, 79, 80], "squar": [27, 30, 40, 41, 78, 79], "squeez": [31, 34, 78], "sr": [29, 36, 78], "stabilis": [19, 21, 22, 77], "stabl": [29, 78], "stack": [16, 17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 61, 76, 78, 81], "standard": [0, 19, 33, 63, 77, 78, 81], "standardscal": [0, 63, 81], "state": [13, 14, 15, 16, 76], "statement": 83, "static": [13, 76], "statist": [30, 78], "std": [62, 63, 81], "step": [17, 24, 33, 34, 35, 60, 61, 62, 63, 76, 78, 81], "stick": [61, 81], "still": [17, 76], "stimuli": [0, 19, 21, 22, 29, 36, 77, 78], "stimulu": [0, 19, 21, 22, 29, 36, 77, 78], "stop": [34, 78], "str": [17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 60, 64, 65, 66, 68, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 83], "stratifi": [0, 15, 16, 76], "stratifiedkfold": [0, 29, 74, 75, 78], "strength": [24, 34, 78], "strimmer": [26, 78], "string": [0, 29, 61, 72, 78, 81, 83], "structur": [28, 76, 77, 78, 79, 80, 81, 82], "submodul": [74, 75], "subpackag": 74, "subplot": [19, 21, 22, 77], "subset": [29, 78], "subsystem": [77, 78, 83], "sum": [40, 48, 52, 79, 80], "sum_": [26, 27, 29, 30, 31, 32, 34, 36, 42, 78, 79], "sum_i": [30, 33, 34, 37, 78, 79, 80], "super": [25, 78], "suppli": [17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 70, 71, 76, 78, 83], "support": [0, 28, 32, 33, 34, 61, 78, 81], "sure": [13, 14, 15, 16, 17, 28, 58, 76, 78], "surrog": [34, 78], "svc": [0, 25, 27, 31, 74, 75, 79], "swapax": [33, 41, 78, 79], "switch": [34, 78], "system": [28, 29, 78, 83], "systemat": [26, 78], "t": [19, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 41, 43, 44, 46, 47, 68, 69, 77, 78, 79, 83], "t_baselin": [19, 21, 22, 77], "t_durat": [19, 21, 22, 77], "t_length": [19, 21, 22, 77], "t_max": [29, 36, 78], "t_min": [29, 36, 78], "t_pad": [19, 21, 22, 77], "tail": [26, 60, 78, 81], "take": [25, 52, 78, 79, 80], "target": [13, 14, 15, 16, 24, 25, 27, 30, 31, 32, 34, 35, 76, 78], "task": [31, 78], "tau": [29, 36, 78], "td": [36, 78], "technic": [40, 79], "temperatur": [19, 77], "tempor": [0, 21, 22, 29, 33, 35, 36, 77, 78], "tend": [26, 78], "tensor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 76, 77, 78, 79, 80, 81, 82, 83], "tesor": [38, 39, 79], "test": [13, 14, 15, 16, 17, 27, 29, 30, 31, 32, 33, 36, 76, 78], "test_": [17, 76], "test_cnt": [15, 16, 76], "text": [37, 38, 39, 49, 52, 54, 79, 80], "textrm": [26, 27, 30, 31, 60, 78, 81], "th": [42, 48, 79, 80], "than": [17, 18, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 76, 78], "thei": [25, 33, 60, 78, 81], "theori": [27, 78], "therefor": [13, 17, 27, 36, 40, 76, 78, 79], "thereof": [31, 78], "theunissen": [29, 78], "thi": [0, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 44, 45, 46, 55, 57, 58, 60, 61, 62, 63, 70, 71, 76, 77, 78, 79, 80, 81, 83], "third": [34, 78], "thirion": [30, 78], "those": [28, 78], "three": [23, 26, 34, 60, 61, 77, 78, 81], "through": [26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 78], "ti": [0, 50, 51, 79, 80], "tight_layout": [19, 21, 22, 77], "tighter": [34, 78], "time": [0, 19, 21, 22, 26, 28, 29, 33, 34, 35, 36, 58, 60, 77, 78, 81], "timedelai": [0, 29, 33, 74, 75], "timepoint": [29, 35, 36, 78], "to_numpi": [13, 14, 15, 16, 25, 26, 28, 34, 60, 61, 62, 63, 75, 76, 78, 81], "to_torch": [13, 14, 15, 16, 17, 25, 26, 28, 34, 60, 61, 62, 63, 75, 76, 78, 81], "togeth": [0, 19, 77], "toi": [68, 69, 83], "tol": [34, 78], "toler": [34, 78], "too": [41, 79], "tool": [29, 78, 83], "toolbox": [29, 36, 78], "top": [35, 78], "torch": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83], "torch_ridg": [30, 78], "total": [11, 61, 73, 81], "toward": [26, 78], "tqdm": [67, 83], "tqdm_joblib": [75, 83], "tqdm_object": 83, "tr": [26, 78], "train": [13, 14, 15, 16, 27, 34, 76, 78], "train_cnt": [15, 16, 76], "train_idx": [15, 16, 76], "transform": [13, 14, 15, 16, 17, 26, 28, 31, 35, 60, 61, 62, 63, 75, 76, 78, 81], "treat": [32, 78], "trf": [17, 18, 19, 21, 22, 29, 36, 76, 77, 78], "trial": [19, 21, 22, 28, 41, 60, 77, 78, 79, 81], "triangl": [28, 78], "triangular": [28, 78], "trick": [27, 34, 78], "trigger": [34, 78], "true": [13, 15, 16, 17, 18, 22, 24, 28, 29, 30, 31, 32, 34, 35, 36, 50, 58, 62, 63, 67, 68, 69, 71, 76, 77, 78, 79, 80, 81, 83], "truli": [28, 78], "try": [17, 18, 33, 76, 78], "tune": [27, 30, 78], "tupl": [13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 59, 60, 62, 63, 76, 77, 78, 80, 81], "turn": [19, 21, 22, 62, 77, 81], "two": [0, 13, 24, 26, 28, 29, 34, 60, 61, 72, 76, 78, 81, 83], "tx_i": [31, 78], "type": [13, 25, 28, 29, 35, 55, 56, 57, 58, 61, 76, 78, 80, 81], "typic": [28, 34, 78], "u": [19, 21, 22, 24, 52, 60, 77, 78, 79, 80, 81], "unbiass": [28, 78], "uncertainti": [19, 77], "under": [55, 57, 58, 80], "underli": [17, 18, 35, 76, 78], "understand": [28, 78], "unfavour": [26, 78], "union": [13, 14, 15, 16, 19, 20, 21, 22, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 71, 76, 77, 78, 79, 80, 81, 83], "uniqu": [15, 16, 52, 61, 76, 79, 80, 81], "unit": [19, 62, 63, 77, 81], "unless": [26, 29, 61, 78, 81], "unlik": [16, 29, 31, 33, 34, 36, 43, 44, 45, 46, 62, 76, 78, 79, 81], "unrank": [51, 79], "unseen": [17, 76], "unspecifi": [60, 81], "unsqueez": [24, 78], "until": [13, 76], "unus": [13, 14, 15, 16, 60, 76, 81], "up": [13, 76], "updat": [34, 78], "upon": [13, 76], "upper": [28, 60, 78, 81], "upper_": [60, 81], "us": [0, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 52, 55, 57, 58, 60, 61, 62, 63, 76, 77, 78, 79, 80, 81], "util": [0, 67, 68, 69, 70, 71, 72, 74, 75], "v": [25, 29, 30, 78], "v_a": [72, 83], "v_b": [72, 83], "valid": [0, 13, 14, 15, 16, 18, 25, 27, 28, 29, 30, 34, 40, 41, 74, 75, 78, 79], "valu": [0, 17, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 55, 57, 58, 60, 62, 70, 76, 78, 80, 81, 83], "vanderpla": [30, 78], "var": [0, 70, 71, 83], "var_": [63, 81], "varepsilon": [27, 29, 30, 31, 32, 33, 36, 78], "vari": [0, 19, 21, 77], "variabl": [0, 22, 34, 70, 71, 77, 78, 83], "varianc": [62, 63, 81], "varoquaux": [30, 78], "varphi": [34, 78], "vector": [0, 24, 29, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 52, 78, 79, 80], "vectoris": [34, 61, 78, 79, 81], "verbos": [17, 18, 28, 35, 76, 78], "veri": [24, 33, 68, 69, 78, 83], "version": [0, 72, 74, 75], "versu": [0, 25, 34, 78], "vert": [45, 79], "via": [34, 78], "vinj": [29, 78], "visual": [29, 78], "vol": 78, "vote": [25, 78], "voxel": [40, 79], "w": [26, 27, 29, 34, 36, 78], "w_": [34, 36, 78], "wa": [60, 71, 81, 83], "wai": [13, 60, 76, 81], "walther": [40, 79], "want": [13, 16, 17, 24, 25, 28, 33, 35, 76, 78], "warn": [77, 78, 83], "we": [13, 16, 17, 19, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 52, 76, 77, 78, 79, 80, 83], "weight": [24, 27, 29, 31, 32, 34, 36, 63, 78, 81], "well": [0, 26, 31, 34, 78], "were": [29, 36, 78], "what": [19, 21, 22, 26, 29, 32, 33, 34, 60, 70, 77, 78, 81, 83], "when": [13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 33, 34, 35, 58, 60, 61, 76, 77, 78, 81], "whenev": [60, 81], "where": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 47, 48, 52, 60, 61, 63, 76, 77, 78, 79, 80, 81], "wherea": [17, 27, 76, 78], "wherein": 78, "whether": [24, 28, 30, 31, 32, 67, 78, 83], "which": [13, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 34, 60, 62, 63, 67, 76, 77, 78, 81, 83], "while": [17, 25, 28, 32, 34, 76, 78], "whiten": [0, 26, 78], "whitener_": [26, 78], "whitnei": [52, 79, 80], "wic": [30, 78], "wiesel": [26, 78], "wilei": [30, 78], "willmor": [29, 78], "win": [25, 78], "window": [29, 36, 78], "with_cent": [62, 81], "with_mean": [63, 81], "with_scal": [62, 81], "with_std": [63, 81], "within": [17, 76], "without": [17, 27, 60, 76, 78, 81], "wolf": [26, 78], "word": [27, 78], "work": [13, 16, 76, 78, 80, 81], "would": [13, 14, 15, 16, 28, 29, 32, 33, 55, 57, 58, 76, 78, 80], "wrap": [25, 35, 78], "wrapper": [0, 25, 78, 79], "write": [17, 76], "written": [34, 78], "wrong": [33, 78], "wu": [25, 78], "x": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 68, 69, 76, 77, 78, 79, 80, 81, 83], "x0": [31, 34, 78], "x1": [31, 34, 78], "x_": [27, 40, 63, 78, 79, 81], "x_i": [30, 32, 33, 34, 36, 37, 41, 42, 48, 63, 78, 79, 80, 81], "x_j": [41, 79], "x_k": [26, 78], "x_new": [17, 76], "x_train_": [34, 78], "y": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 68, 69, 76, 77, 78, 79, 80, 81, 83], "y0": [16, 31, 34, 76, 78], "y1": [16, 31, 34, 76, 78], "y_": [40, 79], "y_h": [17, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 50, 76, 78, 79, 80], "y_i": [30, 31, 32, 33, 34, 36, 37, 41, 42, 48, 78, 79, 80], "y_j": [41, 79], "y_new": [17, 76], "y_score": [0, 52, 79, 80], "y_true": [0, 52, 79, 80], "yield": [34, 78], "you": [0, 13, 14, 15, 16, 24, 35, 55, 57, 58, 61, 76, 78, 80, 81], "your": [0, 13, 27, 28, 35, 49, 53, 54, 76, 78, 79, 80], "z": [17, 20, 23, 35, 60, 62, 76, 77, 78, 81], "zareamoghaddam": [28, 41, 78, 79], "zero": [27, 28, 62, 78, 81], "zip": 10, "\u00df": [17, 18, 21, 22, 24, 27, 29, 30, 32, 33, 36, 76, 77, 78], "\u03b3": [44, 45, 46, 79], "\u03c3": [0, 41, 47, 79]}, "titles": ["API Reference", "mvpy", "mvpy.crossvalidation", "mvpy.dataset", "mvpy.estimators", "mvpy.math", "mvpy.metrics", "mvpy.preprocessing", "mvpy.signal", "mvpy.utilities", "Examples", "Computation times", "&lt;no title&gt;", "KFold", "RepeatedKFold", "RepeatedStratifiedKFold", "StratifiedKFold", "Validator", "cross_val_score", "make_meeg_categorical", "make_meeg_colours", "make_meeg_continuous", "make_meeg_discrete", "make_meeg_layout", "B2B", "Classifier", "Covariance", "KernelRidgeCV", "RSA", "ReceptiveField", "RidgeCV", "RidgeClassifier", "RidgeDecoder", "RidgeEncoder", "SVC", "Sliding", "TimeDelayed", "accuracy", "cosine", "cosine_d", "cv_euclidean", "cv_mahalanobis", "euclidean", "kernel_linear", "kernel_poly", "kernel_rbf", "kernel_sigmoid", "mahalanobis", "pearsonr", "pearsonr_d", "r2", "rank", "roc_auc", "spearmanr", "spearmanr_d", "Accuracy", "Metric", "R2", "Roc_auc", "score", "Clamp", "LabelBinariser", "RobustScaler", "Scaler", "hamming_window", "hann_window", "raised_cosine_window", "Progressbar", "numpy", "torch", "get_var", "is_enabled", "compare", "Computation times", "mvpy", "mvpy package", "mvpy.crossvalidation package", "mvpy.dataset package", "mvpy.estimators package", "mvpy.math package", "mvpy.metrics package", "mvpy.preprocessing package", "mvpy.signal package", "mvpy.utilities package"], "titleterms": {"accuraci": [37, 55, 79, 80], "api": 0, "b2b": [24, 78], "clamp": [60, 81], "classifi": [25, 78], "compar": 72, "compil": 83, "comput": [11, 73], "content": [75, 76, 77, 78, 79, 80, 81, 82, 83], "copi": 78, "cosin": [38, 79], "cosine_d": 39, "covari": [26, 78], "cross_val_scor": [18, 76], "crossvalid": [2, 76, 79], "csp": 78, "cv_euclidean": 40, "cv_mahalanobi": 41, "dataset": [3, 77], "env": 83, "estim": [4, 78], "euclidean": [42, 79], "exampl": 10, "get_var": 70, "hamming_window": 64, "hammingwindow": 82, "hann_window": 65, "hannwindow": 82, "is_en": 71, "kernel_linear": [43, 79], "kernel_poli": [44, 79], "kernel_rbf": [45, 79], "kernel_sigmoid": [46, 79], "kernelridgecv": [27, 78], "kfold": [13, 76], "labelbinaris": [61, 81], "mahalanobi": [47, 79], "make_meeg_categor": [19, 77], "make_meeg_colour": [20, 77], "make_meeg_continu": [21, 77], "make_meeg_discret": [22, 77], "make_meeg_layout": [23, 77], "math": [5, 79], "metric": [6, 56, 80], "modul": [75, 76, 77, 78, 79, 80, 81, 82, 83], "mvpy": [1, 2, 3, 4, 5, 6, 7, 8, 9, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "numpi": 68, "packag": [75, 76, 77, 78, 79, 80, 81, 82, 83], "pearsonr": [48, 79, 80], "pearsonr_d": 49, "preprocess": [7, 81], "progressbar": [67, 83], "r2": [50, 57, 79, 80], "raised_cosine_window": 66, "raisedcosinewindow": 82, "rank": [51, 79], "receptivefield": [29, 78], "refer": 0, "repeatedkfold": [14, 76], "repeatedstratifiedkfold": [15, 76], "ridgeclassifi": [31, 78], "ridgecv": [30, 78], "ridgedecod": [32, 78], "ridgeencod": [33, 78], "robustscal": [62, 81], "roc_auc": [52, 58, 79, 80], "rsa": [28, 78], "scaler": [63, 81], "score": [59, 80], "signal": [8, 82], "slide": [35, 78], "spearmanr": [53, 79, 80], "spearmanr_d": 54, "stratifiedkfold": [16, 76], "submodul": [76, 77, 78, 79, 80, 81, 82, 83], "subpackag": 75, "svc": [34, 78], "time": [11, 73], "timedelai": [36, 78], "torch": 69, "util": [9, 83], "valid": [17, 76], "version": 83}})