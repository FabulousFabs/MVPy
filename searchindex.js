Search.setIndex({"alltitles": {"API Reference": [[0, null]], "B2B": [[21, null]], "Clamp": [[51, null]], "Classifier": [[22, null]], "Computation times": [[10, null], [64, null]], "Covariance": [[23, null]], "Examples": [[9, null]], "KFold": [[12, null]], "KernelRidgeCV": [[24, null]], "LabelBinariser": [[52, null]], "Module contents": [[66, "module-mvpy"], [67, "module-mvpy.crossvalidation"], [68, "module-mvpy.dataset"], [69, "module-mvpy.estimators"], [70, "module-mvpy.math"], [71, "module-mvpy.preprocessing"], [72, "module-mvpy.signal"], [73, "module-mvpy.utilities"]], "Progressbar": [[58, null]], "RSA": [[25, null]], "ReceptiveField": [[26, null]], "RepeatedKFold": [[13, null]], "RepeatedStratifiedKFold": [[14, null]], "RidgeCV": [[27, null]], "RidgeClassifier": [[28, null]], "RidgeDecoder": [[29, null]], "RidgeEncoder": [[30, null]], "RobustScaler": [[53, null]], "SVC": [[31, null]], "Scaler": [[54, null]], "Sliding": [[32, null]], "StratifiedKFold": [[15, null]], "Submodules": [[67, "submodules"], [68, "submodules"], [69, "submodules"], [70, "submodules"], [71, "submodules"], [72, "submodules"], [73, "submodules"]], "Subpackages": [[66, "subpackages"]], "TimeDelayed": [[33, null]], "accuracy": [[34, null]], "compare": [[63, null]], "cosine": [[35, null]], "cosine_d": [[36, null]], "cv_euclidean": [[37, null]], "cv_mahalanobis": [[38, null]], "euclidean": [[39, null]], "get_var": [[61, null]], "hamming_window": [[55, null]], "hann_window": [[56, null]], "is_enabled": [[62, null]], "kernel_linear": [[40, null]], "kernel_poly": [[41, null]], "kernel_rbf": [[42, null]], "kernel_sigmoid": [[43, null]], "mahalanobis": [[44, null]], "make_meeg_categorical": [[16, null]], "make_meeg_colours": [[17, null]], "make_meeg_continuous": [[18, null]], "make_meeg_discrete": [[19, null]], "make_meeg_layout": [[20, null]], "mvpy": [[1, null], [65, null]], "mvpy package": [[66, null]], "mvpy.crossvalidation": [[2, null]], "mvpy.crossvalidation package": [[67, null]], "mvpy.crossvalidation.cross_val_score module": [[67, "module-mvpy.crossvalidation.cross_val_score"]], "mvpy.crossvalidation.kfold module": [[67, "module-mvpy.crossvalidation.kfold"]], "mvpy.crossvalidation.repeatedkfold module": [[67, "module-mvpy.crossvalidation.repeatedkfold"]], "mvpy.crossvalidation.repeatedstratifiedkfold module": [[67, "module-mvpy.crossvalidation.repeatedstratifiedkfold"]], "mvpy.crossvalidation.stratifiedkfold module": [[67, "module-mvpy.crossvalidation.stratifiedkfold"]], "mvpy.crossvalidation.validator module": [[67, "module-mvpy.crossvalidation.validator"]], "mvpy.dataset": [[3, null]], "mvpy.dataset package": [[68, null]], "mvpy.dataset.make_meeg_categorical module": [[68, "module-mvpy.dataset.make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours module": [[68, "module-mvpy.dataset.make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous module": [[68, "module-mvpy.dataset.make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete module": [[68, "module-mvpy.dataset.make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout module": [[68, "module-mvpy.dataset.make_meeg_layout"]], "mvpy.estimators": [[4, null]], "mvpy.estimators package": [[69, null]], "mvpy.estimators.b2b module": [[69, "module-mvpy.estimators.b2b"]], "mvpy.estimators.classifier module": [[69, "module-mvpy.estimators.classifier"]], "mvpy.estimators.covariance module": [[69, "module-mvpy.estimators.covariance"]], "mvpy.estimators.csp module": [[69, "module-mvpy.estimators.csp"]], "mvpy.estimators.kernelridgecv module": [[69, "module-mvpy.estimators.kernelridgecv"]], "mvpy.estimators.receptivefield module": [[69, "module-mvpy.estimators.receptivefield"]], "mvpy.estimators.ridgeclassifier module": [[69, "module-mvpy.estimators.ridgeclassifier"]], "mvpy.estimators.ridgecv module": [[69, "module-mvpy.estimators.ridgecv"]], "mvpy.estimators.ridgedecoder module": [[69, "module-mvpy.estimators.ridgedecoder"]], "mvpy.estimators.ridgeencoder module": [[69, "module-mvpy.estimators.ridgeencoder"]], "mvpy.estimators.rsa module": [[69, "module-mvpy.estimators.rsa"]], "mvpy.estimators.sliding module": [[69, "module-mvpy.estimators.sliding"]], "mvpy.estimators.svc module": [[69, "module-mvpy.estimators.svc"]], "mvpy.estimators.timedelayed module": [[69, "module-mvpy.estimators.timedelayed"]], "mvpy.math": [[5, null]], "mvpy.math package": [[70, null]], "mvpy.math.accuracy module": [[70, "module-mvpy.math.accuracy"]], "mvpy.math.cosine module": [[70, "module-mvpy.math.cosine"]], "mvpy.math.crossvalidated module": [[70, "module-mvpy.math.crossvalidated"]], "mvpy.math.euclidean module": [[70, "module-mvpy.math.euclidean"]], "mvpy.math.kernel_linear module": [[70, "module-mvpy.math.kernel_linear"]], "mvpy.math.kernel_poly module": [[70, "module-mvpy.math.kernel_poly"]], "mvpy.math.kernel_rbf module": [[70, "module-mvpy.math.kernel_rbf"]], "mvpy.math.kernel_sigmoid module": [[70, "module-mvpy.math.kernel_sigmoid"]], "mvpy.math.mahalanobis module": [[70, "module-mvpy.math.mahalanobis"]], "mvpy.math.pearsonr module": [[70, "module-mvpy.math.pearsonr"]], "mvpy.math.rank module": [[70, "module-mvpy.math.rank"]], "mvpy.math.roc_auc module": [[70, "module-mvpy.math.roc_auc"]], "mvpy.math.spearmanr module": [[70, "module-mvpy.math.spearmanr"]], "mvpy.preprocessing": [[6, null]], "mvpy.preprocessing package": [[71, null]], "mvpy.preprocessing.clamp module": [[71, "module-mvpy.preprocessing.clamp"]], "mvpy.preprocessing.labelbinariser module": [[71, "module-mvpy.preprocessing.labelbinariser"]], "mvpy.preprocessing.robustscaler module": [[71, "module-mvpy.preprocessing.robustscaler"]], "mvpy.preprocessing.scaler module": [[71, "module-mvpy.preprocessing.scaler"]], "mvpy.signal": [[7, null]], "mvpy.signal package": [[72, null]], "mvpy.signal.hammingwindow module": [[72, "module-mvpy.signal.hammingwindow"]], "mvpy.signal.hannwindow module": [[72, "module-mvpy.signal.hannwindow"]], "mvpy.signal.raisedcosinewindow module": [[72, "module-mvpy.signal.raisedcosinewindow"]], "mvpy.utilities": [[8, null]], "mvpy.utilities package": [[73, null]], "mvpy.utilities.compile module": [[73, "module-mvpy.utilities.compile"]], "mvpy.utilities.env module": [[73, "module-mvpy.utilities.env"]], "mvpy.utilities.progressbar module": [[73, "module-mvpy.utilities.progressbar"]], "mvpy.utilities.version module": [[73, "module-mvpy.utilities.version"]], "numpy": [[59, null]], "pearsonr": [[45, null]], "pearsonr_d": [[46, null]], "raised_cosine_window": [[57, null]], "rank": [[47, null]], "roc_auc": [[48, null]], "spearmanr": [[49, null]], "spearmanr_d": [[50, null]], "torch": [[60, null]]}, "docnames": ["api/index", "api/mvpy", "api/mvpy.crossvalidation", "api/mvpy.dataset", "api/mvpy.estimators", "api/mvpy.math", "api/mvpy.preprocessing", "api/mvpy.signal", "api/mvpy.utilities", "auto_examples/index", "auto_examples/sg_execution_times", "index", "modules/generated/mvpy.crossvalidation.KFold", "modules/generated/mvpy.crossvalidation.RepeatedKFold", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold", "modules/generated/mvpy.crossvalidation.StratifiedKFold", "modules/generated/mvpy.dataset.make_meeg_categorical", "modules/generated/mvpy.dataset.make_meeg_colours", "modules/generated/mvpy.dataset.make_meeg_continuous", "modules/generated/mvpy.dataset.make_meeg_discrete", "modules/generated/mvpy.dataset.make_meeg_layout", "modules/generated/mvpy.estimators.B2B", "modules/generated/mvpy.estimators.Classifier", "modules/generated/mvpy.estimators.Covariance", "modules/generated/mvpy.estimators.KernelRidgeCV", "modules/generated/mvpy.estimators.RSA", "modules/generated/mvpy.estimators.ReceptiveField", "modules/generated/mvpy.estimators.RidgeCV", "modules/generated/mvpy.estimators.RidgeClassifier", "modules/generated/mvpy.estimators.RidgeDecoder", "modules/generated/mvpy.estimators.RidgeEncoder", "modules/generated/mvpy.estimators.SVC", "modules/generated/mvpy.estimators.Sliding", "modules/generated/mvpy.estimators.TimeDelayed", "modules/generated/mvpy.math.accuracy", "modules/generated/mvpy.math.cosine", "modules/generated/mvpy.math.cosine_d", "modules/generated/mvpy.math.cv_euclidean", "modules/generated/mvpy.math.cv_mahalanobis", "modules/generated/mvpy.math.euclidean", "modules/generated/mvpy.math.kernel_linear", "modules/generated/mvpy.math.kernel_poly", "modules/generated/mvpy.math.kernel_rbf", "modules/generated/mvpy.math.kernel_sigmoid", "modules/generated/mvpy.math.mahalanobis", "modules/generated/mvpy.math.pearsonr", "modules/generated/mvpy.math.pearsonr_d", "modules/generated/mvpy.math.rank", "modules/generated/mvpy.math.roc_auc", "modules/generated/mvpy.math.spearmanr", "modules/generated/mvpy.math.spearmanr_d", "modules/generated/mvpy.preprocessing.Clamp", "modules/generated/mvpy.preprocessing.LabelBinariser", "modules/generated/mvpy.preprocessing.RobustScaler", "modules/generated/mvpy.preprocessing.Scaler", "modules/generated/mvpy.signal.hamming_window", "modules/generated/mvpy.signal.hann_window", "modules/generated/mvpy.signal.raised_cosine_window", "modules/generated/mvpy.utilities.Progressbar", "modules/generated/mvpy.utilities.compile.numpy", "modules/generated/mvpy.utilities.compile.torch", "modules/generated/mvpy.utilities.env.get_var", "modules/generated/mvpy.utilities.env.is_enabled", "modules/generated/mvpy.utilities.version.compare", "sg_execution_times", "source/modules", "source/mvpy", "source/mvpy.crossvalidation", "source/mvpy.dataset", "source/mvpy.estimators", "source/mvpy.math", "source/mvpy.preprocessing", "source/mvpy.signal", "source/mvpy.utilities"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["api/index.rst", "api/mvpy.rst", "api/mvpy.crossvalidation.rst", "api/mvpy.dataset.rst", "api/mvpy.estimators.rst", "api/mvpy.math.rst", "api/mvpy.preprocessing.rst", "api/mvpy.signal.rst", "api/mvpy.utilities.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "index.rst", "modules/generated/mvpy.crossvalidation.KFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedKFold.rst", "modules/generated/mvpy.crossvalidation.RepeatedStratifiedKFold.rst", "modules/generated/mvpy.crossvalidation.StratifiedKFold.rst", "modules/generated/mvpy.dataset.make_meeg_categorical.rst", "modules/generated/mvpy.dataset.make_meeg_colours.rst", "modules/generated/mvpy.dataset.make_meeg_continuous.rst", "modules/generated/mvpy.dataset.make_meeg_discrete.rst", "modules/generated/mvpy.dataset.make_meeg_layout.rst", "modules/generated/mvpy.estimators.B2B.rst", "modules/generated/mvpy.estimators.Classifier.rst", "modules/generated/mvpy.estimators.Covariance.rst", "modules/generated/mvpy.estimators.KernelRidgeCV.rst", "modules/generated/mvpy.estimators.RSA.rst", "modules/generated/mvpy.estimators.ReceptiveField.rst", "modules/generated/mvpy.estimators.RidgeCV.rst", "modules/generated/mvpy.estimators.RidgeClassifier.rst", "modules/generated/mvpy.estimators.RidgeDecoder.rst", "modules/generated/mvpy.estimators.RidgeEncoder.rst", "modules/generated/mvpy.estimators.SVC.rst", "modules/generated/mvpy.estimators.Sliding.rst", "modules/generated/mvpy.estimators.TimeDelayed.rst", "modules/generated/mvpy.math.accuracy.rst", "modules/generated/mvpy.math.cosine.rst", "modules/generated/mvpy.math.cosine_d.rst", "modules/generated/mvpy.math.cv_euclidean.rst", "modules/generated/mvpy.math.cv_mahalanobis.rst", "modules/generated/mvpy.math.euclidean.rst", "modules/generated/mvpy.math.kernel_linear.rst", "modules/generated/mvpy.math.kernel_poly.rst", "modules/generated/mvpy.math.kernel_rbf.rst", "modules/generated/mvpy.math.kernel_sigmoid.rst", "modules/generated/mvpy.math.mahalanobis.rst", "modules/generated/mvpy.math.pearsonr.rst", "modules/generated/mvpy.math.pearsonr_d.rst", "modules/generated/mvpy.math.rank.rst", "modules/generated/mvpy.math.roc_auc.rst", "modules/generated/mvpy.math.spearmanr.rst", "modules/generated/mvpy.math.spearmanr_d.rst", "modules/generated/mvpy.preprocessing.Clamp.rst", "modules/generated/mvpy.preprocessing.LabelBinariser.rst", "modules/generated/mvpy.preprocessing.RobustScaler.rst", "modules/generated/mvpy.preprocessing.Scaler.rst", "modules/generated/mvpy.signal.hamming_window.rst", "modules/generated/mvpy.signal.hann_window.rst", "modules/generated/mvpy.signal.raised_cosine_window.rst", "modules/generated/mvpy.utilities.Progressbar.rst", "modules/generated/mvpy.utilities.compile.numpy.rst", "modules/generated/mvpy.utilities.compile.torch.rst", "modules/generated/mvpy.utilities.env.get_var.rst", "modules/generated/mvpy.utilities.env.is_enabled.rst", "modules/generated/mvpy.utilities.version.compare.rst", "sg_execution_times.rst", "source/modules.rst", "source/mvpy.rst", "source/mvpy.crossvalidation.rst", "source/mvpy.dataset.rst", "source/mvpy.estimators.rst", "source/mvpy.math.rst", "source/mvpy.preprocessing.rst", "source/mvpy.signal.rst", "source/mvpy.utilities.rst"], "indexentries": {"accuracy() (in module mvpy.math)": [[34, "mvpy.math.accuracy", false]], "accuracy() (in module mvpy.math.accuracy)": [[70, "mvpy.math.accuracy.accuracy", false]], "b2b (class in mvpy.estimators)": [[21, "mvpy.estimators.B2B", false]], "b2b (class in mvpy.estimators.b2b)": [[69, "mvpy.estimators.b2b.B2B", false]], "clamp (class in mvpy.preprocessing)": [[51, "mvpy.preprocessing.Clamp", false]], "clamp (class in mvpy.preprocessing.clamp)": [[71, "mvpy.preprocessing.clamp.Clamp", false]], "classifier (class in mvpy.estimators)": [[22, "mvpy.estimators.Classifier", false]], "classifier (class in mvpy.estimators.classifier)": [[69, "mvpy.estimators.classifier.Classifier", false]], "clone() (mvpy.estimators.b2b method)": [[21, "mvpy.estimators.B2B.clone", false]], "clone() (mvpy.estimators.b2b.b2b method)": [[69, "mvpy.estimators.b2b.B2B.clone", false]], "clone() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.clone", false]], "clone() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.clone", false]], "clone() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.clone", false]], "clone() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.clone", false]], "clone() (mvpy.estimators.csp.csp method)": [[69, "mvpy.estimators.csp.CSP.clone", false]], "clone() (mvpy.estimators.kernelridgecv method)": [[24, "mvpy.estimators.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[69, "mvpy.estimators.kernelridgecv.KernelRidgeCV.clone", false]], "clone() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.clone", false]], "clone() (mvpy.estimators.ridgecv method)": [[27, "mvpy.estimators.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgecv.ridgecv method)": [[69, "mvpy.estimators.ridgecv.RidgeCV.clone", false]], "clone() (mvpy.estimators.ridgedecoder method)": [[29, "mvpy.estimators.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[69, "mvpy.estimators.ridgedecoder.RidgeDecoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder method)": [[30, "mvpy.estimators.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[69, "mvpy.estimators.ridgeencoder.RidgeEncoder.clone", false]], "clone() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.clone", false]], "clone() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.clone", false]], "clone() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.clone", false]], "clone() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.clone", false]], "clone() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.clone", false]], "clone() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.clone", false]], "clone() (mvpy.estimators.timedelayed method)": [[33, "mvpy.estimators.TimeDelayed.clone", false]], "clone() (mvpy.estimators.timedelayed.timedelayed method)": [[69, "mvpy.estimators.timedelayed.TimeDelayed.clone", false]], "clone() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.clone", false]], "clone() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.clone", false]], "clone() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.clone", false]], "clone() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.clone", false]], "clone() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.clone", false]], "clone() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.clone", false]], "collect() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.collect", false]], "collect() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.collect", false]], "compare() (in module mvpy.utilities.version)": [[63, "mvpy.utilities.version.compare", false], [73, "mvpy.utilities.version.compare", false]], "copy() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.copy", false]], "copy() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.copy", false]], "copy() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.copy", false]], "copy() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.copy", false]], "copy() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.copy", false]], "copy() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.copy", false]], "copy() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.copy", false]], "copy() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.copy", false]], "copy() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.copy", false]], "copy() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.copy", false]], "cosine() (in module mvpy.math)": [[35, "mvpy.math.cosine", false]], "cosine() (in module mvpy.math.cosine)": [[70, "mvpy.math.cosine.cosine", false]], "cosine_d() (in module mvpy.math)": [[36, "mvpy.math.cosine_d", false]], "cosine_d() (in module mvpy.math.cosine)": [[70, "mvpy.math.cosine.cosine_d", false]], "covariance (class in mvpy.estimators)": [[23, "mvpy.estimators.Covariance", false]], "covariance (class in mvpy.estimators.covariance)": [[69, "mvpy.estimators.covariance.Covariance", false]], "csp (class in mvpy.estimators.csp)": [[69, "mvpy.estimators.csp.CSP", false]], "cv_euclidean() (in module mvpy.math)": [[37, "mvpy.math.cv_euclidean", false]], "cv_euclidean() (in module mvpy.math.crossvalidated)": [[70, "mvpy.math.crossvalidated.cv_euclidean", false]], "cv_mahalanobis() (in module mvpy.math)": [[38, "mvpy.math.cv_mahalanobis", false]], "cv_mahalanobis() (in module mvpy.math.crossvalidated)": [[70, "mvpy.math.crossvalidated.cv_mahalanobis", false]], "cvresult (class in mvpy.crossvalidation.cross_val_score)": [[67, "mvpy.crossvalidation.cross_val_score.CVResult", false]], "decision_function() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.decision_function", false]], "decision_function() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.decision_function", false]], "decision_function() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.decision_function", false]], "euclidean() (in module mvpy.math)": [[39, "mvpy.math.euclidean", false]], "euclidean() (in module mvpy.math.euclidean)": [[70, "mvpy.math.euclidean.euclidean", false]], "fit() (mvpy.estimators.b2b method)": [[21, "mvpy.estimators.B2B.fit", false]], "fit() (mvpy.estimators.b2b.b2b method)": [[69, "mvpy.estimators.b2b.B2B.fit", false]], "fit() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.fit", false]], "fit() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.fit", false]], "fit() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.fit", false]], "fit() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.fit", false]], "fit() (mvpy.estimators.csp.csp method)": [[69, "mvpy.estimators.csp.CSP.fit", false]], "fit() (mvpy.estimators.kernelridgecv method)": [[24, "mvpy.estimators.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[69, "mvpy.estimators.kernelridgecv.KernelRidgeCV.fit", false]], "fit() (mvpy.estimators.receptivefield method)": [[26, "mvpy.estimators.ReceptiveField.fit", false]], "fit() (mvpy.estimators.receptivefield.receptivefield method)": [[69, "mvpy.estimators.receptivefield.ReceptiveField.fit", false]], "fit() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.fit", false]], "fit() (mvpy.estimators.ridgecv method)": [[27, "mvpy.estimators.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgecv.ridgecv method)": [[69, "mvpy.estimators.ridgecv.RidgeCV.fit", false]], "fit() (mvpy.estimators.ridgedecoder method)": [[29, "mvpy.estimators.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[69, "mvpy.estimators.ridgedecoder.RidgeDecoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder method)": [[30, "mvpy.estimators.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[69, "mvpy.estimators.ridgeencoder.RidgeEncoder.fit", false]], "fit() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.fit", false]], "fit() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.fit", false]], "fit() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.fit", false]], "fit() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.fit", false]], "fit() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.fit", false]], "fit() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.fit", false]], "fit() (mvpy.estimators.timedelayed method)": [[33, "mvpy.estimators.TimeDelayed.fit", false]], "fit() (mvpy.estimators.timedelayed.timedelayed method)": [[69, "mvpy.estimators.timedelayed.TimeDelayed.fit", false]], "fit() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.fit", false]], "fit() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.fit", false]], "fit() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit", false]], "fit() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.fit", false]], "fit() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.fit", false]], "fit() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.fit", false]], "fit_transform() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.fit_transform", false]], "fit_transform() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.fit_transform", false]], "fit_transform() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.fit_transform", false]], "full_rdm() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.full_rdm", false]], "full_rdm() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.full_rdm", false]], "get_var() (in module mvpy.utilities.env)": [[61, "mvpy.utilities.env.get_var", false], [73, "mvpy.utilities.env.get_var", false]], "hamming_window() (in module mvpy.signal)": [[55, "mvpy.signal.hamming_window", false]], "hamming_window() (in module mvpy.signal.hammingwindow)": [[72, "mvpy.signal.hammingwindow.hamming_window", false]], "hann_window() (in module mvpy.signal)": [[56, "mvpy.signal.hann_window", false]], "hann_window() (in module mvpy.signal.hannwindow)": [[72, "mvpy.signal.hannwindow.hann_window", false]], "inverse_transform() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.inverse_transform", false]], "inverse_transform() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.inverse_transform", false]], "is_enabled() (in module mvpy.utilities.env)": [[62, "mvpy.utilities.env.is_enabled", false], [73, "mvpy.utilities.env.is_enabled", false]], "kernel_linear() (in module mvpy.math)": [[40, "mvpy.math.kernel_linear", false]], "kernel_linear() (in module mvpy.math.kernel_linear)": [[70, "mvpy.math.kernel_linear.kernel_linear", false]], "kernel_poly() (in module mvpy.math)": [[41, "mvpy.math.kernel_poly", false]], "kernel_poly() (in module mvpy.math.kernel_poly)": [[70, "mvpy.math.kernel_poly.kernel_poly", false]], "kernel_rbf() (in module mvpy.math)": [[42, "mvpy.math.kernel_rbf", false]], "kernel_rbf() (in module mvpy.math.kernel_rbf)": [[70, "mvpy.math.kernel_rbf.kernel_rbf", false]], "kernel_sigmoid() (in module mvpy.math)": [[43, "mvpy.math.kernel_sigmoid", false]], "kernel_sigmoid() (in module mvpy.math.kernel_sigmoid)": [[70, "mvpy.math.kernel_sigmoid.kernel_sigmoid", false]], "kernelridgecv (class in mvpy.estimators)": [[24, "mvpy.estimators.KernelRidgeCV", false]], "kernelridgecv (class in mvpy.estimators.kernelridgecv)": [[69, "mvpy.estimators.kernelridgecv.KernelRidgeCV", false]], "kfold (class in mvpy.crossvalidation)": [[12, "mvpy.crossvalidation.KFold", false]], "kfold (class in mvpy.crossvalidation.kfold)": [[67, "mvpy.crossvalidation.kfold.KFold", false]], "labelbinariser (class in mvpy.preprocessing)": [[52, "mvpy.preprocessing.LabelBinariser", false]], "labelbinariser (class in mvpy.preprocessing.labelbinariser)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser", false]], "mahalanobis() (in module mvpy.math)": [[44, "mvpy.math.mahalanobis", false]], "mahalanobis() (in module mvpy.math.mahalanobis)": [[70, "mvpy.math.mahalanobis.mahalanobis", false]], "make_meeg_categorical() (in module mvpy.dataset)": [[16, "mvpy.dataset.make_meeg_categorical", false]], "make_meeg_categorical() (in module mvpy.dataset.make_meeg_categorical)": [[68, "mvpy.dataset.make_meeg_categorical.make_meeg_categorical", false]], "make_meeg_colours() (in module mvpy.dataset)": [[17, "mvpy.dataset.make_meeg_colours", false]], "make_meeg_colours() (in module mvpy.dataset.make_meeg_colours)": [[68, "mvpy.dataset.make_meeg_colours.make_meeg_colours", false]], "make_meeg_continuous() (in module mvpy.dataset)": [[18, "mvpy.dataset.make_meeg_continuous", false]], "make_meeg_continuous() (in module mvpy.dataset.make_meeg_continuous)": [[68, "mvpy.dataset.make_meeg_continuous.make_meeg_continuous", false]], "make_meeg_discrete() (in module mvpy.dataset)": [[19, "mvpy.dataset.make_meeg_discrete", false]], "make_meeg_discrete() (in module mvpy.dataset.make_meeg_discrete)": [[68, "mvpy.dataset.make_meeg_discrete.make_meeg_discrete", false]], "make_meeg_layout() (in module mvpy.dataset)": [[20, "mvpy.dataset.make_meeg_layout", false]], "make_meeg_layout() (in module mvpy.dataset.make_meeg_layout)": [[68, "mvpy.dataset.make_meeg_layout.make_meeg_layout", false]], "module": [[1, "module-mvpy", false], [2, "module-mvpy.crossvalidation", false], [3, "module-mvpy.dataset", false], [4, "module-mvpy.estimators", false], [5, "module-mvpy.math", false], [6, "module-mvpy.preprocessing", false], [7, "module-mvpy.signal", false], [8, "module-mvpy.utilities", false], [66, "module-mvpy", false], [67, "module-mvpy.crossvalidation", false], [67, "module-mvpy.crossvalidation.cross_val_score", false], [67, "module-mvpy.crossvalidation.kfold", false], [67, "module-mvpy.crossvalidation.repeatedkfold", false], [67, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false], [67, "module-mvpy.crossvalidation.stratifiedkfold", false], [67, "module-mvpy.crossvalidation.validator", false], [68, "module-mvpy.dataset", false], [68, "module-mvpy.dataset.make_meeg_categorical", false], [68, "module-mvpy.dataset.make_meeg_colours", false], [68, "module-mvpy.dataset.make_meeg_continuous", false], [68, "module-mvpy.dataset.make_meeg_discrete", false], [68, "module-mvpy.dataset.make_meeg_layout", false], [69, "module-mvpy.estimators", false], [69, "module-mvpy.estimators.b2b", false], [69, "module-mvpy.estimators.classifier", false], [69, "module-mvpy.estimators.covariance", false], [69, "module-mvpy.estimators.csp", false], [69, "module-mvpy.estimators.kernelridgecv", false], [69, "module-mvpy.estimators.receptivefield", false], [69, "module-mvpy.estimators.ridgeclassifier", false], [69, "module-mvpy.estimators.ridgecv", false], [69, "module-mvpy.estimators.ridgedecoder", false], [69, "module-mvpy.estimators.ridgeencoder", false], [69, "module-mvpy.estimators.rsa", false], [69, "module-mvpy.estimators.sliding", false], [69, "module-mvpy.estimators.svc", false], [69, "module-mvpy.estimators.timedelayed", false], [70, "module-mvpy.math", false], [70, "module-mvpy.math.accuracy", false], [70, "module-mvpy.math.cosine", false], [70, "module-mvpy.math.crossvalidated", false], [70, "module-mvpy.math.euclidean", false], [70, "module-mvpy.math.kernel_linear", false], [70, "module-mvpy.math.kernel_poly", false], [70, "module-mvpy.math.kernel_rbf", false], [70, "module-mvpy.math.kernel_sigmoid", false], [70, "module-mvpy.math.mahalanobis", false], [70, "module-mvpy.math.pearsonr", false], [70, "module-mvpy.math.rank", false], [70, "module-mvpy.math.roc_auc", false], [70, "module-mvpy.math.spearmanr", false], [71, "module-mvpy.preprocessing", false], [71, "module-mvpy.preprocessing.clamp", false], [71, "module-mvpy.preprocessing.labelbinariser", false], [71, "module-mvpy.preprocessing.robustscaler", false], [71, "module-mvpy.preprocessing.scaler", false], [72, "module-mvpy.signal", false], [72, "module-mvpy.signal.hammingwindow", false], [72, "module-mvpy.signal.hannwindow", false], [72, "module-mvpy.signal.raisedcosinewindow", false], [73, "module-mvpy.utilities", false], [73, "module-mvpy.utilities.compile", false], [73, "module-mvpy.utilities.env", false], [73, "module-mvpy.utilities.progressbar", false], [73, "module-mvpy.utilities.version", false]], "mvpy": [[1, "module-mvpy", false], [66, "module-mvpy", false]], "mvpy.crossvalidation": [[2, "module-mvpy.crossvalidation", false], [67, "module-mvpy.crossvalidation", false]], "mvpy.crossvalidation.cross_val_score": [[67, "module-mvpy.crossvalidation.cross_val_score", false]], "mvpy.crossvalidation.kfold": [[67, "module-mvpy.crossvalidation.kfold", false]], "mvpy.crossvalidation.repeatedkfold": [[67, "module-mvpy.crossvalidation.repeatedkfold", false]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[67, "module-mvpy.crossvalidation.repeatedstratifiedkfold", false]], "mvpy.crossvalidation.stratifiedkfold": [[67, "module-mvpy.crossvalidation.stratifiedkfold", false]], "mvpy.crossvalidation.validator": [[67, "module-mvpy.crossvalidation.validator", false]], "mvpy.dataset": [[3, "module-mvpy.dataset", false], [68, "module-mvpy.dataset", false]], "mvpy.dataset.make_meeg_categorical": [[68, "module-mvpy.dataset.make_meeg_categorical", false]], "mvpy.dataset.make_meeg_colours": [[68, "module-mvpy.dataset.make_meeg_colours", false]], "mvpy.dataset.make_meeg_continuous": [[68, "module-mvpy.dataset.make_meeg_continuous", false]], "mvpy.dataset.make_meeg_discrete": [[68, "module-mvpy.dataset.make_meeg_discrete", false]], "mvpy.dataset.make_meeg_layout": [[68, "module-mvpy.dataset.make_meeg_layout", false]], "mvpy.estimators": [[4, "module-mvpy.estimators", false], [69, "module-mvpy.estimators", false]], "mvpy.estimators.b2b": [[69, "module-mvpy.estimators.b2b", false]], "mvpy.estimators.classifier": [[69, "module-mvpy.estimators.classifier", false]], "mvpy.estimators.covariance": [[69, "module-mvpy.estimators.covariance", false]], "mvpy.estimators.csp": [[69, "module-mvpy.estimators.csp", false]], "mvpy.estimators.kernelridgecv": [[69, "module-mvpy.estimators.kernelridgecv", false]], "mvpy.estimators.receptivefield": [[69, "module-mvpy.estimators.receptivefield", false]], "mvpy.estimators.ridgeclassifier": [[69, "module-mvpy.estimators.ridgeclassifier", false]], "mvpy.estimators.ridgecv": [[69, "module-mvpy.estimators.ridgecv", false]], "mvpy.estimators.ridgedecoder": [[69, "module-mvpy.estimators.ridgedecoder", false]], "mvpy.estimators.ridgeencoder": [[69, "module-mvpy.estimators.ridgeencoder", false]], "mvpy.estimators.rsa": [[69, "module-mvpy.estimators.rsa", false]], "mvpy.estimators.sliding": [[69, "module-mvpy.estimators.sliding", false]], "mvpy.estimators.svc": [[69, "module-mvpy.estimators.svc", false]], "mvpy.estimators.timedelayed": [[69, "module-mvpy.estimators.timedelayed", false]], "mvpy.math": [[5, "module-mvpy.math", false], [70, "module-mvpy.math", false]], "mvpy.math.accuracy": [[70, "module-mvpy.math.accuracy", false]], "mvpy.math.cosine": [[70, "module-mvpy.math.cosine", false]], "mvpy.math.crossvalidated": [[70, "module-mvpy.math.crossvalidated", false]], "mvpy.math.euclidean": [[70, "module-mvpy.math.euclidean", false]], "mvpy.math.kernel_linear": [[70, "module-mvpy.math.kernel_linear", false]], "mvpy.math.kernel_poly": [[70, "module-mvpy.math.kernel_poly", false]], "mvpy.math.kernel_rbf": [[70, "module-mvpy.math.kernel_rbf", false]], "mvpy.math.kernel_sigmoid": [[70, "module-mvpy.math.kernel_sigmoid", false]], "mvpy.math.mahalanobis": [[70, "module-mvpy.math.mahalanobis", false]], "mvpy.math.pearsonr": [[70, "module-mvpy.math.pearsonr", false]], "mvpy.math.rank": [[70, "module-mvpy.math.rank", false]], "mvpy.math.roc_auc": [[70, "module-mvpy.math.roc_auc", false]], "mvpy.math.spearmanr": [[70, "module-mvpy.math.spearmanr", false]], "mvpy.preprocessing": [[6, "module-mvpy.preprocessing", false], [71, "module-mvpy.preprocessing", false]], "mvpy.preprocessing.clamp": [[71, "module-mvpy.preprocessing.clamp", false]], "mvpy.preprocessing.labelbinariser": [[71, "module-mvpy.preprocessing.labelbinariser", false]], "mvpy.preprocessing.robustscaler": [[71, "module-mvpy.preprocessing.robustscaler", false]], "mvpy.preprocessing.scaler": [[71, "module-mvpy.preprocessing.scaler", false]], "mvpy.signal": [[7, "module-mvpy.signal", false], [72, "module-mvpy.signal", false]], "mvpy.signal.hammingwindow": [[72, "module-mvpy.signal.hammingwindow", false]], "mvpy.signal.hannwindow": [[72, "module-mvpy.signal.hannwindow", false]], "mvpy.signal.raisedcosinewindow": [[72, "module-mvpy.signal.raisedcosinewindow", false]], "mvpy.utilities": [[8, "module-mvpy.utilities", false], [73, "module-mvpy.utilities", false]], "mvpy.utilities.compile": [[73, "module-mvpy.utilities.compile", false]], "mvpy.utilities.env": [[73, "module-mvpy.utilities.env", false]], "mvpy.utilities.progressbar": [[73, "module-mvpy.utilities.progressbar", false]], "mvpy.utilities.version": [[73, "module-mvpy.utilities.version", false]], "numpy() (in module mvpy.utilities.compile)": [[59, "mvpy.utilities.compile.numpy", false], [73, "mvpy.utilities.compile.numpy", false]], "pearsonr() (in module mvpy.math)": [[45, "mvpy.math.pearsonr", false]], "pearsonr() (in module mvpy.math.pearsonr)": [[70, "mvpy.math.pearsonr.pearsonr", false]], "pearsonr_d() (in module mvpy.math)": [[46, "mvpy.math.pearsonr_d", false]], "pearsonr_d() (in module mvpy.math.pearsonr)": [[70, "mvpy.math.pearsonr.pearsonr_d", false]], "predict() (mvpy.estimators.b2b method)": [[21, "mvpy.estimators.B2B.predict", false]], "predict() (mvpy.estimators.b2b.b2b method)": [[69, "mvpy.estimators.b2b.B2B.predict", false]], "predict() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.predict", false]], "predict() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.predict", false]], "predict() (mvpy.estimators.csp.csp method)": [[69, "mvpy.estimators.csp.CSP.predict", false]], "predict() (mvpy.estimators.kernelridgecv method)": [[24, "mvpy.estimators.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.kernelridgecv.kernelridgecv method)": [[69, "mvpy.estimators.kernelridgecv.KernelRidgeCV.predict", false]], "predict() (mvpy.estimators.receptivefield method)": [[26, "mvpy.estimators.ReceptiveField.predict", false]], "predict() (mvpy.estimators.receptivefield.receptivefield method)": [[69, "mvpy.estimators.receptivefield.ReceptiveField.predict", false]], "predict() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict", false]], "predict() (mvpy.estimators.ridgecv method)": [[27, "mvpy.estimators.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgecv.ridgecv method)": [[69, "mvpy.estimators.ridgecv.RidgeCV.predict", false]], "predict() (mvpy.estimators.ridgedecoder method)": [[29, "mvpy.estimators.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgedecoder.ridgedecoder method)": [[69, "mvpy.estimators.ridgedecoder.RidgeDecoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder method)": [[30, "mvpy.estimators.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.ridgeencoder.ridgeencoder method)": [[69, "mvpy.estimators.ridgeencoder.RidgeEncoder.predict", false]], "predict() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.predict", false]], "predict() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.predict", false]], "predict() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.predict", false]], "predict() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.predict", false]], "predict() (mvpy.estimators.timedelayed method)": [[33, "mvpy.estimators.TimeDelayed.predict", false]], "predict() (mvpy.estimators.timedelayed.timedelayed method)": [[69, "mvpy.estimators.timedelayed.TimeDelayed.predict", false]], "predict_proba() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier method)": [[28, "mvpy.estimators.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.ridgeclassifier.ridgeclassifier method)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.predict_proba", false]], "predict_proba() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.predict_proba", false]], "predict_proba() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.predict_proba", false]], "progressbar (class in mvpy.utilities)": [[58, "mvpy.utilities.Progressbar", false]], "progressbar (class in mvpy.utilities.progressbar)": [[73, "mvpy.utilities.progressbar.Progressbar", false]], "raised_cosine_window() (in module mvpy.signal)": [[57, "mvpy.signal.raised_cosine_window", false]], "raised_cosine_window() (in module mvpy.signal.raisedcosinewindow)": [[72, "mvpy.signal.raisedcosinewindow.raised_cosine_window", false]], "rank() (in module mvpy.math)": [[47, "mvpy.math.rank", false]], "rank() (in module mvpy.math.rank)": [[70, "mvpy.math.rank.rank", false]], "receptivefield (class in mvpy.estimators)": [[26, "mvpy.estimators.ReceptiveField", false]], "receptivefield (class in mvpy.estimators.receptivefield)": [[69, "mvpy.estimators.receptivefield.ReceptiveField", false]], "repeatedkfold (class in mvpy.crossvalidation)": [[13, "mvpy.crossvalidation.RepeatedKFold", false]], "repeatedkfold (class in mvpy.crossvalidation.repeatedkfold)": [[67, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation)": [[14, "mvpy.crossvalidation.RepeatedStratifiedKFold", false]], "repeatedstratifiedkfold (class in mvpy.crossvalidation.repeatedstratifiedkfold)": [[67, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold", false]], "ridgeclassifier (class in mvpy.estimators)": [[28, "mvpy.estimators.RidgeClassifier", false]], "ridgeclassifier (class in mvpy.estimators.ridgeclassifier)": [[69, "mvpy.estimators.ridgeclassifier.RidgeClassifier", false]], "ridgecv (class in mvpy.estimators)": [[27, "mvpy.estimators.RidgeCV", false]], "ridgecv (class in mvpy.estimators.ridgecv)": [[69, "mvpy.estimators.ridgecv.RidgeCV", false]], "ridgedecoder (class in mvpy.estimators)": [[29, "mvpy.estimators.RidgeDecoder", false]], "ridgedecoder (class in mvpy.estimators.ridgedecoder)": [[69, "mvpy.estimators.ridgedecoder.RidgeDecoder", false]], "ridgeencoder (class in mvpy.estimators)": [[30, "mvpy.estimators.RidgeEncoder", false]], "ridgeencoder (class in mvpy.estimators.ridgeencoder)": [[69, "mvpy.estimators.ridgeencoder.RidgeEncoder", false]], "robustscaler (class in mvpy.preprocessing)": [[53, "mvpy.preprocessing.RobustScaler", false]], "robustscaler (class in mvpy.preprocessing.robustscaler)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler", false]], "roc_auc() (in module mvpy.math)": [[48, "mvpy.math.roc_auc", false]], "roc_auc() (in module mvpy.math.roc_auc)": [[70, "mvpy.math.roc_auc.roc_auc", false]], "rsa (class in mvpy.estimators)": [[25, "mvpy.estimators.RSA", false]], "rsa (class in mvpy.estimators.rsa)": [[69, "mvpy.estimators.rsa.RSA", false]], "scaler (class in mvpy.preprocessing)": [[54, "mvpy.preprocessing.Scaler", false]], "scaler (class in mvpy.preprocessing.scaler)": [[71, "mvpy.preprocessing.scaler.Scaler", false]], "score() (in module mvpy.crossvalidation.cross_val_score)": [[67, "mvpy.crossvalidation.cross_val_score.score", false]], "sliding (class in mvpy.estimators)": [[32, "mvpy.estimators.Sliding", false]], "sliding (class in mvpy.estimators.sliding)": [[69, "mvpy.estimators.sliding.Sliding", false]], "spearmanr() (in module mvpy.math)": [[49, "mvpy.math.spearmanr", false]], "spearmanr() (in module mvpy.math.spearmanr)": [[70, "mvpy.math.spearmanr.spearmanr", false]], "spearmanr_d() (in module mvpy.math)": [[50, "mvpy.math.spearmanr_d", false]], "spearmanr_d() (in module mvpy.math.spearmanr)": [[70, "mvpy.math.spearmanr.spearmanr_d", false]], "split() (mvpy.crossvalidation.kfold method)": [[12, "mvpy.crossvalidation.KFold.split", false]], "split() (mvpy.crossvalidation.kfold.kfold method)": [[67, "mvpy.crossvalidation.kfold.KFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold method)": [[13, "mvpy.crossvalidation.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[67, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[14, "mvpy.crossvalidation.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[67, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold method)": [[15, "mvpy.crossvalidation.StratifiedKFold.split", false]], "split() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[67, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.split", false]], "stratifiedkfold (class in mvpy.crossvalidation)": [[15, "mvpy.crossvalidation.StratifiedKFold", false]], "stratifiedkfold (class in mvpy.crossvalidation.stratifiedkfold)": [[67, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold", false]], "svc (class in mvpy.estimators)": [[31, "mvpy.estimators.SVC", false]], "svc (class in mvpy.estimators.svc)": [[69, "mvpy.estimators.svc.SVC", false]], "timedelayed (class in mvpy.estimators)": [[33, "mvpy.estimators.TimeDelayed", false]], "timedelayed (class in mvpy.estimators.timedelayed)": [[69, "mvpy.estimators.timedelayed.TimeDelayed", false]], "to_numpy() (mvpy.crossvalidation.kfold method)": [[12, "mvpy.crossvalidation.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.kfold.kfold method)": [[67, "mvpy.crossvalidation.kfold.KFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold method)": [[13, "mvpy.crossvalidation.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[67, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[14, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[67, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold method)": [[15, "mvpy.crossvalidation.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[67, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.to_numpy", false]], "to_numpy() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.to_numpy", false]], "to_numpy() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.to_numpy", false]], "to_numpy() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.to_numpy", false]], "to_torch() (mvpy.crossvalidation.kfold method)": [[12, "mvpy.crossvalidation.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.kfold.kfold method)": [[67, "mvpy.crossvalidation.kfold.KFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold method)": [[13, "mvpy.crossvalidation.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedkfold.repeatedkfold method)": [[67, "mvpy.crossvalidation.repeatedkfold.RepeatedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold method)": [[14, "mvpy.crossvalidation.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.repeatedstratifiedkfold.repeatedstratifiedkfold method)": [[67, "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold method)": [[15, "mvpy.crossvalidation.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.crossvalidation.stratifiedkfold.stratifiedkfold method)": [[67, "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold.to_torch", false]], "to_torch() (mvpy.estimators.classifier method)": [[22, "mvpy.estimators.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.classifier.classifier method)": [[69, "mvpy.estimators.classifier.Classifier.to_torch", false]], "to_torch() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.to_torch", false]], "to_torch() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.to_torch", false]], "to_torch() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.to_torch", false]], "to_torch() (mvpy.estimators.svc method)": [[31, "mvpy.estimators.SVC.to_torch", false]], "to_torch() (mvpy.estimators.svc.svc method)": [[69, "mvpy.estimators.svc.SVC.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.to_torch", false]], "to_torch() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.to_torch", false]], "torch() (in module mvpy.utilities.compile)": [[60, "mvpy.utilities.compile.torch", false], [73, "mvpy.utilities.compile.torch", false]], "tqdm_joblib() (in module mvpy.utilities.progressbar)": [[73, "mvpy.utilities.progressbar.tqdm_joblib", false]], "transform() (mvpy.estimators.covariance method)": [[23, "mvpy.estimators.Covariance.transform", false]], "transform() (mvpy.estimators.covariance.covariance method)": [[69, "mvpy.estimators.covariance.Covariance.transform", false]], "transform() (mvpy.estimators.rsa method)": [[25, "mvpy.estimators.RSA.transform", false]], "transform() (mvpy.estimators.rsa.rsa method)": [[69, "mvpy.estimators.rsa.RSA.transform", false]], "transform() (mvpy.estimators.sliding method)": [[32, "mvpy.estimators.Sliding.transform", false]], "transform() (mvpy.estimators.sliding.sliding method)": [[69, "mvpy.estimators.sliding.Sliding.transform", false]], "transform() (mvpy.preprocessing.clamp method)": [[51, "mvpy.preprocessing.Clamp.transform", false]], "transform() (mvpy.preprocessing.clamp.clamp method)": [[71, "mvpy.preprocessing.clamp.Clamp.transform", false]], "transform() (mvpy.preprocessing.labelbinariser method)": [[52, "mvpy.preprocessing.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.labelbinariser.labelbinariser method)": [[71, "mvpy.preprocessing.labelbinariser.LabelBinariser.transform", false]], "transform() (mvpy.preprocessing.robustscaler method)": [[53, "mvpy.preprocessing.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.robustscaler.robustscaler method)": [[71, "mvpy.preprocessing.robustscaler.RobustScaler.transform", false]], "transform() (mvpy.preprocessing.scaler method)": [[54, "mvpy.preprocessing.Scaler.transform", false]], "transform() (mvpy.preprocessing.scaler.scaler method)": [[71, "mvpy.preprocessing.scaler.Scaler.transform", false]], "validator (class in mvpy.crossvalidation.validator)": [[67, "mvpy.crossvalidation.validator.Validator", false]]}, "objects": {"": [[66, 0, 0, "-", "mvpy"]], "mvpy": [[67, 0, 0, "-", "crossvalidation"], [68, 0, 0, "-", "dataset"], [69, 0, 0, "-", "estimators"], [70, 0, 0, "-", "math"], [71, 0, 0, "-", "preprocessing"], [72, 0, 0, "-", "signal"], [73, 0, 0, "-", "utilities"]], "mvpy.crossvalidation": [[12, 1, 1, "", "KFold"], [13, 1, 1, "", "RepeatedKFold"], [14, 1, 1, "", "RepeatedStratifiedKFold"], [15, 1, 1, "", "StratifiedKFold"], [67, 0, 0, "-", "cross_val_score"], [67, 0, 0, "-", "kfold"], [67, 0, 0, "-", "repeatedkfold"], [67, 0, 0, "-", "repeatedstratifiedkfold"], [67, 0, 0, "-", "stratifiedkfold"], [67, 0, 0, "-", "validator"]], "mvpy.crossvalidation.KFold": [[12, 2, 1, "", "split"], [12, 2, 1, "", "to_numpy"], [12, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedKFold": [[13, 2, 1, "", "split"], [13, 2, 1, "", "to_numpy"], [13, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.RepeatedStratifiedKFold": [[14, 2, 1, "", "split"], [14, 2, 1, "", "to_numpy"], [14, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.StratifiedKFold": [[15, 2, 1, "", "split"], [15, 2, 1, "", "to_numpy"], [15, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.cross_val_score": [[67, 1, 1, "", "CVResult"], [67, 3, 1, "", "score"]], "mvpy.crossvalidation.kfold": [[67, 1, 1, "", "KFold"]], "mvpy.crossvalidation.kfold.KFold": [[67, 2, 1, "", "split"], [67, 2, 1, "", "to_numpy"], [67, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedkfold": [[67, 1, 1, "", "RepeatedKFold"]], "mvpy.crossvalidation.repeatedkfold.RepeatedKFold": [[67, 2, 1, "", "split"], [67, 2, 1, "", "to_numpy"], [67, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.repeatedstratifiedkfold": [[67, 1, 1, "", "RepeatedStratifiedKFold"]], "mvpy.crossvalidation.repeatedstratifiedkfold.RepeatedStratifiedKFold": [[67, 2, 1, "", "split"], [67, 2, 1, "", "to_numpy"], [67, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.stratifiedkfold": [[67, 1, 1, "", "StratifiedKFold"]], "mvpy.crossvalidation.stratifiedkfold.StratifiedKFold": [[67, 2, 1, "", "split"], [67, 2, 1, "", "to_numpy"], [67, 2, 1, "", "to_torch"]], "mvpy.crossvalidation.validator": [[67, 1, 1, "", "Validator"]], "mvpy.dataset": [[68, 0, 0, "-", "make_meeg_categorical"], [68, 0, 0, "-", "make_meeg_colours"], [68, 0, 0, "-", "make_meeg_continuous"], [68, 0, 0, "-", "make_meeg_discrete"], [68, 0, 0, "-", "make_meeg_layout"]], "mvpy.dataset.make_meeg_categorical": [[68, 3, 1, "", "make_meeg_categorical"]], "mvpy.dataset.make_meeg_colours": [[68, 3, 1, "", "make_meeg_colours"]], "mvpy.dataset.make_meeg_continuous": [[68, 3, 1, "", "make_meeg_continuous"]], "mvpy.dataset.make_meeg_discrete": [[68, 3, 1, "", "make_meeg_discrete"]], "mvpy.dataset.make_meeg_layout": [[68, 3, 1, "", "make_meeg_layout"]], "mvpy.estimators": [[21, 1, 1, "", "B2B"], [22, 1, 1, "", "Classifier"], [23, 1, 1, "", "Covariance"], [24, 1, 1, "", "KernelRidgeCV"], [25, 1, 1, "", "RSA"], [26, 1, 1, "", "ReceptiveField"], [27, 1, 1, "", "RidgeCV"], [28, 1, 1, "", "RidgeClassifier"], [29, 1, 1, "", "RidgeDecoder"], [30, 1, 1, "", "RidgeEncoder"], [31, 1, 1, "", "SVC"], [32, 1, 1, "", "Sliding"], [33, 1, 1, "", "TimeDelayed"], [69, 0, 0, "-", "b2b"], [69, 0, 0, "-", "classifier"], [69, 0, 0, "-", "covariance"], [69, 0, 0, "-", "csp"], [69, 0, 0, "-", "kernelridgecv"], [69, 0, 0, "-", "receptivefield"], [69, 0, 0, "-", "ridgeclassifier"], [69, 0, 0, "-", "ridgecv"], [69, 0, 0, "-", "ridgedecoder"], [69, 0, 0, "-", "ridgeencoder"], [69, 0, 0, "-", "rsa"], [69, 0, 0, "-", "sliding"], [69, 0, 0, "-", "svc"], [69, 0, 0, "-", "timedelayed"]], "mvpy.estimators.B2B": [[21, 2, 1, "", "clone"], [21, 2, 1, "", "fit"], [21, 2, 1, "", "predict"]], "mvpy.estimators.Classifier": [[22, 2, 1, "", "clone"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "decision_function"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "predict"], [22, 2, 1, "", "predict_proba"], [22, 2, 1, "", "to_numpy"], [22, 2, 1, "", "to_torch"]], "mvpy.estimators.Covariance": [[23, 2, 1, "", "clone"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "fit_transform"], [23, 2, 1, "", "to_numpy"], [23, 2, 1, "", "to_torch"], [23, 2, 1, "", "transform"]], "mvpy.estimators.KernelRidgeCV": [[24, 2, 1, "", "clone"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "predict"]], "mvpy.estimators.RSA": [[25, 2, 1, "", "clone"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "fit_transform"], [25, 2, 1, "", "full_rdm"], [25, 2, 1, "", "to_numpy"], [25, 2, 1, "", "to_torch"], [25, 2, 1, "", "transform"]], "mvpy.estimators.ReceptiveField": [[26, 2, 1, "", "fit"], [26, 2, 1, "", "predict"]], "mvpy.estimators.RidgeCV": [[27, 2, 1, "", "clone"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "predict"]], "mvpy.estimators.RidgeClassifier": [[28, 2, 1, "", "clone"], [28, 2, 1, "", "copy"], [28, 2, 1, "", "decision_function"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"]], "mvpy.estimators.RidgeDecoder": [[29, 2, 1, "", "clone"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "predict"]], "mvpy.estimators.RidgeEncoder": [[30, 2, 1, "", "clone"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "predict"]], "mvpy.estimators.SVC": [[31, 2, 1, "", "clone"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "decision_function"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "to_numpy"], [31, 2, 1, "", "to_torch"]], "mvpy.estimators.Sliding": [[32, 2, 1, "", "clone"], [32, 2, 1, "", "collect"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "fit_transform"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_proba"], [32, 2, 1, "", "transform"]], "mvpy.estimators.TimeDelayed": [[33, 2, 1, "", "clone"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "predict"]], "mvpy.estimators.b2b": [[69, 1, 1, "", "B2B"]], "mvpy.estimators.b2b.B2B": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.classifier": [[69, 1, 1, "", "Classifier"]], "mvpy.estimators.classifier.Classifier": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "decision_function"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"], [69, 2, 1, "", "predict_proba"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_torch"]], "mvpy.estimators.covariance": [[69, 1, 1, "", "Covariance"]], "mvpy.estimators.covariance.Covariance": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "fit_transform"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_torch"], [69, 2, 1, "", "transform"]], "mvpy.estimators.csp": [[69, 1, 1, "", "CSP"]], "mvpy.estimators.csp.CSP": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.kernelridgecv": [[69, 1, 1, "", "KernelRidgeCV"]], "mvpy.estimators.kernelridgecv.KernelRidgeCV": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.receptivefield": [[69, 1, 1, "", "ReceptiveField"]], "mvpy.estimators.receptivefield.ReceptiveField": [[69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.ridgeclassifier": [[69, 1, 1, "", "RidgeClassifier"]], "mvpy.estimators.ridgeclassifier.RidgeClassifier": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "decision_function"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"], [69, 2, 1, "", "predict_proba"]], "mvpy.estimators.ridgecv": [[69, 1, 1, "", "RidgeCV"]], "mvpy.estimators.ridgecv.RidgeCV": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.ridgedecoder": [[69, 1, 1, "", "RidgeDecoder"]], "mvpy.estimators.ridgedecoder.RidgeDecoder": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.ridgeencoder": [[69, 1, 1, "", "RidgeEncoder"]], "mvpy.estimators.ridgeencoder.RidgeEncoder": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.estimators.rsa": [[69, 1, 1, "", "RSA"]], "mvpy.estimators.rsa.RSA": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "fit_transform"], [69, 2, 1, "", "full_rdm"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_torch"], [69, 2, 1, "", "transform"]], "mvpy.estimators.sliding": [[69, 1, 1, "", "Sliding"]], "mvpy.estimators.sliding.Sliding": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "collect"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "fit_transform"], [69, 2, 1, "", "predict"], [69, 2, 1, "", "predict_proba"], [69, 2, 1, "", "transform"]], "mvpy.estimators.svc": [[69, 1, 1, "", "SVC"]], "mvpy.estimators.svc.SVC": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "decision_function"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"], [69, 2, 1, "", "predict_proba"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_torch"]], "mvpy.estimators.timedelayed": [[69, 1, 1, "", "TimeDelayed"]], "mvpy.estimators.timedelayed.TimeDelayed": [[69, 2, 1, "", "clone"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "predict"]], "mvpy.math": [[70, 0, 0, "-", "accuracy"], [70, 0, 0, "-", "cosine"], [36, 3, 1, "", "cosine_d"], [70, 0, 0, "-", "crossvalidated"], [37, 3, 1, "", "cv_euclidean"], [38, 3, 1, "", "cv_mahalanobis"], [70, 0, 0, "-", "euclidean"], [70, 0, 0, "-", "kernel_linear"], [70, 0, 0, "-", "kernel_poly"], [70, 0, 0, "-", "kernel_rbf"], [70, 0, 0, "-", "kernel_sigmoid"], [70, 0, 0, "-", "mahalanobis"], [70, 0, 0, "-", "pearsonr"], [46, 3, 1, "", "pearsonr_d"], [70, 0, 0, "-", "rank"], [70, 0, 0, "-", "roc_auc"], [70, 0, 0, "-", "spearmanr"], [50, 3, 1, "", "spearmanr_d"]], "mvpy.math.accuracy": [[70, 3, 1, "", "accuracy"]], "mvpy.math.cosine": [[70, 3, 1, "", "cosine"], [70, 3, 1, "", "cosine_d"]], "mvpy.math.crossvalidated": [[70, 3, 1, "", "cv_euclidean"], [70, 3, 1, "", "cv_mahalanobis"]], "mvpy.math.euclidean": [[70, 3, 1, "", "euclidean"]], "mvpy.math.kernel_linear": [[70, 3, 1, "", "kernel_linear"]], "mvpy.math.kernel_poly": [[70, 3, 1, "", "kernel_poly"]], "mvpy.math.kernel_rbf": [[70, 3, 1, "", "kernel_rbf"]], "mvpy.math.kernel_sigmoid": [[70, 3, 1, "", "kernel_sigmoid"]], "mvpy.math.mahalanobis": [[70, 3, 1, "", "mahalanobis"]], "mvpy.math.pearsonr": [[70, 3, 1, "", "pearsonr"], [70, 3, 1, "", "pearsonr_d"]], "mvpy.math.rank": [[70, 3, 1, "", "rank"]], "mvpy.math.roc_auc": [[70, 3, 1, "", "roc_auc"]], "mvpy.math.spearmanr": [[70, 3, 1, "", "spearmanr"], [70, 3, 1, "", "spearmanr_d"]], "mvpy.preprocessing": [[51, 1, 1, "", "Clamp"], [52, 1, 1, "", "LabelBinariser"], [53, 1, 1, "", "RobustScaler"], [54, 1, 1, "", "Scaler"], [71, 0, 0, "-", "clamp"], [71, 0, 0, "-", "labelbinariser"], [71, 0, 0, "-", "robustscaler"], [71, 0, 0, "-", "scaler"]], "mvpy.preprocessing.Clamp": [[51, 2, 1, "", "clone"], [51, 2, 1, "", "copy"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_transform"], [51, 2, 1, "", "inverse_transform"], [51, 2, 1, "", "to_numpy"], [51, 2, 1, "", "to_torch"], [51, 2, 1, "", "transform"]], "mvpy.preprocessing.LabelBinariser": [[52, 2, 1, "", "clone"], [52, 2, 1, "", "copy"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_transform"], [52, 2, 1, "", "inverse_transform"], [52, 2, 1, "", "to_numpy"], [52, 2, 1, "", "to_torch"], [52, 2, 1, "", "transform"]], "mvpy.preprocessing.RobustScaler": [[53, 2, 1, "", "clone"], [53, 2, 1, "", "copy"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_transform"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "to_numpy"], [53, 2, 1, "", "to_torch"], [53, 2, 1, "", "transform"]], "mvpy.preprocessing.Scaler": [[54, 2, 1, "", "clone"], [54, 2, 1, "", "copy"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_transform"], [54, 2, 1, "", "inverse_transform"], [54, 2, 1, "", "to_numpy"], [54, 2, 1, "", "to_torch"], [54, 2, 1, "", "transform"]], "mvpy.preprocessing.clamp": [[71, 1, 1, "", "Clamp"]], "mvpy.preprocessing.clamp.Clamp": [[71, 2, 1, "", "clone"], [71, 2, 1, "", "copy"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "to_numpy"], [71, 2, 1, "", "to_torch"], [71, 2, 1, "", "transform"]], "mvpy.preprocessing.labelbinariser": [[71, 1, 1, "", "LabelBinariser"]], "mvpy.preprocessing.labelbinariser.LabelBinariser": [[71, 2, 1, "", "clone"], [71, 2, 1, "", "copy"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "to_numpy"], [71, 2, 1, "", "to_torch"], [71, 2, 1, "", "transform"]], "mvpy.preprocessing.robustscaler": [[71, 1, 1, "", "RobustScaler"]], "mvpy.preprocessing.robustscaler.RobustScaler": [[71, 2, 1, "", "clone"], [71, 2, 1, "", "copy"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "to_numpy"], [71, 2, 1, "", "to_torch"], [71, 2, 1, "", "transform"]], "mvpy.preprocessing.scaler": [[71, 1, 1, "", "Scaler"]], "mvpy.preprocessing.scaler.Scaler": [[71, 2, 1, "", "clone"], [71, 2, 1, "", "copy"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "to_numpy"], [71, 2, 1, "", "to_torch"], [71, 2, 1, "", "transform"]], "mvpy.signal": [[55, 3, 1, "", "hamming_window"], [72, 0, 0, "-", "hammingwindow"], [56, 3, 1, "", "hann_window"], [72, 0, 0, "-", "hannwindow"], [57, 3, 1, "", "raised_cosine_window"], [72, 0, 0, "-", "raisedcosinewindow"]], "mvpy.signal.hammingwindow": [[72, 3, 1, "", "hamming_window"]], "mvpy.signal.hannwindow": [[72, 3, 1, "", "hann_window"]], "mvpy.signal.raisedcosinewindow": [[72, 3, 1, "", "raised_cosine_window"]], "mvpy.utilities": [[58, 1, 1, "", "Progressbar"], [73, 0, 0, "-", "compile"], [73, 0, 0, "-", "env"], [73, 0, 0, "-", "progressbar"], [73, 0, 0, "-", "version"]], "mvpy.utilities.compile": [[73, 3, 1, "", "numpy"], [73, 3, 1, "", "torch"]], "mvpy.utilities.env": [[73, 3, 1, "", "get_var"], [73, 3, 1, "", "is_enabled"]], "mvpy.utilities.progressbar": [[73, 1, 1, "", "Progressbar"], [73, 3, 1, "", "tqdm_joblib"]], "mvpy.utilities.version": [[73, 3, 1, "", "compare"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "terms": {"": [12, 15, 16, 18, 19, 21, 23, 25, 26, 28, 29, 30, 31, 33, 38, 52, 59, 60, 67, 68, 69, 70, 71, 73], "0": [10, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 44, 46, 47, 48, 50, 51, 52, 53, 54, 64, 67, 68, 69, 70, 71], "00": [10, 64], "000": [10, 31, 64, 69], "0000": [47, 51, 54, 70, 71], "00096": [23, 69], "001": [19, 31, 68, 69], "004": [25, 69], "0055": [26, 69], "0060": [21, 69], "00604": [26, 33, 69], "00809": [23, 69], "0085": [33, 69], "012": [37, 70], "01371": [25, 38, 69, 70], "0165": [51, 71], "0251": [26, 69], "0297": [26, 69], "03": [23, 69], "0325": [26, 69], "0347": [33, 69], "05": [51, 71], "0591": [51, 71], "06": [25, 69], "067": [21, 26, 28, 29, 33, 69], "0678": [26, 69], "0728": [33, 69], "0827": [26, 69], "0828": [33, 69], "0847": [26, 69], "09": [51, 71], "0907": [23, 69], "0924": [26, 69], "0954": [26, 69], "1": [12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 67, 68, 69, 70, 71], "10": [12, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 38, 39, 44, 51, 52, 53, 54, 67, 69, 70, 71], "100": [21, 23, 25, 26, 27, 29, 30, 32, 33, 37, 38, 52, 69, 70, 71], "1000": [31, 51, 53, 54, 69, 71], "1002": [27, 69], "1005508": [25, 69], "1016": [21, 23, 26, 28, 29, 33, 37, 69, 70], "1058": [53, 71], "1080": [26, 69], "1088": [26, 69], "11": [26, 33, 52, 69, 71], "110": [21, 26, 28, 29, 33, 69], "1109020": [24, 69], "1137": [24, 69], "117028": [21, 69], "12": [14, 15, 16, 26, 27, 31, 33, 37, 52, 67, 68, 69, 70, 71], "120": [16, 18, 19, 68], "1274": [54, 71], "13": [14, 25, 26, 33, 52, 67, 69, 71], "137": [37, 70], "1371": [25, 69], "14": [26, 27, 33, 69], "1400": [33, 69], "141": [24, 69], "1410": [26, 69], "142": [24, 69], "1452": [33, 69], "1481": [53, 71], "15": [15, 26, 33, 67, 69], "1512": [23, 69], "1548": [26, 69], "16": [26, 33, 69], "1607": [25, 38, 69, 70], "17": [26, 33, 69], "1793": [33, 69], "18": [26, 33, 69], "188": [37, 70], "19": [26, 33, 69], "1964": [24, 69], "1e": [19, 26, 31, 33, 51, 68, 69, 71], "1e3": [51, 53, 71], "2": [12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 37, 38, 39, 42, 45, 46, 47, 48, 51, 52, 53, 67, 68, 69, 70, 71], "20": [14, 15, 23, 26, 28, 29, 32, 33, 52, 67, 69, 71], "200": [16, 18, 19, 37, 68, 70], "2001": [26, 69], "2004": [23, 69], "2008": [25, 69], "2009": [23, 26, 27, 69], "2011": [27, 69], "2012": [24, 69], "2013": [21, 26, 28, 29, 33, 54, 69, 71], "2014": [21, 26, 28, 29, 33, 69], "2015": [37, 70], "2016": [23, 25, 26, 33, 37, 38, 69, 70], "2017": [25, 69], "2020": [21, 27, 69], "2047": [33, 69], "2070": [51, 71], "21": [26, 33, 52, 69, 71], "2115": [26, 69], "2148": [26, 69], "22": [26, 33, 52, 69, 71], "220": [21, 69], "2251": [33, 69], "23": [26, 33, 69], "2332": [33, 69], "24": [26, 33, 69], "240": [24, 27, 30, 32, 69], "2483": [54, 71], "25": [14, 15, 16, 18, 19, 26, 51, 53, 67, 68, 69, 71], "250": [16, 18, 19, 68], "2510": [54, 71], "2549": [33, 69], "259x": [23, 69], "26": [26, 33, 69], "27": [26, 33, 69], "2717": [33, 69], "28": [26, 33, 69], "2825": [27, 69], "2830": [27, 69], "2861": [26, 69], "289": [26, 69], "29": [26, 33, 69], "2945": [33, 69], "2d": [40, 41, 42, 43, 70], "3": [12, 13, 14, 15, 16, 18, 19, 23, 24, 25, 26, 27, 28, 31, 32, 33, 45, 46, 51, 52, 67, 68, 69, 70, 71], "30": [26, 33, 69], "31": [26, 33, 69], "316": [26, 69], "32": [15, 26, 33, 53, 67, 69, 71], "33": [26, 33, 69], "3389": [25, 26, 33, 69], "34": [26, 33, 69], "343": 73, "3440": [33, 69], "3491": [33, 69], "35": [33, 69], "3544": [33, 69], "3591": [33, 69], "36": [15, 26, 33, 67, 69], "365": [23, 69], "3683": [33, 69], "37": [26, 33, 69], "38": [26, 33, 69], "3800": [33, 69], "3817": [33, 69], "39": [26, 33, 69], "3925": [26, 69], "3962": [33, 69], "4": [12, 13, 15, 16, 18, 19, 23, 26, 28, 31, 32, 33, 45, 47, 67, 68, 69, 70], "40": [14, 15, 26, 33, 67, 69], "400": [16, 18, 19, 68], "4021": [26, 69], "4022": [26, 69], "4097": [33, 69], "41": [26, 33, 69], "411": [23, 69], "42": [12, 26, 33, 67, 69], "43": [26, 33, 69], "44": [26, 33, 69], "4418": [33, 69], "4449": [33, 69], "4454": [33, 69], "4470": [21, 69], "4489": [33, 69], "45": [15, 26, 33, 67, 69], "4594": [21, 69], "46": [33, 69], "4690": [26, 69], "4698": [23, 69], "47": [33, 69], "4741": [26, 69], "4759": [26, 69], "48": [33, 69], "4854": [33, 69], "48550": [23, 25, 38, 69, 70], "4915": [26, 69], "4950": [25, 69], "4965": [33, 69], "4978": [33, 69], "5": [12, 13, 14, 15, 16, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 45, 47, 49, 50, 51, 52, 53, 54, 67, 68, 69, 70, 71], "50": [16, 18, 19, 25, 26, 30, 32, 33, 38, 39, 44, 49, 50, 52, 68, 69, 70, 71], "500": [51, 53, 71], "5000": [47, 70], "5046": [26, 69], "5186": [26, 69], "5206": [33, 69], "5346": [33, 69], "5374": [33, 69], "5378": [51, 71], "553": [26, 69], "5530": [26, 69], "5662": [33, 69], "5716": [33, 69], "577": [26, 69], "5841": [33, 69], "5862": [26, 69], "5872": [26, 69], "6": [12, 13, 26, 28, 31, 33, 45, 67, 69, 70], "60": [21, 29, 30, 38, 49, 50, 69, 70], "6014": [26, 69], "604": [26, 33, 69], "6102": [33, 69], "6197": [26, 69], "6254": [33, 69], "6343": [51, 71], "64": [16, 18, 19, 68], "6523": [26, 69], "6616": [51, 71], "6622": [26, 69], "6700": [31, 69], "6765": [26, 69], "6769": [26, 69], "6926": [51, 71], "6932": [33, 69], "6939": [33, 69], "7": [12, 26, 33, 67, 69], "7017": [26, 69], "7023": [26, 69], "7033": [54, 71], "7117": [26, 69], "7154": [53, 71], "7168": [33, 69], "7172": [26, 69], "7263": [51, 71], "7301": [33, 69], "7348": [53, 71], "7351": [53, 71], "7464": [53, 71], "7468": [53, 71], "75": [14, 15, 16, 18, 19, 28, 51, 53, 67, 68, 69, 71], "76": [26, 69], "7609": [53, 71], "7619": [33, 69], "7849": [26, 69], "7885": [26, 69], "7994": [26, 69], "8": [12, 15, 18, 19, 26, 28, 31, 33, 67, 68, 69], "8130": [33, 69], "8182": [33, 69], "82": [28, 69], "8434": [26, 69], "8523": [26, 69], "8533": [28, 69], "8687": [33, 69], "8697": [26, 69], "87": [21, 26, 28, 29, 33, 69], "8705": [26, 69], "8793": [33, 69], "88": [23, 69], "8802": [33, 69], "8854": [33, 69], "898x_14_3_309": [26, 69], "9": [12, 15, 24, 26, 33, 49, 50, 51, 53, 54, 67, 69, 70, 71], "9028": [26, 69], "9101": [33, 69], "9122": [53, 71], "9270": [33, 69], "9290": [33, 69], "93": [27, 69], "9310": [33, 69], "9342": [26, 69], "9375": [51, 71], "9401": [26, 69], "9428": [26, 69], "9453": [33, 69], "9482": [26, 69], "9511": [26, 69], "96": [21, 26, 28, 29, 33, 69], "9615": [53, 71], "9704": [26, 69], "9729": [26, 69], "9733": [31, 69], "9790": [33, 69], "9800": [31, 69], "9808": [33, 69], "9842": [26, 69], "9847": [26, 69], "9912": [26, 69], "9930": [26, 69], "9974": [26, 69], "A": [0, 10, 23, 24, 25, 26, 27, 31, 33, 37, 53, 54, 64, 67, 69, 70, 71], "As": [12, 24, 27, 67, 69], "By": [28, 31, 51, 53, 69, 71], "For": [12, 13, 14, 15, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 37, 38, 51, 52, 67, 69, 70, 71], "If": [12, 19, 21, 22, 24, 25, 26, 27, 29, 31, 32, 51, 53, 54, 61, 62, 67, 68, 69, 71, 73], "In": [12, 13, 16, 18, 19, 21, 22, 23, 24, 28, 48, 67, 68, 69, 70], "It": [31, 69], "Its": [24, 69], "On": [21, 24, 25, 26, 28, 29, 33, 38, 69, 70], "One": [22, 31, 69], "Or": [28, 69], "The": [12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 40, 41, 43, 51, 52, 53, 54, 61, 62, 67, 68, 69, 70, 71, 72, 73], "There": [31, 51, 69, 71], "To": [25, 52, 69, 71], "_": [14, 15, 67], "_0": [16, 68], "_1": [16, 68], "__version__": 0, "_c": [12, 13, 14, 15, 67], "_channel": [24, 69], "_clamp_numpi": [51, 71], "_clamp_torch": [51, 71], "_classifier_numpi": [22, 31, 69], "_classifier_torch": [22, 31, 69], "_gener": [12, 13, 14, 15, 67], "_kfold_numpi": [12, 67], "_kfold_torch": [12, 67], "_labelbinariser_numpi": [52, 71], "_labelbinariser_torch": [52, 71], "_must_": [32, 69], "_receptivefield_numpi": [26, 69], "_receptivefield_torch": [26, 69], "_repeatedkfold_numpi": [13, 14, 67], "_repeatedkfold_torch": [13, 14, 67], "_repeatedstratifiedkfold_numpi": [14, 67], "_repeatedstratifiedkfold_torch": [14, 67], "_robustscaler_numpi": [53, 71], "_robustscaler_torch": [53, 71], "_sampl": [24, 69], "_scaler_numpi": [54, 71], "_scaler_torch": [54, 71], "_stratifiedkfold_numpi": [15, 67], "_stratifiedkfold_torch": [15, 67], "a_": [31, 69], "a_dual_": [24, 69], "abc": [12, 13, 14, 15, 67], "about": [16, 25, 67, 68, 69, 71], "absolut": [51, 71], "access": [31, 68, 69, 71], "accord": [53, 71], "account": [24, 69], "accuraci": [0, 28, 31, 48, 65, 66, 69], "achiev": [12, 29, 67, 69], "across": [12, 15, 22, 25, 52, 67, 69, 71], "actual": [26, 33, 69], "addit": [23, 25, 30, 32, 33, 51, 52, 53, 54, 58, 69, 71, 73], "addition": [29, 69], "affect": [53, 71], "after": 69, "aggreg": [22, 69], "aggress": [23, 69], "akin": [0, 54, 71], "algorithm": [23, 69], "alink": [37, 70], "all": [9, 21, 22, 24, 27, 29, 30, 31, 52, 64, 69, 71], "allow": [0, 16, 18, 19, 21, 24, 25, 28, 32, 33, 59, 68, 69, 73], "along": [0, 47, 70], "alpha": [21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 57, 69, 72], "alpha_": [24, 27, 28, 29, 30, 69], "alpha_i": [21, 69], "alpha_per_target": [21, 24, 27, 28, 29, 69], "alpha_x": [21, 69], "alreadi": [24, 69, 70], "also": [0, 12, 13, 14, 15, 21, 24, 26, 28, 29, 30, 31, 32, 33, 38, 67, 69, 70], "altern": [24, 26, 29, 30, 53, 69, 71], "alwai": [0, 34, 35, 36, 45, 46, 48, 49, 50, 52, 70, 71], "among": [29, 69], "amplitud": [16, 18, 19, 68], "an": [0, 12, 13, 14, 15, 16, 18, 19, 21, 24, 26, 27, 28, 29, 31, 32, 53, 67, 68, 69, 71], "analaysi": [25, 69], "analys": [52, 71], "analysi": [0, 9, 23, 25, 37, 69, 70], "anh": [43, 70], "ani": [12, 13, 14, 15, 16, 22, 23, 25, 26, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 67, 68, 69, 70, 71, 73], "appear": [24, 69], "appli": [16, 18, 19, 21, 23, 25, 26, 51, 68, 69, 71], "applic": [24, 69], "approach": [26, 28, 31, 69], "appropri": [32, 69], "approxim": [23, 69], "ar": [0, 12, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 67, 68, 69, 70, 71], "ar1": [16, 18, 19, 68], "arang": [12, 13, 16, 18, 19, 26, 33, 67, 68, 69], "arbitrari": [29, 51, 53, 69, 71], "arg": [23, 24, 25, 27, 28, 29, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 60, 69, 70, 71, 73], "argument": [22, 23, 25, 30, 32, 33, 51, 52, 53, 54, 58, 59, 60, 69, 71, 73], "aris": [52, 71], "around": [12, 67], "arrai": [26, 32, 69], "artheta": [31, 69], "artifact": [51, 71], "arxiv": [23, 25, 38, 69, 70], "ascent": [24, 31, 69], "assert": [26, 69], "associ": [24, 69], "assum": [12, 15, 23, 25, 30, 67, 69], "attr": [32, 69], "attribut": [12, 13, 14, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 53, 54, 67, 69, 71], "auc": [0, 48, 70], "auditori": [26, 69], "auto": [16, 18, 19, 24, 26, 31, 68, 69], "auto_exampl": 10, "auto_examples_python": 9, "automat": [12, 13, 23, 24, 26, 27, 31, 67, 69], "avail": [0, 12, 13, 14, 15, 22, 23, 24, 25, 26, 31, 59, 60, 67, 69, 73], "averag": [0, 47, 48, 70], "avoid": [26, 30, 52, 69, 71], "awar": [32, 69], "ax": [16, 18, 19, 68], "axi": [16, 18, 19, 28, 31, 68, 69], "b": [16, 18, 19, 21, 26, 27, 28, 29, 33, 63, 68, 69, 73], "b2b": [0, 29, 65, 66], "back": [0, 21, 27, 69], "back2back": 69, "backend": [12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 25, 31, 32, 51, 52, 53, 55, 56, 57, 67, 68, 69, 71, 72], "background": [16, 18, 19, 68], "bar": [0, 45, 58, 70, 73], "base": [0, 16, 18, 19, 22, 23, 24, 25, 31, 32, 51, 52, 53, 67, 68, 69, 71, 73], "baseestim": [22, 23, 25, 28, 31, 32, 51, 52, 53, 67, 69, 71], "basi": [0, 16, 18, 19, 42, 68, 70], "becaus": [12, 13, 21, 22, 24, 27, 28, 31, 52, 53, 67, 69, 71], "becom": [12, 67], "bednar": [26, 33, 69], "befor": [12, 15, 16, 18, 19, 25, 26, 53, 54, 67, 68, 69, 71], "behaviour": [26, 33, 69], "benefici": [26, 69], "benefit": [24, 69], "beta": [24, 27, 28, 29, 30, 69], "beta_": [24, 27, 69], "between": [0, 25, 28, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 49, 50, 69, 70], "beyond": [29, 69], "biass": [25, 69], "bie\u00dfmann": [21, 26, 28, 29, 33, 69], "binari": [22, 48, 69, 70], "binaris": [22, 28, 31, 52, 69, 71], "binariser_": [22, 28, 31, 69], "biologi": [25, 69], "bit": [31, 69], "blankertz": [21, 26, 28, 29, 33, 69], "bool": [12, 15, 16, 18, 19, 21, 24, 25, 26, 27, 28, 29, 32, 33, 53, 54, 58, 59, 62, 63, 67, 68, 69, 71, 73], "both": [26, 51, 53, 69, 71], "bound": [51, 71], "brain": [16, 18, 19, 68], "branch": [25, 69], "c": [16, 18, 19, 23, 26, 27, 31, 33, 68, 69], "c_": [33, 52, 69, 71], "c_0": [22, 41, 43, 69, 70], "c_1": [22, 69], "c_2": [22, 69], "cach": [59, 73], "calibr": [22, 28, 69], "call": [12, 13, 14, 15, 23, 51, 52, 53, 54, 61, 62, 67, 69, 71, 73], "callabl": [25, 32, 59, 60, 69, 73], "can": [0, 12, 13, 14, 15, 22, 23, 24, 25, 26, 28, 33, 51, 52, 53, 58, 67, 69, 71, 73], "cannot": [12, 23, 24, 29, 51, 52, 53, 54, 67, 69, 71], "captur": [24, 69], "care": [22, 28, 69], "carefulli": [28, 69], "case": [22, 23, 24, 28, 30, 31, 48, 51, 69, 70, 71], "cat": [21, 38, 44, 69, 70], "categor": 68, "causal": [0, 21, 26, 69], "causal_": [21, 69], "cdot": [24, 35, 69, 70], "cell": [26, 69], "center": [53, 54, 71], "centr": [53, 71], "centre_": [53, 71], "certain": [28, 52, 69, 71], "ch_col": [16, 18, 19, 68], "ch_po": [16, 17, 18, 19, 68], "challeng": [23, 69], "chang": [31, 69], "channel": [0, 16, 17, 18, 19, 20, 25, 26, 32, 33, 68, 69], "charton": [21, 69], "check": [0, 51, 62, 71, 73], "chen": [23, 69], "choos": [24, 69], "chose": [27, 69], "chosen": [24, 69], "clamp": [0, 53, 65, 66], "clariti": [15, 67], "class": [0, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 51, 52, 53, 54, 58, 67, 68, 69, 70, 71, 73], "classes_": [52, 71], "classif": [0, 22, 28, 31, 69], "classifi": [0, 28, 31, 65, 66], "clf": [22, 28, 31, 69], "clone": [21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 51, 52, 53, 54, 66, 69, 71], "close": [24, 27, 69], "cmap": [25, 69], "code": 9, "coef0": [24, 31, 41, 43, 69, 70], "coef_": [22, 24, 26, 27, 28, 29, 30, 31, 33, 69], "coefficeint": [29, 69], "coeffici": [22, 24, 26, 27, 28, 30, 31, 33, 41, 43, 69, 70], "collect": [12, 13, 14, 15, 25, 32, 66, 67, 69, 71], "colour": [0, 17, 68], "common": [25, 69], "compar": [0, 25, 66, 69, 73], "comparison": [25, 63, 69, 73], "compil": [0, 59, 60, 65, 66, 69], "complementari": [51, 53, 71], "compon": [25, 69], "comput": [0, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 68, 69, 70, 71], "computation": [23, 69], "concaten": [28, 31, 69], "concentr": [0, 20, 68], "condit": [23, 25, 69], "configur": [67, 69, 71], "connect": [25, 69], "consequ": [21, 25, 26, 28, 29, 30, 51, 69, 71], "consid": [21, 23, 24, 52, 69, 71], "consist": [12, 13, 14, 15, 21, 67, 69], "constitut": [51, 71], "contain": [21, 52, 67, 68, 69, 70, 71, 72], "content": 65, "context": 73, "continu": [0, 16, 18, 26, 33, 68, 69], "contrari": [23, 69], "contribut": [0, 21, 69], "control": [29, 51, 69, 71], "conv1d": [26, 33, 69], "conveni": [24, 27, 28, 69], "convers": [23, 25, 51, 52, 53, 54, 69, 71], "convert": [12, 13, 14, 15, 26, 67, 69], "convolut": [26, 69], "copi": [22, 28, 31, 51, 52, 53, 54, 66, 69, 71], "correct": [26, 51, 69, 71], "correl": [0, 16, 18, 19, 21, 26, 29, 45, 49, 68, 69, 70], "correspond": [20, 30, 68, 69], "cosin": [0, 25, 36, 65, 66, 69], "cosine_d": [0, 25, 66, 69, 70], "could": [12, 67], "cours": [30, 69], "cov": [23, 69], "cov_": [26, 69], "covari": [0, 16, 18, 19, 26, 38, 44, 65, 66, 68, 70], "covariance_": [23, 38, 44, 69, 70], "cpu": [16, 18, 19, 20, 55, 56, 57, 68, 72], "creat": [0, 12, 13, 16, 17, 18, 19, 20, 22, 23, 26, 48, 52, 67, 68, 69, 70, 71], "cross": [0, 12, 13, 14, 15, 24, 25, 26, 27, 33, 37, 38, 67, 69, 70], "cross_val_scor": [65, 66], "crossnobi": [0, 38, 70], "crossvalid": [0, 12, 13, 14, 15, 26, 65, 66, 69], "csp": [65, 66], "curb": [51, 71], "current": [22, 23, 28, 31, 69], "cut": [16, 18, 19, 68], "cv": [24, 26, 27, 28, 29, 30, 69], "cv_euclidean": [0, 25, 66, 69, 70], "cv_mahalanobi": [0, 25, 66, 69, 70], "cvresult": [66, 67], "cx_": [25, 69], "cy_": [25, 69], "cycl": [16, 18, 19, 68], "d": [21, 26, 28, 29, 33, 37, 38, 39, 41, 44, 69, 70], "data": [0, 9, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 47, 51, 52, 53, 54, 67, 68, 69, 70, 71, 72], "dataset": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 31, 65, 66, 67, 69], "david": [26, 69], "de": [26, 69], "deal": [51, 71], "debug": [59, 73], "decai": [16, 18, 19, 68], "decid": [22, 26, 69], "decis": [22, 28, 31, 69], "decision_funct": [22, 28, 31, 66, 69], "decod": [0, 21, 26, 28, 29, 32, 33, 69], "decoder_": [21, 69], "decor": [0, 59, 60, 69, 73], "decorrel": [23, 69], "decreas": [24, 69], "def": [59, 60, 73], "default": [0, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 53, 54, 58, 59, 61, 62, 67, 68, 69, 71, 73], "defici": [24, 69], "defin": [0, 16, 18, 19, 24, 34, 35, 37, 38, 39, 44, 45, 46, 49, 50, 51, 68, 69, 70, 71], "definit": [23, 69], "degre": [24, 31, 41, 69, 70], "delai": [26, 33, 69], "delta": [23, 69], "demonstr": [12, 15, 67], "depend": [21, 69, 73], "deriv": [12, 15, 67], "describ": [26, 53, 69, 71], "descript": 0, "design": [26, 69], "desir": [12, 13, 21, 22, 28, 29, 51, 67, 69, 71], "detail": [0, 69], "determin": [16, 18, 19, 68], "deviat": [16, 51, 54, 68, 71], "devic": [12, 13, 16, 18, 19, 20, 55, 56, 57, 67, 68, 72], "df": [22, 28, 31, 69], "di": [25, 26, 33, 69, 70], "diag": [23, 24, 27, 69], "diagon": [21, 69], "dict": [22, 52, 59, 60, 69, 71, 73], "diedrichsen": [25, 37, 38, 69, 70], "differ": [0, 15, 19, 21, 24, 25, 27, 28, 29, 30, 51, 52, 54, 67, 68, 69, 71], "difficult": [31, 69], "dim": [15, 32, 51, 52, 53, 54, 67, 69, 71], "dimens": [0, 23, 30, 32, 34, 35, 36, 38, 45, 46, 47, 48, 49, 50, 51, 53, 54, 69, 70, 71], "dimension": [23, 67, 68, 69, 70, 71, 72], "dims_": [51, 53, 71], "direct": [22, 31, 51, 69, 71], "directli": [31, 51, 69, 71], "disabl": [0, 26, 31, 58, 59, 60, 69, 73], "discret": [0, 19, 68], "disentangl": [0, 21, 29, 69], "dissimilar": [37, 70], "distanc": [0, 25, 36, 37, 38, 39, 44, 46, 50, 69, 70], "distort": [21, 69], "distribut": [19, 25, 38, 68, 69, 70], "diverg": [31, 69], "do": [12, 25, 26, 28, 30, 32, 33, 67, 69], "doe": [25, 52, 69, 71], "doi": [27, 69], "domain": [26, 69], "done": [25, 69], "download": 9, "draw": [25, 69], "drawn": 68, "driven": [23, 69], "dtype": [45, 46, 49, 50, 70], "dual": [24, 69], "dure": [38, 70], "d\u00e4hne": [21, 26, 28, 29, 33, 69], "e": [16, 18, 19, 20, 22, 23, 24, 26, 31, 33, 68, 69], "e1005508": [25, 69], "each": [12, 13, 14, 15, 16, 18, 19, 21, 22, 27, 29, 52, 53, 67, 68, 69, 71], "earli": [31, 69], "easier": [52, 71], "easili": [12, 51, 67, 71], "edg": [26, 69], "edge_correct": [26, 69], "eeg": [0, 16, 18, 19, 20, 68], "effect": [21, 28, 69], "effici": [23, 26, 28, 69], "egg": [51, 71], "eigendecomposit": [23, 69], "eigenvalu": [23, 69], "either": [12, 13, 14, 15, 22, 26, 28, 33, 51, 67, 69, 70, 71], "ejaz": [37, 70], "eldar": [23, 69], "element": [39, 45, 70], "elimin": [38, 70], "embed": [30, 69], "empir": [23, 69], "emploi": [26, 69], "enabl": [0, 19, 28, 58, 62, 68, 69, 73], "encod": [0, 21, 22, 25, 30, 48, 52, 69, 70, 71], "encoder_": [21, 69], "end": [12, 67], "enough": [30, 69], "enumer": [12, 13, 14, 15, 67], "env": [0, 61, 62, 65, 66], "environ": [0, 61, 62, 67, 69, 71, 73], "eog": [51, 71], "ep": [51, 71], "eps_": [31, 69], "epsilon": [33, 51, 69, 71], "equal": [32, 69], "error": [24, 26, 31, 33, 69], "estim": [0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 44, 52, 54, 65, 66, 70, 71], "estimator_": [29, 69], "estimators_": [22, 32, 69], "euclidean": [0, 25, 37, 65, 66, 69], "evalu": [24, 27, 28, 69], "even": [52, 71], "event": [0, 19, 68], "exampl": [0, 10, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 64, 67, 68, 69, 70, 71, 73], "exceed": [51, 71], "execut": [10, 64], "exist": [21, 22, 69], "expand": [26, 30, 69], "expect": [23, 26, 32, 69], "explicit": [12, 30, 67, 69], "explicitli": [12, 26, 29, 30, 52, 67, 69, 71], "expos": [22, 26, 69, 73], "extern": [12, 67], "extrem": [0, 26, 28, 51, 69, 71], "f": [12, 13, 14, 15, 16, 18, 19, 21, 25, 26, 27, 28, 29, 33, 67, 68, 69], "f_": [33, 69], "f_i": [12, 13, 14, 15, 67], "face": [31, 69], "facilit": [28, 69], "fact": [26, 69], "factor": [21, 69], "fall": [27, 69], "fals": [12, 15, 18, 19, 21, 24, 25, 26, 27, 28, 29, 32, 33, 54, 59, 62, 67, 68, 69, 71, 73], "faster": [24, 27, 31, 69], "fastmath": [59, 73], "featur": [0, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 37, 38, 39, 44, 45, 47, 52, 53, 67, 68, 69, 70, 71], "few": [22, 69], "field": [0, 26, 69], "fig": [16, 18, 19, 68], "figsiz": [16, 18, 19, 68], "file": [10, 64], "filter": [28, 29, 69], "final": [0, 25, 32, 34, 35, 36, 45, 46, 47, 48, 49, 50, 69, 70], "find": [30, 69], "fine": [24, 27, 69], "first": [15, 26, 31, 51, 52, 53, 54, 67, 69, 71], "fit": [0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 44, 51, 52, 53, 54, 66, 69, 70, 71], "fit_intercept": [21, 26, 27, 28, 29, 69], "fit_transform": [23, 25, 32, 51, 52, 53, 54, 66, 69, 71], "flag": [0, 59, 61, 62, 73], "float": [16, 18, 19, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 41, 42, 43, 51, 53, 57, 68, 69, 70, 71, 72], "float64": [45, 46, 49, 50, 70], "fnhum": [26, 33, 69], "fold": [0, 12, 13, 14, 15, 21, 37, 38, 67, 69, 70], "fold0": [12, 13, 67], "fold1": [12, 13, 67], "fold2": [12, 13, 67], "fold3": [12, 13, 67], "fold4": [12, 67], "follow": [23, 27, 29, 69], "form": [24, 27, 69], "formula": [24, 48, 69, 70], "forward": [30, 69], "fourier": [26, 69], "fr": [16, 18, 19, 68], "frac": [16, 18, 19, 23, 24, 27, 34, 35, 45, 48, 68, 69, 70], "frame": [28, 69], "framework": [25, 69], "frequenc": [16, 18, 19, 26, 33, 68, 69], "frobeniu": [23, 69], "from": [0, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 64, 67, 68, 69, 70, 71, 73], "from_numpi": [28, 31, 69], "frontier": [25, 26, 33, 69], "full": [25, 26, 30, 31, 69], "full_rdm": [25, 66, 69], "function": [0, 18, 19, 22, 23, 24, 25, 26, 28, 30, 31, 33, 40, 41, 42, 43, 59, 60, 67, 68, 69, 70, 71, 73], "fundament": [26, 69], "further": 0, "futur": [22, 28, 31, 69], "g": [21, 22, 26, 27, 31, 33, 69], "gallant": [26, 69], "galleri": [9, 64], "gamma": [16, 18, 19, 24, 31, 41, 42, 43, 68, 69, 70], "gamma_": [31, 69], "gener": [9, 12, 13, 14, 15, 16, 18, 19, 22, 25, 26, 32, 51, 67, 68, 69, 71], "generalis": [23, 69], "geometri": [25, 69], "geq": [23, 24, 69], "get": [61, 62, 67, 69, 71, 73], "get_var": [0, 66, 73], "given": [23, 24, 25, 31, 51, 69, 71, 73], "global": [67, 69, 71], "good": [30, 69], "gpu": [31, 69], "grab": [0, 61, 73], "grad_": [31, 69], "gradient": [24, 31, 69], "gram": [24, 69], "gramfort": [27, 69], "greater": [26, 69], "grisel": [27, 69], "group": [0, 16, 25, 68, 69], "g\u00f6rgen": [21, 26, 28, 29, 33, 69], "h": [21, 25, 37, 38, 52, 53, 69, 70, 71], "h_": [24, 27, 69], "ha": [24, 27, 31, 52, 69, 71], "hamming_window": [0, 66, 72], "hammingwindow": [65, 66], "handl": [0, 22, 31, 51, 52, 69, 71], "hann_window": [0, 66, 72], "hannwindow": [65, 66], "hat": [21, 22, 23, 48, 69, 70], "hauf": [21, 26, 28, 29, 33, 69], "have": [15, 24, 25, 30, 31, 32, 52, 67, 69, 71], "hayn": [21, 26, 28, 29, 33, 69], "here": [12, 15, 16, 18, 19, 21, 24, 27, 28, 31, 38, 67, 68, 69, 70], "hero": [23, 69], "higher": [26, 69], "hing": [24, 69], "hot": [0, 22, 48, 52, 69, 70, 71], "how": [16, 18, 19, 25, 68, 69], "howev": [12, 13, 21, 26, 28, 31, 67, 69], "hsu": [26, 69], "html": [26, 69], "http": [26, 69], "human": [26, 33, 69], "hurt": [23, 28, 69], "hypothet": [25, 69], "hz": [16, 18, 19, 68], "i": [0, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 61, 62, 67, 68, 69, 70, 71, 73], "i_p": [23, 69], "idea": [21, 69], "ideal": [31, 69], "ident": [52, 71], "ii": [24, 27, 69], "ill": [23, 69], "immedi": [12, 13, 14, 15, 67], "implement": [0, 12, 13, 14, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 53, 67, 69, 71], "import": [12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 67, 68, 69, 70, 71, 73], "impuls": [19, 68], "imshow": [25, 69], "inclin": [12, 67], "includ": [16, 18, 19, 30, 52, 68, 69, 71], "independ": [24, 69], "indic": [12, 13, 15, 25, 33, 37, 67, 69, 70], "individu": [16, 22, 28, 29, 68, 69], "infer": [12, 67], "influenc": [21, 26, 69], "inform": [21, 23, 24, 25, 26, 27, 28, 31, 33, 37, 38, 67, 69, 70, 71], "inher": [25, 69], "inherit": [22, 69], "initialis": [22, 69], "inner": [24, 26, 27, 69], "input": [0, 12, 13, 14, 15, 22, 24, 25, 26, 27, 32, 33, 40, 41, 42, 43, 46, 49, 50, 52, 67, 69, 70, 71], "instanc": [22, 69], "instanti": [12, 13, 14, 15, 67], "instead": [22, 25, 26, 28, 29, 30, 51, 69, 71], "int": [12, 13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 53, 54, 55, 56, 57, 62, 67, 68, 69, 71, 72, 73], "integ": [12, 13, 14, 15, 26, 67, 69], "intens": [23, 69], "inter": [51, 71], "intercept": [21, 22, 26, 27, 28, 29, 30, 31, 33, 69], "intercept_": [22, 26, 27, 28, 29, 30, 31, 33, 69], "interdisciplinari": [27, 69], "interest": [26, 31, 69], "interfac": [68, 70, 71, 73], "intern": [22, 28, 31, 69], "interpet": [26, 69], "interpret": [21, 24, 26, 28, 29, 31, 33, 51, 69, 71], "interquartil": [53, 71], "inv": [38, 44, 70], "invari": [0, 53, 71], "invers": [0, 23, 31, 44, 51, 53, 54, 69, 70, 71], "inverse_transform": [51, 52, 53, 54, 66, 71], "invert": [51, 53, 54, 71], "investig": [24, 69], "iqr": [51, 71], "irrelev": [25, 69], "is_en": [0, 66, 73], "issu": [24, 52, 69, 71], "iter": [0, 12, 13, 14, 15, 31, 32, 67, 69], "its": [0, 24, 47, 69, 70], "j": [21, 25, 26, 27, 28, 29, 30, 33, 37, 38, 69, 70], "jit": [0, 59, 73], "jitter": [51, 71], "job": [25, 32, 69], "joblib": 73, "journal": [23, 25, 27, 69], "just": [15, 24, 67, 69], "k": [0, 12, 13, 14, 15, 21, 23, 24, 26, 28, 29, 33, 40, 41, 42, 43, 51, 67, 69, 70, 71], "kappa": [24, 40, 41, 43, 69, 70], "kei": [24, 69], "kernel": [0, 16, 18, 19, 24, 26, 31, 40, 41, 42, 43, 68, 69, 70], "kernel_linear": [0, 24, 65, 66, 69], "kernel_poli": [0, 24, 65, 66, 69], "kernel_rbf": [0, 24, 65, 66, 69], "kernel_sigmoid": [0, 24, 65, 66, 69], "kernelridgecv": [0, 65, 66], "kessi": [23, 69], "keyword": [22, 59, 60, 69, 73], "kf": [12, 13, 14, 15, 67], "kfold": [0, 26, 65, 66, 69], "king": [21, 27, 69], "kingjr": [27, 69], "kriegeskort": [25, 37, 69, 70], "kwarg": [21, 29, 30, 33, 58, 59, 60, 69, 73], "kwargument": [22, 69], "l": [26, 51, 52, 69, 71], "l2": [24, 69], "label": [16, 22, 28, 48, 52, 68, 69, 70, 71], "labelbinaris": [0, 22, 28, 31, 65, 66, 69], "labels_": [52, 71], "lag": [26, 33, 69], "lalor": [26, 33, 69], "lambda": [23, 69], "lambda_1": [23, 69], "lambda_max": [19, 68], "lambda_min": [19, 68], "lambda_p": [23, 69], "laplacian": [26, 69], "larg": [23, 69], "last": [23, 69], "layout": [0, 17, 20, 68], "lead": [24, 69], "learn": [24, 27, 31, 69], "least": [24, 69], "ledoit": [23, 69], "ledoitwolf": [23, 69], "left": [23, 24, 27, 69], "length": [32, 69], "less": [21, 24, 69], "let": [12, 15, 25, 30, 31, 52, 59, 60, 67, 69, 71, 73], "level": [32, 69], "lewin": [23, 69], "liberto": [26, 33, 69], "lightweight": 73, "like": [12, 13, 14, 15, 22, 23, 24, 25, 26, 28, 31, 67, 69], "linalg": [38, 44, 70], "line": [26, 69], "linear": [0, 21, 24, 26, 28, 29, 30, 31, 33, 40, 69, 70], "linear_model": [27, 69], "list": [22, 24, 26, 27, 32, 51, 52, 53, 54, 59, 60, 69, 71, 73], "live": [21, 69], "load_iri": [28, 31, 69], "logspac": [28, 29, 32, 69], "longer": [24, 69], "loo": [24, 26, 27, 28, 29, 30, 69], "look": [31, 52, 59, 60, 69, 71, 73], "lopez": [21, 69], "loss": [24, 27, 69], "lower": [51, 71], "lower_": [51, 71], "lr": [31, 69], "lvert": [23, 24, 27, 28, 29, 30, 69], "m": [0, 16, 18, 19, 20, 21, 23, 26, 33, 51, 68, 69, 71], "machin": [24, 27, 69], "macro": [48, 70], "mad": [51, 71], "magnitud": [24, 69], "mahalanobi": [0, 25, 38, 65, 66, 69], "mai": [21, 23, 24, 25, 28, 30, 51, 69, 71], "make": [12, 13, 14, 15, 23, 24, 25, 26, 27, 31, 32, 67, 69], "make_circl": [31, 69], "make_classif": [28, 31, 69], "make_meeg_categor": [0, 65, 66], "make_meeg_colour": [0, 16, 18, 19, 65, 66], "make_meeg_continu": [0, 65, 66], "make_meeg_discret": [0, 65, 66], "make_meeg_layout": [0, 16, 18, 19, 65, 66], "manag": 73, "mani": [16, 18, 19, 24, 25, 28, 68, 69], "mann": [48, 70], "manner": 70, "manual_se": [12, 67], "map": [24, 27, 28, 29, 30, 52, 69, 71], "map_l_to_c_": [52, 71], "margin": [24, 31, 69], "marker": [16, 18, 19, 68], "mask_0": [16, 68], "mask_1": [16, 68], "math": [0, 24, 25, 28, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 65, 66, 69], "mathbb": [23, 69], "mathbf": [35, 70], "mathcal": [24, 69], "mathemat": [68, 69, 71], "maths_a": [59, 60, 73], "maths_b": [59, 60, 73], "matlab": [26, 33, 69], "matplotlib": [16, 18, 19, 25, 68, 69], "matric": [23, 24, 25, 38, 44, 69, 70], "matrix": [0, 23, 24, 25, 26, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 69, 70, 71], "max": [23, 51, 69, 71], "max_it": [31, 69], "maxim": [31, 69], "maximum": [19, 22, 23, 26, 31, 33, 68, 69], "maxlvert": [31, 69], "mb": [10, 64], "mcdonald": [27, 69], "mean": [12, 16, 18, 19, 21, 24, 26, 27, 33, 51, 53, 54, 67, 68, 69, 71], "mean_": [54, 71], "measur": [23, 25, 37, 38, 69, 70], "median": [51, 53, 71], "meineck": [21, 26, 28, 29, 33, 69], "mem": [10, 64], "membership": [16, 68], "method": [22, 23, 25, 26, 28, 31, 51, 69, 71, 73], "metric": [25, 38, 69, 70], "michel": [27, 69], "might": [12, 30, 31, 53, 67, 69, 71], "min": [23, 69], "min_": [24, 27, 28, 29, 30, 69], "minim": [24, 51, 69, 71], "minimis": [23, 24, 27, 69], "minimum": [19, 23, 26, 33, 68, 69], "mirror": [24, 69], "mit": [24, 69], "mmse": [23, 69], "mne": [26, 33, 69], "mode": [31, 69], "model": [21, 24, 25, 26, 27, 28, 29, 30, 31, 33, 69], "model_select": [12, 13, 67], "modul": 65, "more": [21, 23, 24, 25, 26, 27, 28, 30, 31, 33, 37, 38, 69, 70], "most": [22, 69], "mtrf": [26, 33, 69], "mu": [23, 54, 69, 71], "much": [16, 18, 19, 24, 27, 31, 68, 69], "multi": [22, 28, 37, 67, 68, 69, 70, 71, 72], "multiclass": [0, 22, 31, 52, 69, 71], "multifeatur": [0, 52, 71], "multipl": [15, 24, 25, 26, 28, 67, 69], "multivari": [0, 9, 21, 23, 26, 28, 29, 33, 69], "murphi": [24, 69], "must": [26, 69], "mv": [28, 31, 39, 69, 70], "mvpy": [0, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "n": [10, 14, 15, 23, 24, 25, 26, 27, 33, 34, 37, 39, 48, 55, 56, 57, 64, 67, 69, 70, 72], "n_": [52, 71], "n_background": [16, 18, 19, 68], "n_channel": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 68, 69], "n_channels_": [26, 69], "n_class": [16, 22, 28, 31, 52, 68, 69, 71], "n_classes_": [52, 71], "n_classifi": [22, 69], "n_cycl": [16, 18, 19, 68], "n_dim": [17, 68], "n_direct": [20, 68], "n_featur": [15, 16, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 52, 67, 68, 69, 70, 71], "n_features_": [26, 52, 69, 71], "n_group": [25, 69], "n_inform": [28, 31, 69], "n_job": [25, 32, 69], "n_penalti": [26, 69], "n_repeat": [13, 14, 67], "n_sampl": [12, 13, 14, 15, 22, 24, 26, 27, 28, 31, 40, 41, 42, 43, 52, 67, 69, 70, 71], "n_split": [12, 13, 14, 15, 26, 67, 69], "n_timepoint": [15, 16, 18, 19, 23, 25, 26, 30, 67, 68, 69], "n_trf": [18, 19, 26, 68, 69], "n_trf_": [26, 69], "n_trial": [16, 18, 19, 21, 23, 25, 29, 30, 32, 52, 68, 69, 71], "n_triu_indic": [25, 69], "nadaraya": [24, 69], "name": [15, 67], "natur": [26, 69], "ndarrai": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 67, 68, 69, 70, 71, 72, 73], "neg": [48, 52, 70, 71], "neg_label": [52, 71], "net": [26, 69], "network": [26, 69], "neural": [16, 18, 19, 21, 25, 26, 28, 29, 30, 33, 68, 69], "neuro": [25, 69], "neuroimag": [9, 21, 26, 28, 29, 33, 37, 69, 70], "neuron": [26, 69], "neurosci": [25, 26, 33, 69], "never": [25, 69], "new": [12, 13, 14, 15, 31, 67, 69], "next": [30, 69], "nice": 70, "nili": [37, 70], "nn": [26, 33, 69], "nogil": [59, 73], "nois": [16, 18, 19, 25, 31, 68, 69], "noisi": [23, 69], "non": [24, 69], "none": [12, 13, 14, 15, 23, 25, 26, 30, 32, 33, 51, 53, 54, 61, 62, 67, 69, 71, 73], "nopython": [59, 73], "norm": [23, 69], "normal": [21, 23, 24, 25, 26, 27, 29, 30, 32, 33, 38, 39, 44, 51, 53, 54, 69, 70, 71], "normalis": [21, 27, 28, 29, 53, 69, 71], "normalise_decod": [21, 69], "note": [0, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 67, 69, 70, 71], "notin": [51, 71], "now": [12, 67], "np": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 67, 68, 69, 70, 71, 73], "nt": 73, "numba": [0, 59, 73], "number": [12, 13, 14, 15, 20, 22, 25, 26, 29, 31, 32, 33, 48, 52, 67, 68, 69, 70, 71], "numer": [22, 52, 69, 71], "numpi": [0, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 31, 32, 51, 52, 53, 54, 66, 67, 68, 69, 70, 71, 73], "o": [16, 18, 19, 23, 27, 68, 69, 73], "oa": [23, 69], "object": [0, 12, 13, 14, 15, 22, 23, 28, 29, 30, 31, 33, 67, 69, 73], "observ": [21, 25, 69], "obtain": [21, 22, 23, 25, 31, 51, 52, 53, 54, 69, 71], "occur": [12, 67], "off": [16, 18, 19, 53, 68, 71], "offer": [52, 71], "offset": [15, 22, 31, 52, 67, 69, 71], "offsets_": [22, 69], "often": [23, 69], "onc": [29, 30, 69], "one": [0, 15, 19, 22, 24, 26, 30, 31, 48, 51, 52, 53, 54, 67, 68, 69, 70, 71], "ones": [26, 33, 69], "onli": [12, 16, 19, 22, 23, 24, 26, 31, 33, 51, 52, 67, 68, 69, 71], "onset": [19, 68], "op": [63, 73], "oper": [12, 63, 67, 71, 73], "optim": [23, 69], "optimis": [24, 31, 69], "option": [12, 13, 14, 15, 18, 19, 22, 24, 26, 51, 53, 61, 62, 67, 68, 69, 71, 73], "oquab": [21, 69], "oracl": [23, 69], "order": [24, 25, 26, 69], "org": [27, 69], "origin": [52, 71], "other": [22, 24, 28, 31, 40, 41, 42, 43, 69, 70], "otherwis": [12, 13, 14, 15, 21, 25, 51, 67, 69, 71], "ouput": [21, 69], "our": [21, 69], "out": [23, 30, 69], "outcom": [26, 32, 69], "outlier": [0, 51, 53, 71], "output": [21, 22, 24, 27, 28, 33, 40, 41, 42, 43, 69, 70], "outsid": [51, 71], "over": [0, 16, 18, 19, 22, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 45, 46, 48, 49, 50, 51, 53, 54, 68, 69, 70, 71], "overlap": [15, 67], "overrid": [61, 62, 73], "overriden": [62, 73], "ovo": [0, 22, 31, 69], "ovr": [0, 22, 28, 31, 69], "own": [16, 68], "p": [16, 18, 19, 23, 24, 48, 68, 69, 70], "p_": [16, 18, 19, 31, 68, 69], "packag": 65, "pad": [16, 18, 19, 26, 32, 33, 68, 69], "pair": [12, 13, 14, 15, 67], "parallel": [25, 32, 69], "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 73], "parametr": [24, 69], "part": [68, 69, 73], "particularli": [24, 69], "pass": [12, 16, 18, 19, 22, 23, 33, 59, 60, 67, 68, 69, 73], "patch": 73, "pattern": [21, 22, 25, 26, 28, 29, 31, 32, 33, 37, 69, 70], "pattern_": [21, 22, 26, 28, 29, 31, 32, 33, 69], "paz": [21, 69], "pcbi": [25, 69], "pearson": [0, 45, 46, 49, 70], "pearsonr": [0, 25, 46, 49, 50, 65, 66, 69], "pearsonr_d": [0, 25, 66, 69, 70], "pedregosa": [27, 69], "penalis": [21, 69], "penalti": [21, 24, 26, 27, 28, 29, 30, 33, 69], "pep": 73, "per": [16, 18, 19, 21, 24, 25, 28, 52, 68, 69, 71], "perfectli": [12, 67], "perform": [24, 25, 26, 27, 28, 31, 67, 69], "perspect": [24, 69], "phi": [16, 18, 19, 68], "pi": [23, 69], "pickl": [31, 69], "pipelin": 73, "place": [19, 68], "pleas": [0, 12, 13, 14, 15, 21, 23, 24, 25, 28, 32, 67, 69], "plo": [25, 69], "plot": [16, 18, 19, 25, 68, 69], "plt": [16, 18, 19, 25, 68, 69], "pm": [51, 71], "point": [25, 26, 30, 51, 69, 71], "poisson": [19, 68], "poli": [24, 31, 69], "polynomi": [0, 31, 41, 69, 70], "poor": [24, 69], "poorli": [26, 53, 69, 71], "pos_label": [52, 71], "posit": [16, 18, 19, 23, 24, 26, 31, 33, 48, 52, 68, 69, 70, 71], "positon": [17, 68], "posix": 73, "potenti": [21, 69], "power": [16, 18, 19, 68], "practic": [21, 23, 24, 69], "pre": 69, "precis": [0, 23, 38, 44, 69, 70], "precision_": [23, 69], "predict": [21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 66, 69], "predict_proba": [22, 28, 31, 32, 66, 69], "predictor": [21, 26, 29, 68, 69], "preprocess": [0, 22, 28, 51, 52, 53, 54, 65, 66, 69], "prespecifi": [51, 71], "press": [24, 69], "preval": [24, 69], "prevent": [31, 69], "primal": [24, 69], "princip": [30, 38, 69, 70], "principl": [12, 13, 22, 67, 69], "print": [12, 13, 14, 15, 16, 18, 19, 25, 32, 52, 54, 67, 68, 69, 71], "prior": [24, 69], "probabilist": [24, 69], "probabl": [22, 24, 28, 32, 69], "problem": [22, 26, 28, 31, 69], "procedur": [21, 23, 69], "process": [16, 18, 19, 68], "produc": [23, 24, 52, 69, 71], "progress": [0, 25, 32, 58, 69, 73], "progressbar": [0, 65, 66], "properti": [25, 69], "provid": [68, 69, 71, 73], "provost": [25, 38, 69, 70], "public": [22, 31, 69], "push": [23, 69], "put": [24, 69], "pyplot": [16, 18, 19, 25, 68, 69], "python": [9, 27, 68, 69, 73], "q": [23, 69], "qquad": [23, 24, 27, 69], "quad": [28, 69], "quantil": [51, 53, 71], "quantile_rang": [53, 71], "quartil": [51, 71], "r": [21, 26, 27, 33, 45, 47, 69, 70], "r_": [48, 70], "rac": [54, 71], "radial": [0, 16, 18, 19, 42, 68, 70], "raised_cosine_window": [0, 66, 72], "raisedcosinewindow": [65, 66], "randint": [52, 71], "randn": [14, 15, 37, 67, 70], "random": [12, 13, 14, 15, 67], "random_st": [12, 13, 14, 15, 67], "randomis": [12, 67], "rang": [16, 18, 19, 26, 30, 51, 53, 68, 69, 71], "rank": [0, 24, 48, 49, 50, 65, 66, 69], "rare": [31, 69], "rate": [19, 31, 68, 69], "ratio": [16, 18, 19, 68], "rb84334add56f": 31, "rbf": [24, 31, 69, 70], "rca68086fb168": 69, "rdbu_r": [25, 69], "rdm": [25, 69], "rdm_": [25, 69], "re": [12, 67, 73], "realist": [26, 69], "recept": [0, 26, 69], "receptivefield": [0, 30, 65, 66], "recommend": [22, 26, 33, 69], "reconstruct": [0, 26, 33, 69], "record": [22, 25, 69], "redund": [12, 13, 67], "refer": [16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 33, 37, 38, 68, 69, 70], "reg_cv": [26, 69], "reg_typ": [26, 69], "regress": [0, 21, 24, 27, 28, 29, 30, 33, 69], "regularis": [21, 24, 26, 31, 69], "reinstanti": [12, 67], "rel": [26, 33, 69], "relat": [26, 31, 33, 69], "reliabl": [37, 70], "remov": [51, 53, 71], "repeat": [0, 13, 14, 67], "repeatedkfold": [0, 26, 65, 66, 69], "repeatedli": [13, 14, 67], "repeatedstratifiedkfold": [0, 26, 65, 66, 69], "report": 73, "repres": [52, 71], "represent": [0, 25, 69], "reproduc": [12, 13, 14, 15, 67], "requir": [22, 25, 28, 69], "research": [27, 69], "resort": [24, 69], "respect": [0, 16, 18, 19, 39, 45, 61, 68, 70, 73], "respons": [0, 16, 18, 19, 25, 26, 30, 33, 68, 69], "rest": [0, 22, 31, 69], "result": [12, 63, 67, 73], "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 73], "return_count": [14, 15, 67], "return_x_i": [28, 31, 69], "return_xy\u00df": [18, 19, 68], "review": [27, 69], "revisit": [31, 69], "rf": [26, 69], "rgb": [17, 68], "rho": [23, 69], "ridg": [0, 21, 24, 26, 27, 28, 29, 30, 69], "ridgeclassifi": [0, 22, 65, 66], "ridgecv": [0, 24, 26, 29, 30, 33, 65, 66], "ridgedecod": [0, 21, 28, 65, 66], "ridgeencod": [0, 65, 66], "right": [23, 24, 27, 69], "risk": [23, 69], "rng": [12, 67], "rng_": [12, 15, 67], "robust": [0, 24, 53, 69, 71], "robustli": 71, "robustscal": [0, 51, 65, 66], "roc": [0, 48, 70], "roc_auc": [0, 65, 66], "rocauc": [48, 70], "routin": 73, "rsa": [0, 65, 66], "run": [12, 25, 32, 52, 67, 69, 71], "runtim": [31, 69], "rvert": [23, 24, 27, 28, 29, 30, 69], "rvert_": [24, 69], "rvert_2": [24, 69], "rvert_f": [23, 69], "s0047": [23, 69], "s_max": [23, 26, 69], "s_min": [23, 26, 69], "sai": [30, 69], "same": [12, 13, 14, 15, 26, 32, 33, 67, 69], "sampl": [16, 18, 19, 23, 26, 33, 37, 38, 39, 44, 45, 47, 48, 54, 68, 69, 70, 71], "sample_weight": [54, 71], "scale": [21, 24, 26, 28, 31, 51, 53, 54, 69, 71], "scale_": [53, 54, 71], "scaler": [0, 21, 31, 51, 53, 65, 66, 69], "scaler_": [21, 31, 69], "scatter": [16, 18, 19, 68], "scene": [26, 69], "scheme": [0, 22, 26, 69], "scikit": [27, 69], "score": [0, 48, 66, 67, 70], "searchlight": [32, 69], "second": [15, 16, 18, 19, 23, 25, 31, 52, 67, 68, 69, 71], "see": [0, 12, 15, 21, 23, 24, 25, 26, 27, 28, 30, 31, 33, 37, 38, 54, 67, 69, 70, 71, 73], "seed": [12, 13, 14, 15, 67], "select": [32, 51, 52, 53, 69, 71], "selet": [54, 71], "self": [23, 69], "semant": [30, 69], "semidefinit": [24, 69], "sens": [25, 69], "sensit": [16, 68], "sensor": [0, 17, 20, 68], "separ": 69, "sequenti": [24, 69], "set": [0, 12, 13, 14, 15, 21, 25, 26, 30, 32, 62, 67, 69, 71, 73], "set_titl": [16, 18, 19, 68], "set_xlabel": [16, 18, 19, 68], "set_ylabel": [16, 18, 19, 68], "shape": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 67, 68, 69, 70, 71], "shape_": [54, 71], "share": [25, 69], "should": [12, 15, 16, 18, 19, 22, 23, 24, 26, 28, 31, 33, 67, 68, 69], "shrinkag": [23, 69], "shrinkage_": [23, 69], "shuffl": [12, 13, 14, 15, 67], "sigma": [16, 23, 54, 68, 69, 71], "sigmoid": [0, 24, 31, 43, 69, 70], "signal": [0, 16, 18, 19, 26, 33, 55, 56, 57, 65, 66, 68, 69], "silli": [59, 60, 73], "sim": [24, 69], "similar": [0, 25, 35, 69, 70], "similartii": [25, 69], "simpl": [0, 26, 28, 30, 52, 58, 69, 71, 73], "simpli": [12, 32, 67, 69], "simul": [16, 18, 19, 25, 68, 69], "singh": [26, 69], "singl": [28, 30, 69], "situat": [28, 52, 69, 71], "size": [16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 37, 38, 39, 44, 68, 69, 70], "sklearn": [0, 12, 13, 15, 22, 24, 25, 27, 28, 31, 32, 51, 52, 53, 54, 67, 69, 71], "slide": [0, 30, 65, 66], "small": [23, 24, 26, 69], "smo": [31, 69], "smyth": [26, 69], "snr": [16, 18, 19, 68], "so": [28, 69], "softmax": [16, 68], "solut": [24, 27, 69], "solv": [24, 26, 27, 28, 29, 30, 69], "some": [0, 24, 25, 52, 54, 69, 71], "sometim": [0, 38, 70], "sourc": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73], "space": [24, 25, 69], "span": [51, 71], "spars": [24, 69], "spatial": [0, 17, 28, 29, 68, 69], "spatio": [26, 69], "spearman": [0, 49, 50, 70], "spearmanr": [0, 25, 50, 65, 66, 69], "spearmanr_d": [0, 25, 66, 69, 70], "special": [51, 71], "specif": [40, 41, 42, 43, 53, 70, 71], "specifi": [22, 24, 51, 53, 69, 71], "speed": [24, 69], "sphinx": 9, "split": [12, 13, 14, 15, 21, 26, 66, 67, 69], "sqrt": [39, 44, 45, 70], "squar": [24, 27, 37, 38, 69, 70], "squeez": [28, 31, 69], "sr": [26, 33, 69], "stabilis": [16, 18, 19, 68], "stabl": [26, 69], "stack": [15, 28, 30, 31, 52, 67, 69, 71], "standard": [0, 16, 30, 54, 68, 69, 71], "standardscal": [0, 54, 71], "state": [12, 13, 14, 15, 67], "statement": 73, "static": [12, 67], "statist": [27, 69], "std": [53, 54, 71], "step": [21, 30, 31, 51, 52, 53, 54, 69, 71], "stick": [52, 71], "stimuli": [0, 16, 18, 19, 26, 33, 68, 69], "stimulu": [0, 16, 18, 19, 26, 33, 68, 69], "stop": [31, 69], "str": [16, 18, 19, 20, 22, 23, 24, 26, 28, 31, 32, 51, 55, 56, 57, 59, 60, 61, 62, 63, 68, 69, 71, 72, 73], "stratifi": [0, 14, 15, 67], "stratifiedkfold": [0, 26, 65, 66, 69], "strength": [21, 31, 69], "strimmer": [23, 69], "string": [0, 26, 52, 63, 69, 71, 73], "structur": [25, 67, 68, 69, 70, 71, 72], "submodul": [65, 66], "subpackag": 65, "subplot": [16, 18, 19, 68], "subset": [26, 69], "subsystem": [68, 69, 73], "sum": [37, 45, 48, 70], "sum_": [23, 24, 26, 27, 28, 29, 33, 39, 69, 70], "sum_i": [27, 30, 34, 69, 70], "sum_n": [33, 69], "super": [22, 69], "suppli": [26, 27, 32, 61, 62, 69, 73], "support": [0, 25, 29, 30, 31, 52, 69, 71], "sure": [12, 13, 14, 15, 25, 32, 67, 69], "svc": [0, 22, 24, 28, 65, 66, 70], "swapax": [30, 38, 69, 70], "system": [25, 26, 69, 73], "systemat": [23, 69], "t": [16, 18, 19, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 38, 40, 41, 43, 44, 59, 60, 68, 69, 70, 73], "t_baselin": [16, 18, 19, 68], "t_durat": [16, 18, 19, 68], "t_length": [16, 18, 19, 68], "t_max": [26, 33, 69], "t_min": [26, 33, 69], "t_pad": [16, 18, 19, 68], "tail": [23, 51, 69, 71], "take": [22, 48, 69, 70], "target": [12, 13, 14, 15, 21, 22, 24, 27, 28, 29, 31, 32, 33, 67, 69], "task": [28, 69], "tau": [26, 33, 69], "technic": [37, 70], "temperatur": [16, 68], "tempor": [0, 18, 19, 26, 30, 33, 68, 69], "tend": [23, 69], "tensor": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73], "tesor": [35, 36, 70], "test": [12, 13, 14, 15, 24, 26, 27, 28, 29, 30, 67, 69], "test_cnt": [14, 15, 67], "text": [34, 35, 36, 46, 48, 50, 70], "textrm": [23, 24, 27, 28, 51, 69, 71], "th": [39, 45, 70], "than": [21, 24, 26, 27, 31, 69], "thei": [30, 51, 69, 71], "theori": [24, 69], "therefor": [12, 24, 31, 37, 67, 69, 70], "thereof": [28, 69], "theunissen": [26, 69], "thi": [0, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 40, 41, 42, 43, 51, 52, 53, 54, 61, 62, 67, 68, 69, 70, 71, 73], "third": [31, 69], "thirion": [27, 69], "those": [25, 69], "three": [20, 23, 31, 51, 52, 68, 69, 71], "through": [23, 24, 25, 26, 27, 28, 29, 30, 69], "ti": [0, 47, 70], "tight_layout": [16, 18, 19, 68], "time": [0, 16, 18, 19, 23, 25, 26, 30, 32, 33, 51, 68, 69, 71], "timedelai": [0, 26, 30, 65, 66], "timepoint": [26, 33, 69], "to_numpi": [12, 13, 14, 15, 22, 23, 25, 31, 51, 52, 53, 54, 66, 67, 69, 71], "to_torch": [12, 13, 14, 15, 22, 23, 25, 31, 51, 52, 53, 54, 66, 67, 69, 71], "togeth": [0, 16, 68], "toi": [59, 60, 73], "tol": [31, 69], "toler": [31, 69], "too": [38, 70], "tool": [26, 69, 73], "toolbox": [26, 33, 69], "top": [32, 69], "torch": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 66, 67, 68, 69, 70, 71, 72, 73], "torch_ridg": [27, 69], "total": [10, 52, 64, 71], "toward": [23, 69], "tqdm": [58, 73], "tqdm_joblib": [66, 73], "tqdm_object": 73, "tr": [23, 69], "train": [12, 13, 14, 15, 24, 31, 67, 69], "train_cnt": [14, 15, 67], "train_idx": [14, 15, 67], "transform": [12, 13, 14, 15, 23, 25, 28, 32, 51, 52, 53, 54, 66, 67, 69, 71], "treat": [29, 69], "trf": [16, 18, 19, 26, 33, 68, 69], "trial": [16, 18, 19, 25, 32, 38, 51, 68, 69, 70, 71], "triangl": [25, 69], "triangular": [25, 69], "trick": [24, 69], "trigger": [31, 69], "trivial": [22, 28, 69], "true": [12, 14, 15, 19, 21, 25, 26, 27, 28, 29, 31, 32, 33, 53, 54, 58, 59, 60, 62, 67, 68, 69, 71, 73], "truli": [25, 69], "try": [30, 69], "tune": [24, 27, 69], "tupl": [12, 13, 14, 15, 16, 18, 19, 26, 32, 51, 53, 54, 67, 68, 69, 71], "turn": [16, 18, 19, 53, 68, 71], "two": [0, 12, 21, 23, 25, 26, 31, 51, 52, 63, 67, 69, 71, 73], "tx_i": [28, 69], "type": [12, 22, 25, 26, 52, 67, 69, 71], "typic": [25, 69], "u": [16, 18, 19, 21, 48, 51, 68, 69, 70, 71], "unbiass": [25, 69], "uncertainti": [16, 68], "understand": [25, 69], "unfavour": [23, 69], "union": [12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 62, 67, 68, 69, 70, 71, 73], "uniqu": [14, 15, 48, 52, 67, 70, 71], "unit": [16, 53, 54, 68, 71], "unless": [23, 26, 52, 69, 71], "unlik": [15, 26, 28, 30, 33, 40, 41, 42, 43, 53, 67, 69, 70, 71], "unrank": [47, 70], "unspecifi": [51, 71], "unsqueez": [21, 69], "until": [12, 67], "unus": [12, 13, 14, 15, 51, 67, 71], "up": [12, 67], "updat": [31, 69], "upon": [12, 67], "upper": [25, 51, 69, 71], "upper_": [51, 71], "us": [0, 9, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 48, 51, 52, 53, 54, 67, 68, 69, 70, 71], "util": [0, 58, 59, 60, 61, 62, 63, 65, 66], "v": [22, 26, 27, 69], "v_a": [63, 73], "v_b": [63, 73], "valid": [0, 12, 13, 14, 15, 24, 25, 26, 27, 37, 38, 65, 66, 69, 70], "valu": [0, 22, 24, 26, 27, 28, 31, 33, 51, 53, 61, 69, 71, 73], "vanderpla": [27, 69], "var": [0, 61, 62, 73], "var_": [54, 71], "varepsilon": [24, 26, 27, 28, 29, 30, 69], "vari": [0, 16, 18, 68], "variabl": [0, 19, 31, 61, 62, 68, 69, 73], "varianc": [53, 54, 71], "varoquaux": [27, 69], "vector": [0, 21, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 69, 70], "vectoris": [52, 70, 71], "verbos": [25, 32, 69], "veri": [21, 30, 59, 60, 69, 73], "version": [0, 63, 65, 66], "versu": [0, 22, 31, 69], "vert": [31, 42, 69, 70], "vinj": [26, 69], "violat": [31, 69], "visual": [26, 69], "vote": [22, 31, 69], "voxel": [37, 70], "w": [23, 24, 26, 33, 69], "w_": [31, 33, 69], "wa": [51, 62, 71, 73], "wai": [12, 51, 67, 71], "walther": [37, 70], "want": [12, 15, 21, 22, 25, 30, 31, 32, 67, 69], "warn": [68, 69, 73], "we": [12, 15, 16, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 48, 67, 68, 69, 70, 73], "weight": [21, 24, 26, 28, 29, 31, 33, 54, 69, 71], "well": [0, 23, 28, 69], "were": [26, 33, 69], "what": [16, 18, 19, 23, 26, 29, 30, 31, 51, 61, 68, 69, 71, 73], "when": [12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 26, 30, 31, 32, 51, 52, 67, 68, 69, 71], "whenev": [51, 71], "where": [12, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 44, 45, 48, 51, 52, 54, 67, 68, 69, 70, 71], "wherea": [24, 31, 69], "wherein": 69, "whether": [21, 25, 27, 28, 29, 32, 58, 69, 73], "which": [12, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 31, 51, 53, 54, 67, 68, 69, 71], "while": [22, 25, 29, 31, 69], "whiten": [0, 23, 69], "whitener_": [23, 69], "whitnei": [48, 70], "wic": [27, 69], "wiesel": [23, 69], "wilei": [27, 69], "willmor": [26, 69], "win": [22, 69], "window": [26, 33, 69], "wish": [32, 69], "with_cent": [53, 71], "with_mean": [54, 71], "with_scal": [53, 71], "with_std": [54, 71], "without": [24, 51, 69, 71], "wolf": [23, 69], "word": [24, 69], "work": [12, 15, 67, 69, 71], "would": [12, 13, 14, 15, 25, 26, 29, 30, 67, 69], "wrap": [22, 31, 69], "wrapper": [0, 22, 69, 70], "wrong": [30, 69], "x": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 59, 60, 67, 68, 69, 70, 71, 73], "x0": [28, 31, 69], "x1": [28, 31, 69], "x_": [24, 37, 54, 69, 70, 71], "x_i": [27, 29, 30, 34, 38, 39, 45, 54, 69, 70, 71], "x_j": [38, 70], "x_k": [23, 69], "x_train_": [31, 69], "y": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 59, 60, 67, 68, 69, 70, 71, 73], "y0": [15, 28, 31, 67, 69], "y1": [15, 28, 31, 67, 69], "y_": [37, 70], "y_h": [21, 22, 24, 26, 27, 28, 29, 30, 31, 69], "y_i": [27, 28, 29, 30, 34, 38, 39, 45, 69, 70], "y_j": [38, 70], "y_score": [0, 48, 70], "y_true": [0, 48, 70], "you": [0, 12, 13, 14, 15, 21, 32, 52, 67, 69, 71], "your": [0, 12, 24, 25, 32, 46, 49, 50, 67, 69, 70], "z": [17, 20, 51, 53, 68, 71], "zareamoghaddam": [25, 38, 69, 70], "zero": [24, 25, 53, 69, 71], "zip": 9, "\u00df": [18, 19, 21, 24, 26, 27, 29, 30, 33, 68, 69], "\u03b3": [41, 42, 43, 70], "\u03c3": [0, 38, 44, 70]}, "titles": ["API Reference", "mvpy", "mvpy.crossvalidation", "mvpy.dataset", "mvpy.estimators", "mvpy.math", "mvpy.preprocessing", "mvpy.signal", "mvpy.utilities", "Examples", "Computation times", "&lt;no title&gt;", "KFold", "RepeatedKFold", "RepeatedStratifiedKFold", "StratifiedKFold", "make_meeg_categorical", "make_meeg_colours", "make_meeg_continuous", "make_meeg_discrete", "make_meeg_layout", "B2B", "Classifier", "Covariance", "KernelRidgeCV", "RSA", "ReceptiveField", "RidgeCV", "RidgeClassifier", "RidgeDecoder", "RidgeEncoder", "SVC", "Sliding", "TimeDelayed", "accuracy", "cosine", "cosine_d", "cv_euclidean", "cv_mahalanobis", "euclidean", "kernel_linear", "kernel_poly", "kernel_rbf", "kernel_sigmoid", "mahalanobis", "pearsonr", "pearsonr_d", "rank", "roc_auc", "spearmanr", "spearmanr_d", "Clamp", "LabelBinariser", "RobustScaler", "Scaler", "hamming_window", "hann_window", "raised_cosine_window", "Progressbar", "numpy", "torch", "get_var", "is_enabled", "compare", "Computation times", "mvpy", "mvpy package", "mvpy.crossvalidation package", "mvpy.dataset package", "mvpy.estimators package", "mvpy.math package", "mvpy.preprocessing package", "mvpy.signal package", "mvpy.utilities package"], "titleterms": {"accuraci": [34, 70], "api": 0, "b2b": [21, 69], "clamp": [51, 71], "classifi": [22, 69], "compar": 63, "compil": 73, "comput": [10, 64], "content": [66, 67, 68, 69, 70, 71, 72, 73], "cosin": [35, 70], "cosine_d": 36, "covari": [23, 69], "cross_val_scor": 67, "crossvalid": [2, 67, 70], "csp": 69, "cv_euclidean": 37, "cv_mahalanobi": 38, "dataset": [3, 68], "env": 73, "estim": [4, 69], "euclidean": [39, 70], "exampl": 9, "get_var": 61, "hamming_window": 55, "hammingwindow": 72, "hann_window": 56, "hannwindow": 72, "is_en": 62, "kernel_linear": [40, 70], "kernel_poli": [41, 70], "kernel_rbf": [42, 70], "kernel_sigmoid": [43, 70], "kernelridgecv": [24, 69], "kfold": [12, 67], "labelbinaris": [52, 71], "mahalanobi": [44, 70], "make_meeg_categor": [16, 68], "make_meeg_colour": [17, 68], "make_meeg_continu": [18, 68], "make_meeg_discret": [19, 68], "make_meeg_layout": [20, 68], "math": [5, 70], "modul": [66, 67, 68, 69, 70, 71, 72, 73], "mvpy": [1, 2, 3, 4, 5, 6, 7, 8, 65, 66, 67, 68, 69, 70, 71, 72, 73], "numpi": 59, "packag": [66, 67, 68, 69, 70, 71, 72, 73], "pearsonr": [45, 70], "pearsonr_d": 46, "preprocess": [6, 71], "progressbar": [58, 73], "raised_cosine_window": 57, "raisedcosinewindow": 72, "rank": [47, 70], "receptivefield": [26, 69], "refer": 0, "repeatedkfold": [13, 67], "repeatedstratifiedkfold": [14, 67], "ridgeclassifi": [28, 69], "ridgecv": [27, 69], "ridgedecod": [29, 69], "ridgeencod": [30, 69], "robustscal": [53, 71], "roc_auc": [48, 70], "rsa": [25, 69], "scaler": [54, 71], "signal": [7, 72], "slide": [32, 69], "spearmanr": [49, 70], "spearmanr_d": 50, "stratifiedkfold": [15, 67], "submodul": [67, 68, 69, 70, 71, 72, 73], "subpackag": 66, "svc": [31, 69], "time": [10, 64], "timedelai": [33, 69], "torch": 60, "util": [8, 73], "valid": 67, "version": 73}})